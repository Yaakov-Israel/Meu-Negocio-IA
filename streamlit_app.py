import streamlit as st
import os
import google.generativeai as genai # Adicionado aqui, mas a configura√ß√£o ainda precisa ser feita por voc√™

# --- Configura√ß√£o Inicial do Modelo Gemini (Exemplo) ---
# Substitua pela sua chave de API e configura√ß√£o do modelo.
# Esta se√ß√£o √© um placeholder. VOC√ä PRECISA CONFIGURAR SUA CHAVE DE API.

# GOOGLE_API_KEY = "SUA_CHAVE_API_AQUI" # Descomente e cole sua chave aqui ou use vari√°veis de ambiente
# if 'gemini_model' not in st.session_state:
#     try:
#         api_key_to_use = os.getenv("GOOGLE_API_KEY") if not GOOGLE_API_KEY else GOOGLE_API_KEY # Prioriza a chave no c√≥digo se preenchida
#
#         if api_key_to_use:
#             genai.configure(api_key=api_key_to_use)
#             model = genai.GenerativeModel(
#                 model_name="gemini-1.5-pro-latest", # Ou seu modelo preferido
#                 # generation_config=generation_config, # Se tiver config espec√≠fica
#                 # safety_settings=safety_settings # Se tiver config espec√≠fica
#             )
#             st.session_state.gemini_model = model
#             st.session_state.gemini_model_initialized = True
#             # st.sidebar.success("‚úÖ Modelo LLM (Gemini) inicializado!") # Feedback opcional
#         else:
#             st.sidebar.error("üîë Chave da API do Google n√£o configurada. A IA n√£o funcionar√°.")
#             st.session_state.gemini_model_initialized = False
#             # st.stop() # Para a execu√ß√£o se a chave for crucial e n√£o encontrada
#
#     except Exception as e:
#         st.error(f"‚ùå Erro ao inicializar o modelo Gemini: {e}")
#         st.session_state.gemini_model_initialized = False
#         st.stop() # Para a execu√ß√£o se a inicializa√ß√£o falhar

# --- Placeholder para a chamada √† API do Gemini ---
def call_gemini_api(prompt_text, user_files_info=None):
    """
    Placeholder para a chamada real √† API do Gemini.
    Substitua esta fun√ß√£o pela sua implementa√ß√£o de chamada ao Gemini.
    """
    # Verifique se o modelo foi inicializado (simula√ß√£o)
    # if not st.session_state.get('gemini_model_initialized', False) and not st.session_state.get('gemini_model'):
    #     st.error("Modelo Gemini n√£o inicializado. Verifique a configura√ß√£o da API Key.")
    #     return "Erro: Modelo n√£o inicializado."

    st.markdown("---")
    st.write("‚ÑπÔ∏è **Informa√ß√£o para Desenvolvimento (Placeholder):**")
    st.write("**Prompt Enviado para IA (resumido):**")
    st.text_area("Prompt:", prompt_text[:1000] + "..." if len(prompt_text) > 1000 else prompt_text, height=150, key=f"prompt_debug_{hash(prompt_text)}")
    if user_files_info:
        st.write("**Arquivos Considerados (simulado):**")
        for file_info in user_files_info:
            st.write(f"- {file_info['name']} ({file_info['type']})")
    st.markdown("---")

    # Simula√ß√£o de resposta da IA
    # Na implementa√ß√£o real, voc√™ usaria algo como:
    # if st.session_state.get('gemini_model'):
    # try:
    #       response = st.session_state.gemini_model.generate_content(prompt_text)
    #       return response.text
    #     except Exception as e:
    #         st.error(f"Erro na chamada ao Gemini: {e}")
    #         return f"Erro ao gerar resposta da IA: {e}"
    # else:
    #     return "Modelo n√£o dispon√≠vel para gerar resposta."

    if "criar post" in prompt_text.lower():
        return f"Conte√∫do do post gerado pela IA com base no prompt:\n{prompt_text[:200]}...\n\n[Aqui viria o post completo, hashtags, emojis, etc.]"
    elif "criar campanha" in prompt_text.lower():
        return f"Plano de campanha gerado pela IA:\n{prompt_text[:200]}...\n\n[Aqui viria o plano detalhado, calend√°rio de conte√∫do, ideias de criativos, etc.]"
    elif "landing page" in prompt_text.lower():
        return f"Sugest√µes para Landing Page geradas pela IA:\n{prompt_text[:200]}...\n\n[Estrutura da LP, textos, CTAs, sugest√µes de design, etc.]"
    elif "criar site" in prompt_text.lower():
        return f"Ideias e estrutura para Site geradas pela IA:\n{prompt_text[:200]}...\n\n[P√°ginas, se√ß√µes, conte√∫do sugerido, conceito de design, etc.]"
    elif "encontre seu cliente" in prompt_text.lower():
        return f"An√°lise de p√∫blico-alvo gerada pela IA:\n{prompt_text[:200]}...\n\n[Perfil do cliente, sugest√µes de segmenta√ß√£o, melhores canais, etc.]"
    elif "conhe√ßa a concorr√™ncia" in prompt_text.lower():
        return f"An√°lise de concorr√™ncia gerada pela IA:\n{prompt_text[:200]}...\n\n[Relat√≥rio dos concorrentes, pontos fortes/fracos, oportunidades, etc.]"
    return "Resposta simulada da IA para: " + prompt_text[:100] + "..."

# --- Fun√ß√µes Auxiliares de UI ---
def display_social_media_options(section_key, all_option_text="Selecionar Todas as Plataformas Acima"):
    st.subheader("Plataformas Desejadas:")
    platforms_options = {
        "Instagram": f"{section_key}_insta", "Facebook": f"{section_key}_fb", "X (Twitter)": f"{section_key}_x",
        "WhatsApp": f"{section_key}_wpp", "TikTok": f"{section_key}_tt", "Kwai": f"{section_key}_kwai",
        "YouTube (descri√ß√£o/roteiro)": f"{section_key}_yt",
        "E-mail Marketing (lista pr√≥pria)": f"{section_key}_email_own",
        "E-mail Marketing (Campanha Google Ads)": f"{section_key}_email_google"
    }
    cols = st.columns(2)
    selected_platforms_map = {}
    platform_keys = list(platforms_options.keys())

    for i, platform_name in enumerate(platform_keys):
        col_index = i % 2
        with cols[col_index]:
            selected_platforms_map[platform_name] = st.checkbox(platform_name, key=platforms_options[platform_name])

    # O checkbox "Selecionar Todas" precisa de uma l√≥gica mais elaborada com callbacks ou st.form para refletir imediatamente na UI.
    # Por simplicidade, ele definir√° o estado que ser√° lido no processamento.
    if st.checkbox(all_option_text, key=f"{section_key}_all_social"):
        # Esta l√≥gica de "selecionar todos" aqui √© para quando o form for submetido.
        # A UI dos checkboxes individuais n√£o ser√° atualizada dinamicamente por este checkbox sem callbacks.
        for platform_name in platform_keys:
            selected_platforms_map[platform_name] = True


    actual_selected_platforms = [p for p, is_selected in selected_platforms_map.items() if is_selected]
    # Se "Selecionar Todas" foi marcado, sobrescreve
    if selected_platforms_map.get(all_option_text, False) or st.session_state.get(f"{section_key}_all_social", False): # Verifica o estado do checkbox "Selecionar Todas"
         actual_selected_platforms = platform_keys


    if any(p in actual_selected_platforms for p in ["E-mail Marketing (lista pr√≥pria)", "E-mail Marketing (Campanha Google Ads)"]):
        st.caption("üí° Para e-mail marketing, a IA ajudar√° na cria√ß√£o do texto, sugest√µes de imagens/layout e estrat√©gia. O disparo da a√ß√£o e a gest√£o de listas/campanhas no Google Ads requerem ferramentas externas.")
    return actual_selected_platforms

def get_objective_details(section_key, type_of_creation="post/campanha"):
    st.subheader(f"Detalhes para Orientar a Cria√ß√£o do(a) {type_of_creation.capitalize()}:")
    details = {}
    details["objective"] = st.text_area(
        f"Qual o principal objetivo com est(e/a) {type_of_creation}? (Ex: Aumentar vendas, gerar leads, divulgar evento, construir marca)",
        key=f"{section_key}_obj"
    )
    details["target_audience"] = st.text_input("Quem voc√™ quer alcan√ßar? (Descreva seu p√∫blico-alvo)", key=f"{section_key}_audience")
    details["product_service"] = st.text_area("Qual produto ou servi√ßo principal voc√™ est√° promovendo?", key=f"{section_key}_product")
    details["key_message"] = st.text_area("Qual mensagem chave voc√™ quer comunicar?", key=f"{section_key}_message")
    details["usp"] = st.text_area("O que torna seu produto/servi√ßo especial ou diferente da concorr√™ncia (USP)?", key=f"{section_key}_usp")
    details["style_tone"] = st.selectbox(
        "Qual o tom/estilo da comunica√ß√£o?",
        ("Profissional e direto", "Amig√°vel e informal", "Criativo e inspirador", "Urgente e promocional", "Engra√ßado e leve", "Educacional e informativo"),
        key=f"{section_key}_tone"
    )
    details["extra_info"] = st.text_area("Alguma informa√ß√£o adicional, promo√ß√£o espec√≠fica, ou call-to-action (CTA) principal que devemos incluir?", key=f"{section_key}_extra")
    return details

def display_output_options(generated_content, section_key, file_name_prefix="conteudo_gerado"):
    st.subheader("Resultado da IA e Pr√≥ximos Passos:")
    st.markdown(generated_content)

    st.download_button(
        label="üì• Baixar Conte√∫do Gerado",
        data=generated_content.encode('utf-8'),
        file_name=f"{file_name_prefix}_{section_key}.txt",
        mime="text/plain",
        key=f"download_{section_key}"
    )

    cols_actions = st.columns(2)
    with cols_actions[0]:
        if st.button("üîó Simular Compartilhamento", key=f"{section_key}_share_btn"):
            st.success("Conte√∫do pronto para ser copiado e compartilhado nas suas redes ou e-mail!")
            st.caption("Lembre-se de adaptar para cada plataforma, se necess√°rio.")
    with cols_actions[1]:
        if st.button("üóìÔ∏è Simular Agendamento", key=f"{section_key}_schedule_btn"):
            st.info("Agendamento simulado. Para agendamento real, use ferramentas como Meta Business Suite, Hootsuite, mLabs, ou a fun√ß√£o de programa√ß√£o do seu servi√ßo de e-mail marketing.")

# --- Se√ß√£o Principal de Marketing Digital ---
def marketing_digital_section():
    st.header("üöÄ Marketing Digital com IA")
    st.caption("Seu copiloto para criar estrat√©gias de marketing digital eficazes!")
    st.markdown("---")

    with st.sidebar:
        st.header("üìé Material de Suporte")
        st.caption("Envie arquivos para contextualizar a IA na cria√ß√£o das suas a√ß√µes de marketing.")
        uploaded_files = st.file_uploader(
            "Upload de imagens, textos, planilhas, v√≠deos:",
            accept_multiple_files=True,
            type=['png', 'jpg', 'jpeg', 'txt', 'md', 'pdf', 'csv', 'xlsx', 'docx', 'pptx', 'mp4', 'mov'],
            key="marketing_files_uploader"
        )
        user_files_info = []
        if uploaded_files:
            for uploaded_file in uploaded_files:
                user_files_info.append({"name": uploaded_file.name, "type": uploaded_file.type, "size": uploaded_file.size})
            st.success(f"{len(uploaded_files)} arquivo(s) carregado(s) com sucesso!")
            with st.expander("Ver arquivos carregados"):
                for file_info in user_files_info:
                    st.write(f"- {file_info['name']} ({file_info['type']})")
        st.markdown("---")
        st.info("A IA poder√° usar o nome e tipo dos arquivos para entender o contexto. Para an√°lise de conte√∫do de texto, a implementa√ß√£o da chamada ao Gemini precisar√° ler e enviar o texto do arquivo.")

    main_action = st.radio(
        "Ol√°! O que voc√™ quer fazer agora em marketing digital?",
        (
            "Selecione uma op√ß√£o...",
            "1 - Criar post para redes sociais ou e-mail",
            "2 - Criar campanha de marketing completa",
            "3 - Criar estrutura e conte√∫do para landing page",
            "4 - Criar estrutura e conte√∫do para site com IA",
            "5 - Encontrar meu cliente ideal (An√°lise de P√∫blico-Alvo)",
            "6 - Conhecer a concorr√™ncia (An√°lise Competitiva)"
        ),
        index=0,
        key="main_marketing_action_choice"
    )
    st.markdown("---")

    if main_action == "1 - Criar post para redes sociais ou e-mail":
        st.subheader("‚ú® Criador de Posts com IA")
        with st.form("post_creator_form"):
            selected_platforms = display_social_media_options("post")
            post_details = get_objective_details("post", "post")
            submitted_post = st.form_submit_button("üí° Gerar Post!")

        if submitted_post:
            if not selected_platforms:
                st.warning("Por favor, selecione pelo menos uma plataforma.")
            elif not post_details["objective"]:
                st.warning("Por favor, descreva o objetivo do post.")
            else:
                with st.spinner("ü§ñ A IA est√° criando seu post... Aguarde!"):
                    prompt_parts = [
                        "**Instru√ß√£o para IA:** Voc√™ √© um especialista em copywriting e marketing digital criando um post para pequenas empresas.",
                        f"**Plataformas Alvo:** {', '.join(selected_platforms)}.",
                        f"**Objetivo do Post:** {post_details['objective']}",
                        f"**P√∫blico-Alvo:** {post_details['target_audience']}",
                        f"**Produto/Servi√ßo Promovido:** {post_details['product_service']}",
                        f"**Mensagem Chave:** {post_details['key_message']}",
                        f"**Diferencial (USP):** {post_details['usp']}",
                        f"**Tom/Estilo:** {post_details['style_tone']}",
                        f"**Informa√ß√µes Adicionais/CTA:** {post_details['extra_info']}",
                        "**Tarefa:**",
                        "1. Gere o conte√∫do do post. Se m√∫ltiplas plataformas foram selecionadas, forne√ßa uma vers√£o base com dicas de adapta√ß√£o para cada uma, ou vers√µes ligeiramente diferentes se a natureza da plataforma exigir (ex: WhatsApp mais direto, E-mail com Assunto e corpo).",
                        "2. Inclua sugest√µes de 3-5 hashtags relevantes e populares, se aplic√°vel.",
                        "3. Sugira 2-3 emojis apropriados para o tom e conte√∫do.",
                        "4. Se for para e-mail, crie um Assunto (Subject Line) chamativo e o corpo do e-mail.",
                        "5. Se for para YouTube/TikTok/Kwai, forne√ßa um roteiro breve ou ideias principais para um v√≠deo curto (at√© 1 minuto), incluindo sugest√µes para o visual e √°udio.",
                        "6. Se o usu√°rio enviou arquivos de suporte, mencione como eles podem ser usados (ex: 'use a imagem [nome_arquivo_imagem] como principal' ou 'baseie-se nos dados da planilha [nome_arquivo_planilha]')."
                    ]
                    if user_files_info:
                        prompt_parts.append(f"**Arquivos de Suporte Enviados (para refer√™ncia contextual):** {', '.join([f['name'] for f in user_files_info])}.")

                    final_prompt = "\n\n".join(prompt_parts)
                    generated_content = call_gemini_api(final_prompt, user_files_info)
                    st.session_state.generated_post_content = generated_content

        if 'generated_post_content' in st.session_state:
            display_output_options(st.session_state.generated_post_content, "post", "post_ia")

    elif main_action == "2 - Criar campanha de marketing completa":
        st.subheader("üåç Planejador de Campanhas de Marketing com IA")
        with st.form("campaign_creator_form"):
            campaign_name = st.text_input("Nome da Campanha (para sua organiza√ß√£o):", key="campaign_name")
            selected_platforms_camp = display_social_media_options("campaign")
            campaign_details = get_objective_details("campaign", "campanha")
            campaign_duration = st.text_input("Dura√ß√£o Estimada da Campanha (Ex: 1 semana, 1 m√™s, lan√ßamento pontual):", key="campaign_duration")
            campaign_budget_approx = st.text_input("Or√ßamento Aproximado para Impulsionamento (opcional, ex: R$500):", key="campaign_budget")
            specific_kpis = st.text_area(
                "Quais Indicadores Chave de Performance (KPIs) s√£o mais importantes para esta campanha?",
                placeholder="Ex: N¬∫ de vendas diretas, % de aumento em leads, custo por clique (CPC) alvo, taxa de engajamento.",
                key="campaign_kpis"
            )
            submitted_campaign = st.form_submit_button("üöÄ Gerar Plano de Campanha!")

        if submitted_campaign:
            if not selected_platforms_camp:
                st.warning("Selecione ao menos uma plataforma para a campanha.")
            elif not campaign_details["objective"]:
                st.warning("Descreva o objetivo principal da campanha.")
            else:
                with st.spinner("üß† A IA est√° elaborando seu plano de campanha... Isso pode levar um momento."):
                    prompt_parts = [
                        "**Instru√ß√£o para IA:** Voc√™ √© um estrategista de marketing digital s√™nior, criando um plano de campanha completo e acion√°vel para uma pequena empresa.",
                        f"**Nome da Campanha:** {campaign_name}",
                        f"**Plataformas Envolvidas:** {', '.join(selected_platforms_camp)}.",
                        f"**Dura√ß√£o Estimada:** {campaign_duration}",
                        f"**Or√ßamento para Impulsionamento (Refer√™ncia):** {campaign_budget_approx}",
                        f"**Objetivo Principal da Campanha:** {campaign_details['objective']}",
                        f"**P√∫blico-Alvo Detalhado:** {campaign_details['target_audience']}",
                        f"**Produto/Servi√ßo Central:** {campaign_details['product_service']}",
                        f"**Mensagem Chave Central:** {campaign_details['key_message']}",
                        f"**Principal Diferencial (USP):** {campaign_details['usp']}",
                        f"**Tom/Estilo Geral da Campanha:** {campaign_details['style_tone']}",
                        f"**KPIs Principais:** {specific_kpis}",
                        f"**Informa√ß√µes Adicionais/CTA Principal:** {campaign_details['extra_info']}",
                        "**Tarefa:** Elabore um plano de campanha que inclua:",
                        "1.  **Conceito Criativo Central:** Uma ideia ou tema que unifique a campanha.",
                        "2.  **Estrutura da Campanha:** Fases sugeridas (ex: Teaser, Lan√ßamento, Sustenta√ß√£o, √öltima Chamada), se aplic√°vel √† dura√ß√£o.",
                        "3.  **Mix de Conte√∫do por Plataforma:** Sugest√µes de 3-5 tipos diferentes de posts/a√ß√µes para CADA plataforma selecionada (Ex: para Instagram: 1x Reels, 2x Carrossel, 3x Stories interativos. Para E-mail: 1x E-mail de an√∫ncio, 1x E-mail de benef√≠cios, 1x E-mail de prova social).",
                        "4.  **Sugest√µes de Criativos:** Ideias para visuais, v√≠deos, textos principais para alguns dos conte√∫dos chave.",
                        "5.  **Mini Calend√°rio Editorial:** Um esbo√ßo de como distribuir os conte√∫dos ao longo da dura√ß√£o da campanha.",
                        "6.  **Estrat√©gia de Hashtags (se aplic√°vel).**",
                        "7.  **Recomenda√ß√µes para Impulsionamento:** Onde alocar o or√ßamento (se informado), que tipo de p√∫blico impulsionar.",
                        "8.  **Como Mensurar os KPIs:** Sugest√µes de m√©tricas espec√≠ficas a acompanhar por plataforma.",
                        "9.  **Dicas de Otimiza√ß√£o:** O que observar durante a campanha para fazer ajustes.",
                        "Se o usu√°rio enviou arquivos de suporte, integre informa√ß√µes relevantes deles no plano."
                    ]
                    if user_files_info:
                        prompt_parts.append(f"**Arquivos de Suporte Enviados (para refer√™ncia contextual):** {', '.join([f['name'] for f in user_files_info])}.")

                    final_prompt = "\n\n".join(prompt_parts)
                    generated_content = call_gemini_api(final_prompt, user_files_info)
                    st.session_state.generated_campaign_content = generated_content
        if 'generated_campaign_content' in st.session_state:
            display_output_options(st.session_state.generated_campaign_content, "campaign", "campanha_ia")

    elif main_action == "3 - Criar estrutura e conte√∫do para landing page":
        st.subheader("üìÑ Gerador de Estrutura para Landing Pages com IA")
        st.caption("Crie uma Landing Page (LP) focada em convers√£o. A IA vai te ajudar com a estrutura e o copy.")
        with st.form("landing_page_form"):
            lp_purpose = st.text_input("Qual o principal objetivo da sua landing page? (Ex: Capturar leads para ebook, vender produto X, inscri√ß√£o em webinar)", key="lp_purpose")
            lp_target_audience = st.text_input("Para quem √© esta landing page? (Descreva a persona)", key="lp_audience")
            lp_main_offer = st.text_area("Qual √© a oferta principal e irresist√≠vel da landing page?", key="lp_offer")
            lp_key_benefits = st.text_area("Quais s√£o os 3-5 principais benef√≠cios ou transforma√ß√µes que sua oferta proporciona?", placeholder="Use bullet points ou frases curtas.", key="lp_benefits")
            lp_cta = st.text_input("Qual √© a chamada para a√ß√£o (CTA) principal? (Ex: Baixar Ebook Gr√°tis, Comprar Agora com Desconto, Quero me Inscrever)", key="lp_cta")
            lp_visual_prefs = st.text_input("Voc√™ tem alguma prefer√™ncia de cores, estilo visual ou sites de refer√™ncia para a LP? (Opcional)", key="lp_visual")
            submitted_lp = st.form_submit_button("üõ†Ô∏è Gerar Estrutura da Landing Page!")

        if submitted_lp:
            if not lp_purpose or not lp_main_offer or not lp_cta:
                st.warning("Por favor, preencha o objetivo, a oferta principal e o CTA da landing page.")
            else:
                with st.spinner("üé® A IA est√° desenhando a estrutura da sua landing page..."):
                    prompt_parts = [
                        "**Instru√ß√£o para IA:** Voc√™ √© um especialista em UX/UI e copywriting, focado em criar landing pages de alta convers√£o para pequenas empresas.",
                        f"**Objetivo da Landing Page:** {lp_purpose}",
                        f"**P√∫blico-Alvo (Persona):** {lp_target_audience}",
                        f"**Oferta Principal:** {lp_main_offer}",
                        f"**Principais Benef√≠cios da Oferta:** {lp_key_benefits}",
                        f"**Chamada para A√ß√£o (CTA) Principal:** {lp_cta}",
                        f"**Prefer√™ncias Visuais/Refer√™ncias:** {lp_visual_prefs}",
                        "**Tarefa:** Crie uma estrutura detalhada e sugest√µes de conte√∫do (copy) para esta landing page. O resultado deve incluir:",
                        "1.  **T√≠tulo Principal (Headline):** Sugira 2-3 varia√ß√µes de headlines magn√©ticas e focadas no benef√≠cio.",
                        "2.  **Subt√≠tulo:** Um subt√≠tulo que complemente a headline e reforce a proposta de valor.",
                        "3.  **Se√ß√£o de Abertura/Problema:** Como introduzir o problema que a oferta resolve ou a oportunidade que ela apresenta.",
                        "4.  **Se√ß√£o da Solu√ß√£o/Oferta:** Apresenta√ß√£o clara da oferta, destacando seus componentes.",
                        "5.  **Se√ß√£o de Benef√≠cios:** Detalhar os benef√≠cios listados, talvez usando √≠cones (sugerir quais).",
                        "6.  **Se√ß√£o de Prova Social:** Onde e como incluir depoimentos, estudos de caso, n√∫meros de clientes, logos de parceiros (sugerir o que seria ideal).",
                        "7.  **Se√ß√£o de CTA:** Refor√ßar o CTA principal e talvez um CTA secund√°rio. Sugerir texto para o bot√£o.",
                        "8.  **Elementos Adicionais (Opcional):** Sugerir se faria sentido incluir FAQ, Garantia, Selos de Seguran√ßa, etc.",
                        "9.  **Tom de Voz e Estilo de Copy:** Recomenda√ß√µes para o texto ser persuasivo para a persona indicada.",
                        "10. **Sugest√µes de Layout/Design:** Descrever brevemente como as se√ß√µes poderiam ser organizadas visualmente e que tipo de imagens/√≠cones seriam mais eficazes (sem gerar a imagem, apenas descrever).",
                        "Se o usu√°rio enviou arquivos de suporte, sugira como integr√°-los (ex: 'usar a logo [nome_arquivo_logo.png] no cabe√ßalho')."
                    ]
                    if user_files_info:
                        prompt_parts.append(f"**Arquivos de Suporte Enviados (para refer√™ncia contextual):** {', '.join([f['name'] for f in user_files_info])}.")

                    final_prompt = "\n\n".join(prompt_parts)
                    generated_content = call_gemini_api(final_prompt, user_files_info)
                    st.session_state.generated_lp_content = generated_content

        if 'generated_lp_content' in st.session_state:
            st.subheader("üí° Estrutura e Conte√∫do Sugeridos para Landing Page:")
            st.markdown(st.session_state.generated_lp_content)
            st.download_button(
                label="üì• Baixar Sugest√µes da Landing Page",
                data=st.session_state.generated_lp_content.encode('utf-8'),
                file_name="landing_page_sugestoes_ia.txt",
                mime="text/plain",
                key="download_lp"
            )

    elif main_action == "4 - Criar estrutura e conte√∫do para site com IA":
        st.subheader("üèóÔ∏è Arquiteto de Sites com IA")
        st.caption("Defina a base do seu site institucional ou e-commerce. A IA ajudar√° com p√°ginas, se√ß√µes e conte√∫do inicial.")
        with st.form("site_creator_form"):
            site_business_type = st.text_input("Qual o tipo do seu neg√≥cio/empresa? (Ex: Loja de roupas, consultoria de TI, restaurante, profissional liberal)", key="site_biz_type")
            site_main_purpose = st.text_area("Qual o principal objetivo do seu site? (Ex: Vender produtos online, apresentar servi√ßos e gerar or√ßamentos, ser um portf√≥lio, construir autoridade com blog)", key="site_purpose")
            site_target_audience = st.text_input("Quem √© o p√∫blico principal que voc√™ quer atrair para o seu site?", key="site_audience")
            site_essential_pages = st.text_area("Quais p√°ginas voc√™ considera essenciais para o seu site? (Ex: Home, Sobre N√≥s, Servi√ßos/Produtos, Contato, Blog, FAQ, Loja)", key="site_pages", placeholder="Home, Sobre, Servi√ßos, Contato")
            site_key_features = st.text_area("Quais s√£o seus principais produtos, servi√ßos ou diferenciais que o site deve destacar?", key="site_features")
            site_brand_personality = st.text_input("Como voc√™ descreveria a personalidade da sua marca? (Ex: Moderna e inovadora, tradicional e confi√°vel, amig√°vel e acess√≠vel, sofisticada e premium)", key="site_brand")
            site_visual_references = st.text_input("Tem alguma prefer√™ncia de cores, estilo visual ou sites que voc√™ admira como refer√™ncia? (Opcional)", key="site_visual_ref")
            submitted_site = st.form_submit_button("üèõÔ∏è Gerar Estrutura do Site!")

        if submitted_site:
            if not site_business_type or not site_main_purpose:
                st.warning("Por favor, informe o tipo de neg√≥cio e o objetivo principal do site.")
            else:
                with st.spinner("üõ†Ô∏è A IA est√° arquitetando a estrutura do seu site..."):
                    prompt_parts = [
                        "**Instru√ß√£o para IA:** Voc√™ √© um arquiteto de informa√ß√£o e web designer conceitual, ajudando uma pequena empresa a planejar a estrutura e conte√∫do de seu novo site.",
                        f"**Tipo de Neg√≥cio:** {site_business_type}",
                        f"**Objetivo Principal do Site:** {site_main_purpose}",
                        f"**P√∫blico-Alvo Principal:** {site_target_audience}",
                        f"**P√°ginas Essenciais Sugeridas pelo Usu√°rio:** {site_essential_pages}",
                        f"**Principais Produtos/Servi√ßos/Diferenciais a Destacar:** {site_key_features}",
                        f"**Personalidade da Marca:** {site_brand_personality}",
                        f"**Prefer√™ncias Visuais/Refer√™ncias:** {site_visual_references}",
                        "**Tarefa:** Desenvolva uma proposta de estrutura e conte√∫do para o site. A proposta deve incluir:",
                        "1.  **Mapa do Site Sugerido:** Liste todas as p√°ginas recomendadas (considerando as sugeridas pelo usu√°rio e adicionando outras se crucial para o tipo de neg√≥cio/objetivo).",
                        "2.  **Para cada P√°gina Principal (Home, Sobre, Servi√ßos/Produtos, Contato, e 1-2 outras chave):**",
                        "    a.  **Objetivo Espec√≠fico da P√°gina.**",
                        "    b.  **Principais Se√ß√µes/Blocos de Conte√∫do dentro da p√°gina.** (Ex: Na Home: Hero section, Apresenta√ß√£o breve, Chamada para principais servi√ßos, Depoimentos, CTA).",
                        "    c.  **Sugest√µes de Textos (Copy) para as se√ß√µes mais importantes de cada p√°gina.**",
                        "    d.  **Tipos de Imagens ou Elementos Visuais recomendados para cada se√ß√£o** (descrever, n√£o gerar).",
                        "    e.  **Call-to-Actions (CTAs) relevantes para a p√°gina.**",
                        "3.  **Conceito Geral para o Design e Layout:** Com base na personalidade da marca e p√∫blico, sugira um estilo (ex: minimalista, vibrante, corporativo) e como a navega√ß√£o principal poderia funcionar.",
                        "4.  **Sugest√£o de Slogan/Tagline para o Site (opcional).**",
                        "5.  **Considera√ß√µes sobre SEO On-Page:** Breves dicas de como otimizar o conte√∫do das p√°ginas para mecanismos de busca (palavras-chave, t√≠tulos).",
                        "Se o usu√°rio enviou arquivos de suporte, sugira como incorpor√°-los (ex: 'a se√ß√£o 'Nossa Hist√≥ria' na p√°gina 'Sobre N√≥s' pode usar informa√ß√µes do arquivo [nome_arquivo_historia.docx]')."
                    ]
                    if user_files_info:
                        prompt_parts.append(f"**Arquivos de Suporte Enviados (para refer√™ncia contextual):** {', '.join([f['name'] for f in user_files_info])}.")

                    final_prompt = "\n\n".join(prompt_parts)
                    generated_content = call_gemini_api(final_prompt, user_files_info)
                    st.session_state.generated_site_content = generated_content

        if 'generated_site_content' in st.session_state:
            st.subheader("üèõÔ∏è Estrutura e Conte√∫do Sugeridos para o Site:")
            st.markdown(st.session_state.generated_site_content)
            st.download_button(
                label="üì• Baixar Sugest√µes do Site",
                data=st.session_state.generated_site_content.encode('utf-8'),
                file_name="site_sugestoes_ia.txt",
                mime="text/plain",
                key="download_site"
            )

    elif main_action == "5 - Encontrar meu cliente ideal (An√°lise de P√∫blico-Alvo)":
        st.subheader("üéØ Decodificador de Clientes com IA")
        st.caption("Entenda profundamente quem √© seu cliente ideal e onde encontr√°-lo. A IA simular√° pesquisas e an√°lises.")
        with st.form("find_client_form"):
            fc_product_campaign = st.text_area("Descreva brevemente o produto, servi√ßo ou campanha para o qual voc√™ quer encontrar o cliente ideal:", key="fc_campaign")
            fc_location = st.text_input("Cidade(s) ou regi√£o de alcance principal da sua a√ß√£o/neg√≥cio:", key="fc_location")
            fc_budget = st.text_input("Qual sua verba aproximada para esta a√ß√£o/campanha? (Opcional, ex: R$300, R$1000)", key="fc_budget")
            fc_age_gender = st.text_input("Faixa et√°ria e g√™nero predominante do p√∫blico (Ex: 25-45 anos, ambos; 30-50 anos, mulheres):", key="fc_age_gender")
            fc_interests = st.text_area("Principais interesses, hobbies, dores, necessidades ou comportamentos do seu p√∫blico-alvo:", key="fc_interests", placeholder="Ex: Amantes de caf√© artesanal, preocupados com sustentabilidade, buscam solu√ß√µes r√°pidas para X...")
            fc_current_channels = st.text_area("Quais canais de marketing voc√™ j√° utiliza ou considera para alcan√ßar esse p√∫blico?", key="fc_channels", placeholder="Ex: Instagram, Google Ads, Feiras locais")
            fc_deep_research = st.checkbox("Habilitar 'Deep Research' (A IA far√° uma an√°lise mais aprofundada, simulando pesquisa extensiva)", key="fc_deep")
            submitted_fc = st.form_submit_button("üîç Encontrar Meu Cliente!")

        if submitted_fc:
            if not fc_product_campaign:
                st.warning("Por favor, descreva o produto/servi√ßo ou campanha.")
            else:
                with st.spinner("üïµÔ∏è A IA est√° investigando seu p√∫blico-alvo... Isso pode levar alguns segundos."):
                    prompt_parts = [
                        "**Instru√ß√£o para IA:** Voc√™ √© um 'Agente Detetive de Clientes', especialista em marketing e pesquisa de mercado. Sua miss√£o √© ajudar uma pequena empresa a encontrar e entender seu p√∫blico-alvo exato.",
                        f"**Produto/Servi√ßo/Campanha em Foco:** {fc_product_campaign}",
                        f"**Localiza√ß√£o Principal:** {fc_location}",
                        f"**Verba de Marketing (Refer√™ncia):** {fc_budget}",
                        f"**Faixa Et√°ria e G√™nero (Informado):** {fc_age_gender}",
                        f"**Interesses/Dores/Necessidades (Informado):** {fc_interests}",
                        f"**Canais Atuais/Considerados:** {fc_current_channels}",
                        f"**N√≠vel de Pesquisa Solicitado:** {'Deep Research Ativado' if fc_deep_research else 'Pesquisa Padr√£o'}",
                        "**Tarefa:** Realize uma an√°lise completa e forne√ßa um relat√≥rio sobre o p√∫blico-alvo ideal. O relat√≥rio deve incluir:",
                        "1.  **Defini√ß√£o da Persona Principal (e secund√°ria, se aplic√°vel):** Nome fict√≠cio, idade, g√™nero, ocupa√ß√£o, renda aproximada (se infer√≠vel), principais desafios, objetivos, como o produto/servi√ßo do usu√°rio ajuda.",
                        "2.  **Segmenta√ß√£o Detalhada para An√∫ncios:** Sugest√µes de interesses, comportamentos, dados demogr√°ficos para plataformas como Facebook/Instagram Ads e Google Ads.",
                        "3.  **Melhores Canais para Alcance:** Com base na persona e oferta, quais s√£o os canais online e offline mais eficazes (incluindo redes sociais, blogs, f√≥runs, eventos, etc.).",
                        "4.  **Estrat√©gia de Conte√∫do para Atrair:** Que tipo de conte√∫do essa persona consome e valoriza?",
                        "5.  **Melhor CPC/CPA Estimado (se poss√≠vel inferir com base na verba e mercado).**",
                        "6.  **Sugest√£o de Impulsionamento:** Qual rede/canal priorizar para impulsionar e como configurar o p√∫blico, considerando a verba (se informada).",
                        "**Se 'Deep Research' estiver ativo:**",
                        "   a.  **Insights Adicionais:** Comportamentos de compra, influenciadores que seguem, obje√ß√µes comuns √† compra, linguagem que utilizam.",
                        "   b.  **Simula√ß√£o de Pesquisa Google:** Mencione 'Com base em tend√™ncias de busca no Google para [termos relevantes]...' ou 'Dados de mercado para [segmento] indicam que...'.",
                        "   c.  **Oportunidades N√£o √ìbvias:** Nichos ou subgrupos dentro do p√∫blico-alvo que podem ser explorados.",
                        "O objetivo √© fornecer as melhores configura√ß√µes de p√∫blico-alvo poss√≠veis dentro da verba do usu√°rio, viabilizando vendas e otimizando o investimento."
                    ]
                    if user_files_info:
                        prompt_parts.append(f"**Arquivos de Suporte Enviados (para contexto sobre o neg√≥cio do usu√°rio):** {', '.join([f['name'] for f in user_files_info])}.")

                    final_prompt = "\n\n".join(prompt_parts)
                    generated_content = call_gemini_api(final_prompt, user_files_info)
                    st.session_state.generated_client_analysis = generated_content

        if 'generated_client_analysis' in st.session_state:
            st.subheader("üïµÔ∏è‚Äç‚ôÇÔ∏è An√°lise de P√∫blico-Alvo e Recomenda√ß√µes:")
            st.markdown(st.session_state.generated_client_analysis)
            st.download_button(
                label="üì• Baixar An√°lise de P√∫blico",
                data=st.session_state.generated_client_analysis.encode('utf-8'),
                file_name="analise_publico_alvo_ia.txt",
                mime="text/plain",
                key="download_client_analysis"
            )

    elif main_action == "6 - Conhecer a concorr√™ncia (An√°lise Competitiva)":
        st.subheader("üßê Radar da Concorr√™ncia com IA")
        st.caption("Analise seus concorrentes para identificar pontos fortes, fracos e oportunidades para o seu neg√≥cio.")
        with st.form("competitor_analysis_form"):
            ca_your_business = st.text_area("Descreva brevemente seu pr√≥prio neg√≥cio/produto para que a IA possa fazer uma compara√ß√£o relevante:", key="ca_your_biz")
            ca_competitors_list = st.text_area("Liste seus principais concorrentes. Se poss√≠vel, inclua nomes, sites ou perfis de redes sociais:", key="ca_competitors", placeholder="Ex: Concorrente Alfa (sitealfa.com, @alfa_insta), Empresa Beta (lojabeta.com.br), Dr. Gama (instagama.com/drgama)")
            ca_aspects_to_analyze = st.multiselect(
                "Quais aspectos da concorr√™ncia voc√™ gostaria que a IA analisasse principalmente?",
                [
                    "Presen√ßa Online (qualidade do site, atividade nas redes sociais)",
                    "Tipos de Conte√∫do que publicam (temas, formatos)",
                    "Comunica√ß√£o e Tom de Voz",
                    "Pontos Fortes Percebidos",
                    "Pontos Fracos ou Brechas Percebidas",
                    "Estrat√©gia de Pre√ßos (se publicamente observ√°vel)",
                    "Engajamento do P√∫blico (coment√°rios, curtidas - se observ√°vel)",
                    "Diferenciais Competitivos deles"
                ],
                default=["Presen√ßa Online (qualidade do site, atividade nas redes sociais)", "Pontos Fortes Percebidos", "Pontos Fracos ou Brechas Percebidas"],
                key="ca_aspects"
            )
            submitted_ca = st.form_submit_button("üì° Analisar Concorrentes!")

        if submitted_ca:
            if not ca_your_business or not ca_competitors_list:
                st.warning("Por favor, descreva seu neg√≥cio e liste pelo menos um concorrente.")
            else:
                with st.spinner("üî¨ A IA est√° espionando eticamente a concorr√™ncia..."):
                    prompt_parts = [
                        "**Instru√ß√£o para IA:** Voc√™ √© um 'Agente de Intelig√™ncia Competitiva', especialista em analisar o mercado e os concorrentes de pequenas empresas.",
                        f"**Neg√≥cio do Usu√°rio (para Ponto de Refer√™ncia):** {ca_your_business}",
                        f"**Concorrentes a Serem Analisados (Informados pelo Usu√°rio):** {ca_competitors_list}",
                        f"**Principais Aspectos para An√°lise:** {', '.join(ca_aspects_to_analyze)}",
                        "**Tarefa:** Elabore um relat√≥rio breve e √∫til sobre os concorrentes listados, focando nos aspectos solicitados. O relat√≥rio deve:",
                        "1.  **Para cada Concorrente Principal (ou os 2-3 mais relevantes se a lista for longa):**",
                        "    a.  Um resumo da an√°lise dos aspectos selecionados (ex: 'Presen√ßa Online: Site moderno, mas pouco ativo no Instagram. Conte√∫do focado em X. Ponto forte: Pre√ßo agressivo. Ponto fraco: Atendimento ao cliente parece ser uma queixa comum online.').",
                        "2.  **Comparativo Geral:**",
                        "    a.  Quais s√£o os principais pontos fortes consolidados da concorr√™ncia no geral?",
                        "    b.  Quais s√£o as principais fraquezas ou brechas deixadas pela concorr√™ncia que o neg√≥cio do usu√°rio poderia explorar?",
                        "3.  **Recomenda√ß√µes Estrat√©gicas para o Usu√°rio:**",
                        "    a.  Como o usu√°rio pode se diferenciar com base na an√°lise?",
                        "    b.  Que a√ß√µes de marketing espec√≠ficas o usu√°rio pode tomar para se posicionar melhor em rela√ß√£o aos concorrentes?",
                        "Seja objetivo e forne√ßa insights acion√°veis. Simule pesquisa p√∫blica sobre os concorrentes (ex: 'Uma an√°lise do site do Concorrente Alfa mostra que...', 'Observando o Instagram da Empresa Beta, nota-se que...')."
                    ]
                    if user_files_info:
                        prompt_parts.append(f"**Arquivos de Suporte Enviados (para contexto sobre o neg√≥cio do usu√°rio):** {', '.join([f['name'] for f in user_files_info])}.")

                    final_prompt = "\n\n".join(prompt_parts)
                    generated_content = call_gemini_api(final_prompt, user_files_info)
                    st.session_state.generated_competitor_analysis = generated_content

        if 'generated_competitor_analysis' in st.session_state:
            st.subheader("üìä An√°lise da Concorr√™ncia e Insights:")
            st.markdown(st.session_state.generated_competitor_analysis)
            st.download_button(
                label="üì• Baixar An√°lise da Concorr√™ncia",
                data=st.session_state.generated_competitor_analysis.encode('utf-8'),
                file_name="analise_concorrencia_ia.txt",
                mime="text/plain",
                key="download_competitor_analysis"
            )

    elif main_action == "Selecione uma op√ß√£o...":
        st.info("üëã Bem-vindo √† se√ß√£o de Marketing Digital com IA! Escolha uma das op√ß√µes acima para come√ßar a impulsionar seu neg√≥cio.")
        # st.image("https://via.placeholder.com/1260x300.png/007bff/FFFFFF?Text=Marketing+Digital+com+IA", caption="Vamos criar juntos estrat√©gias incr√≠veis!")


    st.markdown("---")
    st.caption("Assistente PME Pro - Marketing Digital com IA")


if __name__ == "__main__":
    st.set_page_config(page_title="PME Pro - Marketing Digital", layout="wide", initial_sidebar_state="expanded")
    
    # Bloco de inicializa√ß√£o do Gemini (placeholder, requer sua chave e configura√ß√£o)
    # Mantenha comentado e configure conforme suas necessidades.
    # A inicializa√ß√£o real do 'genai' e 'model' deve ser feita aqui ou importada.
    # O c√≥digo abaixo √© uma sugest√£o de como lidar com isso.
    if 'gemini_model_initialized' not in st.session_state:
        st.session_state.gemini_model_initialized = False # Default
        # --- Exemplo de como voc√™ poderia inicializar ---
        # GOOGLE_API_KEY_FROM_CODE = "" # Coloque sua chave aqui se n√£o usar os.getenv
        # api_key = os.getenv("GOOGLE_API_KEY") or GOOGLE_API_KEY_FROM_CODE
        # if api_key:
        #     try:
        #         genai.configure(api_key=api_key)
        #         model = genai.GenerativeModel('gemini-1.5-pro-latest') # Ou o modelo desejado
        #         st.session_state.gemini_model = model
        #         st.session_state.gemini_model_initialized = True
        #         # st.sidebar.success("Modelo Gemini pronto!") # Descomente para feedback
        #     except Exception as e:
        #         st.sidebar.error(f"Erro ao inicializar Gemini: {e}")
        #         st.session_state.gemini_model_initialized = False
        # else:
        #     st.sidebar.warning("Chave API Gemini n√£o configurada.")
        #     st.session_state.gemini_model_initialized = False
        # Para este placeholder, vamos apenas simular que precisa ser configurado:
        if not st.session_state.gemini_model_initialized:
             st.sidebar.warning("Integra√ß√£o com IA (Gemini) n√£o est√° ativa neste placeholder. Configure sua API Key.")


    marketing_digital_section()

    st.sidebar.markdown("---")
    st.sidebar.info("Desenvolvido por Yaakov Israel com AI Google")
