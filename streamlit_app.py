import streamlit as st
import os
from langchain_google_genai import ChatGoogleGenerativeAI
from langchain.prompts import ChatPromptTemplate, SystemMessagePromptTemplate, HumanMessagePromptTemplate, MessagesPlaceholder
from langchain.chains import LLMChain
from langchain.memory import ConversationBufferMemory
from langchain.schema import HumanMessage, AIMessage
import google.generativeai as genai

# --- Configura√ß√£o da P√°gina Streamlit ---
st.set_page_config(page_title="Assistente PME Pro - Seu Plano de Neg√≥cios", layout="wide", initial_sidebar_state="expanded")

# --- Carregar API Key e Configurar Modelo ---
GOOGLE_API_KEY = None
llm = None

try:
    GOOGLE_API_KEY = st.secrets["GOOGLE_API_KEY"]
except KeyError:
    st.error("üö® ERRO: Chave API 'GOOGLE_API_KEY' n√£o encontrada nos Segredos (Secrets) do Streamlit.")
    st.info("Adicione sua GOOGLE_API_KEY aos Segredos do seu app no painel do Streamlit Community Cloud.")
    st.stop()
except FileNotFoundError:
    st.error("üö® ERRO: Arquivo de Segredos (secrets.toml) n√£o encontrado para desenvolvimento local.")
    st.info("Crie um arquivo .streamlit/secrets.toml ou configure nos Segredos do Streamlit Cloud.")
    st.stop()

if not GOOGLE_API_KEY or not GOOGLE_API_KEY.strip():
    st.error("üö® ERRO: GOOGLE_API_KEY n√£o foi carregada ou est√° vazia.")
    st.stop()
else:
    try:
        genai.configure(api_key=GOOGLE_API_KEY)
        llm = ChatGoogleGenerativeAI(model="gemini-1.5-flash",
                                     temperature=0.7,
                                     google_api_key=GOOGLE_API_KEY,
                                     convert_system_message_to_human=True)
        st.sidebar.success("‚úÖ Modelo LLM (Gemini) inicializado!")
    except Exception as e:
        st.error(f"üò• ERRO AO INICIALIZAR O MODELO LLM DO GOOGLE: {e}")
        st.info("Verifique sua chave API, se a 'Generative Language API' est√° ativa no Google Cloud e suas cotas.")
        st.stop()

# --- Classe do Agente (Simplificada para este passo) ---
class AgentePlanoDeNegocios:
    def __init__(self, llm_model):
        if llm_model is None:
            st.error("‚ùå Erro cr√≠tico: Agente sem modelo LLM.")
            st.stop()
        self.llm = llm_model
        self.system_message = """
        Voc√™ √© o "Assistente PME Pro", um consultor de neg√≥cios especialista em IA.
        Seu objetivo √© ajudar empreendedores a criar planos de neg√≥cios.
        Voc√™ far√° perguntas UMA DE CADA VEZ para coletar as informa√ß√µes necess√°rias.
        Quando o usu√°rio iniciar, sua primeira pergunta DEVE SER SEMPRE: "Perfeito! Qual √© o seu ramo de atua√ß√£o?"
        Se o usu√°rio responder √† pergunta sobre o ramo de atua√ß√£o, sua pr√≥xima pergunta pode ser sobre o nome da empresa ou a ideia principal.
        Mantenha a conversa focada na coleta de dados para o plano de neg√≥cios.
        """
        # Inicializa a mem√≥ria aqui, para que seja espec√≠fica desta inst√¢ncia do agente.
        self.memory = ConversationBufferMemory(memory_key="historico_chat_plano_negocios", return_messages=True)


    def conversar_sobre_plano(self, input_usuario):
        # Se o hist√≥rico estiver vazio e for a primeira intera√ß√£o real (ap√≥s o usu√°rio talvez clicar num bot√£o),
        # a IA deve fazer a pergunta inicial sobre o ramo de atua√ß√£o.
        # Mas o prompt do sistema j√° instrui isso, ent√£o a cadeia deve lidar bem.

        prompt_template = ChatPromptTemplate.from_messages([
            SystemMessagePromptTemplate.from_template(self.system_message),
            MessagesPlaceholder(variable_name="historico_chat_plano_negocios"), # Deve corresponder ao memory_key
            HumanMessagePromptTemplate.from_template("{input_usuario_plano}")
        ])
        
        # Importante: A mem√≥ria √© passada para a cadeia AQUI.
        cadeia_conversacional = LLMChain(llm=self.llm, prompt=prompt_template, memory=self.memory, verbose=True)
        
        resposta_ai = cadeia_conversacional.predict(input_usuario_plano=input_usuario)
        return resposta_ai

# --- Interface Principal Streamlit ---
if llm:
    # Inicializa o agente para o plano de neg√≥cios
    # A mem√≥ria agora est√° DENTRO da classe AgentePlanoDeNegocios
    # Para manter o estado da inst√¢ncia do agente entre reruns do Streamlit, usamos st.session_state
    if 'agente_plano_negocios' not in st.session_state:
        st.session_state.agente_plano_negocios = AgentePlanoDeNegocios(llm_model=llm)
    
    agente_pn = st.session_state.agente_plano_negocios

    st.sidebar.image("https://i.imgur.com/rGkzKxN.png", width=100) 
    st.sidebar.title("Assistente PME Pro")
    st.sidebar.markdown("Seu guia de IA para planejamento!") 
    st.sidebar.markdown("---")

    opcoes_menu = {
        "P√°gina Inicial": None,
        "Criar meu Plano de Neg√≥cios": "funcao_plano_negocios" 
    }

    if 'area_selecionada' not in st.session_state:
        st.session_state.area_selecionada = "P√°gina Inicial"
    
    # Hist√≥rico de chat para a funcionalidade do plano de neg√≥cios
    if "chat_plano_negocios_display" not in st.session_state:
         st.session_state.chat_plano_negocios_display = []


    area_selecionada_sidebar = st.sidebar.radio(
        "Como posso te ajudar hoje?",
        options=list(opcoes_menu.keys()),
        key='sidebar_selection_v6', 
        index=list(opcoes_menu.keys()).index(st.session_state.area_selecionada) if st.session_state.area_selecionada in opcoes_menu else 0
    )

    if area_selecionada_sidebar != st.session_state.area_selecionada:
        st.session_state.area_selecionada = area_selecionada_sidebar
        # Se mudar de √°rea, N√ÉO limpamos a mem√≥ria do agente nem o hist√≥rico de display aqui,
        # pois o usu√°rio pode querer voltar. A limpeza pode ser feita com um bot√£o de "reset" se necess√°rio.
        st.rerun()

    if st.session_state.area_selecionada == "P√°gina Inicial":
        st.title("üåü Bem-vindo ao Assistente PME Pro! üåü")
        st.markdown("Pronto para transformar suas ideias em um plano de neg√≥cios s√≥lido com a ajuda da Intelig√™ncia Artificial?")
        st.markdown("---")
        if st.button("üöÄ Sim, quero Criar meu Plano de Neg√≥cios!", key="btn_iniciar_plano_v2"):
            st.session_state.area_selecionada = "Criar meu Plano de Neg√≥cios"
            # Limpa/Prepara o chat para uma nova sess√£o de plano de neg√≥cios
            st.session_state.chat_plano_negocios_display = []
            st.session_state.agente_plano_negocios.memory.clear() # Limpa a mem√≥ria da cadeia Langchain
            st.rerun()
        st.balloons()

    elif st.session_state.area_selecionada == "Criar meu Plano de Neg√≥cios":
        st.header("üìù Assistente para Elabora√ß√£o do seu Plano de Neg√≥cios")
        st.markdown("Responda √†s minhas perguntas para construirmos seu plano passo a passo.")

        # Exibir hist√≥rico da conversa do display
        for msg_info in st.session_state.chat_plano_negocios_display:
            with st.chat_message(msg_info["role"]):
                st.markdown(msg_info["content"])
        
        prompt_usuario = st.chat_input("Sua resposta ou comando (ex: 'Crie meu plano de neg√≥cios'):")

        if prompt_usuario:
            # Adiciona mensagem do usu√°rio ao hist√≥rico de display
            st.session_state.chat_plano_negocios_display.append({"role": "user", "content": prompt_usuario})
            with st.chat_message("user"):
                st.markdown(prompt_usuario)

            with st.spinner("Assistente PME Pro est√° pensando... ü§î"):
                # A mem√≥ria da cadeia (dentro do agente_pn) j√° est√° sendo atualizada
                resposta_ai = agente_pn.conversar_sobre_plano(prompt_usuario)
            
            # Adiciona resposta da IA ao hist√≥rico de display
            st.session_state.chat_plano_negocios_display.append({"role": "assistant", "content": resposta_ai})
            with st.chat_message("assistant"):
                st.markdown(resposta_ai)
            # N√£o precisa de st.rerun() aqui, pois o Streamlit atualiza com os novos st.chat_message

        # Bot√£o para reiniciar a conversa do plano de neg√≥cios, se necess√°rio
        if st.button("Nova Sess√£o / Reiniciar Plano", key="btn_reset_plano_conversa"):
            st.session_state.chat_plano_negocios_display = []
            st.session_state.agente_plano_negocios.memory.clear()
            # Opcional: Adicionar uma mensagem inicial da IA ap√≥s o reset
            st.session_state.chat_plano_negocios_display.append({"role": "assistant", "content": "Ok, vamos come√ßar de novo! Qual √© o seu ramo de atua√ß√£o?"})
            st.session_state.agente_plano_negocios.memory.chat_memory.add_ai_message("Ok, vamos come√ßar de novo! Qual √© o seu ramo de atua√ß√£o?")
            st.rerun()
else:
    st.error("üö® O Assistente PME Pro n√£o p√¥de ser iniciado. Verifique a API Key e o modelo LLM.")

st.sidebar.markdown("---")
st.sidebar.info("Desenvolvido por Yaakov com seu Assistente PME Pro")
