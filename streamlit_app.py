import streamlit as st
import os
from langchain_google_genai import ChatGoogleGenerativeAI
from langchain.prompts import ChatPromptTemplate, SystemMessagePromptTemplate, HumanMessagePromptTemplate, MessagesPlaceholder
from langchain.chains import LLMChain
from langchain.memory import ConversationBufferMemory
from langchain.schema import HumanMessage, AIMessage
import google.generativeai as genai

# --- Configura√ß√£o da P√°gina Streamlit ---
st.set_page_config(page_title="Assistente PME Pro - Seu Plano de Neg√≥cios", layout="wide", initial_sidebar_state="expanded")

# --- Carregar API Key e Configurar Modelo ---
GOOGLE_API_KEY = None
llm = None

try:
    GOOGLE_API_KEY = st.secrets["GOOGLE_API_KEY"]
except KeyError:
    st.error("üö® ERRO: Chave API 'GOOGLE_API_KEY' n√£o encontrada nos Segredos (Secrets) do Streamlit.")
    st.info("Adicione sua GOOGLE_API_KEY aos Segredos do seu app no painel do Streamlit Community Cloud.")
    st.stop()
except FileNotFoundError: 
    GOOGLE_API_KEY = os.environ.get("GOOGLE_API_KEY")
    if not GOOGLE_API_KEY:
        st.error("üö® ERRO: Chave API n√£o encontrada nos Segredos do Streamlit nem como vari√°vel de ambiente.")
        st.info("Configure GOOGLE_API_KEY nos Segredos do Streamlit Cloud ou defina como vari√°vel de ambiente local.")
        st.stop()

if not GOOGLE_API_KEY or not GOOGLE_API_KEY.strip():
    st.error("üö® ERRO: GOOGLE_API_KEY n√£o foi carregada ou est√° vazia.")
    st.stop()
else:
    try:
        genai.configure(api_key=GOOGLE_API_KEY)
        llm = ChatGoogleGenerativeAI(model="gemini-1.5-flash",
                                     temperature=0.7,
                                     google_api_key=GOOGLE_API_KEY,
                                     convert_system_message_to_human=True)
        st.sidebar.success("‚úÖ Modelo LLM (Gemini) inicializado!")
    except Exception as e:
        st.error(f"üò• ERRO AO INICIALIZAR O MODELO LLM DO GOOGLE: {e}")
        st.info("Verifique sua chave API, se a 'Generative Language API' est√° ativa no Google Cloud e suas cotas.")
        st.stop()

# --- Classe do Agente ---
class AgentePlanoDeNegocios:
    def __init__(self, llm_model):
        if llm_model is None:
            st.error("‚ùå Erro cr√≠tico: Agente sem modelo LLM.")
            st.stop()
        self.llm = llm_model
        self.system_message = """
        Voc√™ √© o "Assistente PME Pro", um consultor de neg√≥cios especialista em IA.
        Sua tarefa √© ajudar um empreendedor a ESBO√áAR e DETALHAR um PLANO DE NEG√ìCIOS.
        Voc√™ faz perguntas UMA DE CADA VEZ para coletar informa√ß√µes.

        ETAPA 1: ESBO√áO INICIAL
        - Quando o usu√°rio iniciar (ex: "Crie meu plano de neg√≥cios"), sua PRIMEIRA pergunta DEVE SER: "Perfeito! Para come√ßarmos a esbo√ßar seu plano de neg√≥cios, qual √© o seu ramo de atua√ß√£o principal?"
        - Continue fazendo perguntas para cobrir as se√ß√µes b√°sicas: Nome da empresa, Miss√£o, Vis√£o, Objetivos, Produtos/Servi√ßos, P√∫blico-alvo, Diferencial, Marketing e Vendas (ideias iniciais), Opera√ß√µes (ideias iniciais), Finan√ßas (estimativas bem b√°sicas).
        - Ap√≥s coletar informa√ß√µes suficientes para um ESBO√áO (geralmente ap√≥s a pergunta sobre finan√ßas b√°sicas), PERGUNTE: "Com as informa√ß√µes que temos, gostaria que eu tentasse montar um primeiro ESBO√áO do seu plano de neg√≥cios com as se√ß√µes principais?"
        - Se o usu√°rio disser "sim", gere um ESBO√áO CLARO e CONCISO do plano de neg√≥cios com as informa√ß√µes coletadas, usando as se√ß√µes: 1. Sum√°rio Executivo, 2. Descri√ß√£o da Empresa, 3. Produtos/Servi√ßos, 4. Plano de Marketing e Vendas, 5. Plano Operacional, 6. Plano Financeiro (Estimativas Iniciais). Adicione uma nota de que √© um esbo√ßo e pode ser detalhado.
        - AP√ìS apresentar o esbo√ßo, pergunte: "Este esbo√ßo inicial te ajuda? Gostaria de detalhar mais alguma se√ß√£o ou criar um plano mais completo agora, onde poderemos incluir mais informa√ß√µes e an√°lises (como as de Kotler e Chiavenato)?"

        ETAPA 2: PLANO DETALHADO (se o usu√°rio aceitar)
        - Se o usu√°rio disser "sim" para detalhar, responda: "√ìtimo! Para detalharmos, vamos focar em cada se√ß√£o. Voc√™ poder√° me fornecer mais dados, e no futuro, at√© fazer upload de documentos. Em qual se√ß√£o do plano de neg√≥cios voc√™ gostaria de come√ßar a aprofundar ou fornecer mais detalhes? (Ex: An√°lise de Mercado, Estrat√©gias de Marketing Detalhadas, Proje√ß√µes Financeiras, etc.)"
        - A partir da√≠, guie o usu√°rio para fornecer informa√ß√µes mais espec√≠ficas para cada se√ß√£o, mencionando que os princ√≠pios de marketing (Kotler) e administra√ß√£o (Chiavenato) ser√£o aplicados.
        - Quando o usu√°rio fornecer detalhes para uma se√ß√£o, incorpore-os.

        Mantenha a conversa fluindo naturalmente. Seja pr√°tico e encorajador.
        """
        self.memory = ConversationBufferMemory(memory_key="historico_chat_plano_negocios", return_messages=True)

    def conversar_sobre_plano(self, input_usuario):
        prompt_template = ChatPromptTemplate.from_messages([
            SystemMessagePromptTemplate.from_template(self.system_message),
            MessagesPlaceholder(variable_name="historico_chat_plano_negocios"),
            HumanMessagePromptTemplate.from_template("{input_usuario_plano}")
        ])
        cadeia_conversacional = LLMChain(llm=self.llm, prompt=prompt_template, memory=self.memory, verbose=False) # verbose=True para debug
        resposta_ai = cadeia_conversacional.predict(input_usuario_plano=input_usuario)
        return resposta_ai

# --- Interface Principal Streamlit ---
if llm:
    if 'agente_plano_negocios' not in st.session_state:
        st.session_state.agente_plano_negocios = AgentePlanoDeNegocios(llm_model=llm)
    agente_pn = st.session_state.agente_plano_negocios

    st.sidebar.image("https://i.imgur.com/rGkzKxN.png", width=100) 
    st.sidebar.title("Assistente PME Pro")
    st.sidebar.markdown("Seu guia de IA para planejamento!") 
    st.sidebar.markdown("---")

    # Mantendo o menu simplificado por enquanto, mas podemos adicionar Marketing de volta se desejar
    opcoes_menu = {
        "P√°gina Inicial": "pagina_inicial",
        "Elaborar Plano de Neg√≥cios com IA": "plano_negocios" 
    }

    if 'area_selecionada' not in st.session_state:
        st.session_state.area_selecionada = "P√°gina Inicial"
    
    if "chat_display_plano_negocios" not in st.session_state:
         st.session_state.chat_display_plano_negocios = []

    area_selecionada_label = st.sidebar.radio(
        "Como posso te ajudar hoje?",
        options=list(opcoes_menu.keys()),
        key='sidebar_selection_v8', 
        index=list(opcoes_menu.keys()).index(st.session_state.area_selecionada) if st.session_state.area_selecionada in opcoes_menu else 0
    )

    if area_selecionada_label != st.session_state.area_selecionada:
        st.session_state.area_selecionada = area_selecionada_label
        # Resetar o chat do plano de neg√≥cios ao selecionar a √°rea pela primeira vez ou re-selecionar
        if st.session_state.area_selecionada == "Elaborar Plano de Neg√≥cios com IA":
            st.session_state.chat_display_plano_negocios = [{"role": "assistant", "content": "Ol√°! Sou seu Assistente PME Pro. Para come√ßarmos a esbo√ßar seu plano de neg√≥cios, qual √© o seu ramo de atua√ß√£o principal?"}]
            agente_pn.memory.clear()
            agente_pn.memory.chat_memory.add_ai_message("Ol√°! Sou seu Assistente PME Pro. Para come√ßarmos a esbo√ßar seu plano de neg√≥cios, qual √© o seu ramo de atua√ß√£o principal?")
        st.rerun()

    if st.session_state.area_selecionada == "P√°gina Inicial":
        st.title("üåü Bem-vindo ao Assistente PME Pro! üåü")
        st.markdown("Pronto para transformar suas ideias em um plano de neg√≥cios s√≥lido e impulsionar sua empresa com Intelig√™ncia Artificial?")
        st.markdown("---")
        if st.button("üöÄ Sim, quero Criar meu Plano de Neg√≥cios com IA!", key="btn_iniciar_plano_v3"):
            st.session_state.area_selecionada = "Elaborar Plano de Neg√≥cios com IA"
            st.session_state.chat_display_plano_negocios = [{"role": "assistant", "content": "Ol√°! Sou seu Assistente PME Pro. Para come√ßarmos a esbo√ßar seu plano de neg√≥cios, qual √© o seu ramo de atua√ß√£o principal?"}]
            agente_pn.memory.clear()
            agente_pn.memory.chat_memory.add_ai_message("Ol√°! Sou seu Assistente PME Pro. Para come√ßarmos a esbo√ßar seu plano de neg√≥cios, qual √© o seu ramo de atua√ß√£o principal?")
            st.rerun()
        st.balloons()

    elif st.session_state.area_selecionada == "Elaborar Plano de Neg√≥cios com IA":
        st.header("üìù Elaborando seu Plano de Neg√≥cios com IA")
        st.caption("Converse comigo para construirmos seu plano passo a passo.")

        # Se o chat est√° vazio e n√£o √© a primeira mensagem, adiciona a sauda√ß√£o inicial
        if not st.session_state.chat_display_plano_negocios:
             st.session_state.chat_display_plano_negocios = [{"role": "assistant", "content": "Ol√°! Sou seu Assistente PME Pro. Para come√ßarmos a esbo√ßar seu plano de neg√≥cios, qual √© o seu ramo de atua√ß√£o principal?"}]
             # Adiciona tamb√©m √† mem√≥ria da IA para ela saber que j√° se apresentou
             if not agente_pn.memory.chat_memory.messages: # S√≥ adiciona se a mem√≥ria estiver realmente vazia
                agente_pn.memory.chat_memory.add_ai_message("Ol√°! Sou seu Assistente PME Pro. Para come√ßarmos a esbo√ßar seu plano de neg√≥cios, qual √© o seu ramo de atua√ß√£o principal?")


        for msg_info in st.session_state.chat_display_plano_negocios:
            with st.chat_message(msg_info["role"]):
                st.markdown(msg_info["content"])
        
        prompt_usuario_plano = st.chat_input("Sua resposta ou diga 'Crie meu plano de neg√≥cios'")

        if prompt_usuario_plano:
            st.session_state.chat_display_plano_negocios.append({"role": "user", "content": prompt_usuario_plano})
            with st.chat_message("user"):
                st.markdown(prompt_usuario_plano)

            with st.spinner("Assistente PME Pro est√° processando... ü§î"):
                resposta_ai_plano = agente_pn.conversar_sobre_plano(prompt_usuario_plano) # Mem√≥ria j√° est√° no agente

            st.session_state.chat_display_plano_negocios.append({"role": "assistant", "content": resposta_ai_plano})
            with st.chat_message("assistant"):
                st.markdown(resposta_ai_plano)
        
        if st.sidebar.button("Nova Sess√£o / Reiniciar Plano", key="btn_reset_plano_v3"):
            st.session_state.chat_display_plano_negocios = [{"role": "assistant", "content": "Ok, vamos recome√ßar seu plano de neg√≥cios! Qual √© o seu ramo de atua√ß√£o principal?"}]
            agente_pn.memory.clear()
            agente_pn.memory.chat_memory.add_ai_message("Ok, vamos recome√ßar seu plano de neg√≥cios! Qual √© o seu ramo de atua√ß√£o principal?")
            st.rerun()
else:
    st.error("üö® O Assistente PME Pro n√£o p√¥de ser iniciado. Verifique a API Key e o modelo LLM.")

st.sidebar.markdown("---")
st.sidebar.info("Desenvolvido por Yaakov com seu Assistente PME Pro")
