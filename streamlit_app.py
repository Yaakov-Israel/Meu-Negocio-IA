import streamlit as st
import os
from langchain_google_genai import ChatGoogleGenerativeAI
from langchain.prompts import ChatPromptTemplate, SystemMessagePromptTemplate, HumanMessagePromptTemplate, MessagesPlaceholder
from langchain.chains import LLMChain
from langchain.memory import ConversationBufferMemory
from langchain.schema import HumanMessage, AIMessage
import google.generativeai as genai

# --- Configura√ß√£o da P√°gina Streamlit ---
st.set_page_config(page_title="Assistente PME Pro", layout="wide", initial_sidebar_state="expanded")

# --- Carregar API Key e Configurar Modelo ---
GOOGLE_API_KEY = None
llm = None

try:
    GOOGLE_API_KEY = st.secrets["GOOGLE_API_KEY"]
except KeyError:
    st.error("üö® ERRO: Chave API 'GOOGLE_API_KEY' n√£o encontrada nos Segredos (Secrets) do Streamlit.")
    st.info("Adicione sua GOOGLE_API_KEY aos Segredos do seu app no painel do Streamlit Community Cloud.")
    st.stop()
except FileNotFoundError: # Para desenvolvimento local
    # Tenta carregar de uma vari√°vel de ambiente se st.secrets falhar (√∫til para dev local sem secrets.toml)
    GOOGLE_API_KEY = os.environ.get("GOOGLE_API_KEY")
    if not GOOGLE_API_KEY:
        st.error("üö® ERRO: Chave API n√£o encontrada nos Segredos do Streamlit nem como vari√°vel de ambiente.")
        st.info("Configure GOOGLE_API_KEY nos Segredos do Streamlit Cloud ou defina como vari√°vel de ambiente local.")
        st.stop()

if not GOOGLE_API_KEY or not GOOGLE_API_KEY.strip():
    st.error("üö® ERRO: GOOGLE_API_KEY n√£o foi carregada ou est√° vazia.")
    st.stop()
else:
    try:
        genai.configure(api_key=GOOGLE_API_KEY)
        llm = ChatGoogleGenerativeAI(model="gemini-1.5-flash",
                                     temperature=0.7,
                                     google_api_key=GOOGLE_API_KEY,
                                     convert_system_message_to_human=True)
        st.sidebar.success("‚úÖ Modelo LLM (Gemini) inicializado!")
    except Exception as e:
        st.error(f"üò• ERRO AO INICIALIZAR O MODELO LLM DO GOOGLE: {e}")
        st.info("Verifique sua chave API, se a 'Generative Language API' est√° ativa no Google Cloud e suas cotas.")
        st.stop()

# --- Defini√ß√£o do Super Agente (agora com m√∫ltiplas personas/fun√ß√µes) ---
class AssistentePMEPro:
    def __init__(self, llm_model):
        if llm_model is None:
            st.error("‚ùå Erro cr√≠tico: Agente sem modelo LLM.")
            st.stop()
        self.llm = llm_model

    def _criar_cadeia_conversacional(self, system_message, memoria_conversa):
        prompt_template = ChatPromptTemplate.from_messages([
            SystemMessagePromptTemplate.from_template(system_message),
            MessagesPlaceholder(variable_name="historico_chat"), # Nome gen√©rico para a mem√≥ria
            HumanMessagePromptTemplate.from_template("{input_usuario}")
        ])
        return LLMChain(llm=self.llm, prompt=prompt_template, memory=memoria_conversa, verbose=False)

    def marketing_digital_guiado(self):
        st.header("üöÄ Marketing Digital Inteligente para sua Empresa")
        st.markdown("Bem-vindo! Vamos criar juntos uma estrat√©gia de marketing digital eficaz usando o poder da IA.")

        if 'start_marketing_form' not in st.session_state:
            st.session_state.start_marketing_form = False

        if not st.session_state.start_marketing_form:
            if st.button("Sim, quero criar minha estrat√©gia de Marketing Digital!", key="btn_start_marketing_form"):
                st.session_state.start_marketing_form = True
                st.rerun()
            return

        with st.form(key='marketing_form_guiado_v4'):
            st.markdown("##### üìã Conte-nos sobre seu Neg√≥cio e Objetivos")
            publico_alvo = st.text_input("1. Quem voc√™ quer alcan√ßar?", key="mdg_publico_v4")
            produto_servico = st.text_input("2. Qual produto ou servi√ßo principal voc√™ oferece?", key="mdg_produto_v4")
            objetivo_campanha = st.selectbox("3. Qual o principal objetivo com esta a√ß√£o de marketing?",
                                             ["", "Aumentar vendas online", "Gerar mais contatos (leads)",
                                              "Fortalecer o reconhecimento da marca", "Aumentar o engajamento"],
                                             key="mdg_objetivo_v4")
            st.markdown("---")
            mensagem_principal = st.text_area("4. Qual mensagem chave voc√™ quer comunicar?", key="mdg_mensagem_v4")
            diferencial = st.text_input("5. O que torna seu produto/servi√ßo especial?", key="mdg_diferencial_v4")
            st.markdown("---")
            descricao_imagem = st.text_input("6. Ideia para imagem (opcional):", key="mdg_img_v4")
            descricao_video = st.text_input("7. Ideia para v√≠deo (opcional):", key="mdg_video_v4")
            orcamento_ideia = st.text_input("8. Ideia de or√ßamento para esta a√ß√£o (opcional):", key="mdg_orcamento_v4")
            redes_opcoes = { "N√£o tenho certeza, preciso de sugest√£o": "Sugest√£o da IA", "Instagram": "Instagram", "Facebook": "Facebook", "TikTok": "TikTok", "LinkedIn": "LinkedIn", "WhatsApp Business": "WhatsApp", "E-mail Marketing": "E-mail Marketing", "Google Ads": "Google", "Integrada": "Integrada"}
            rede_social_alvo_label = st.selectbox("9. Canal digital principal ou pedir sugest√£o?", options=list(redes_opcoes.keys()), key="mdg_canal_v4")
            rede_social_alvo = redes_opcoes[rede_social_alvo_label]
            submit_button = st.form_submit_button(label='Gerar Meu Guia de Marketing com IA üöÄ')

        if submit_button:
            if not all([publico_alvo, produto_servico, objetivo_campanha, mensagem_principal, diferencial]):
                st.warning("Por favor, preencha os campos sobre P√∫blico, Produto/Servi√ßo, Objetivo, Mensagem e Diferencial.")
            else:
                system_message_marketing = """
                Voc√™ √© o "Assistente PME Pro", um consultor especialista em Marketing Digital com IA para pequenas empresas.
                Seu objetivo √© guiar o usu√°rio a criar uma estrat√©gia de marketing digital eficaz,
                baseado nos melhores princ√≠pios de marketing e nas capacidades da IA.
                """
                prompt_llm_marketing = f"""
                Sou o dono de uma pequena empresa e pedi um guia pr√°tico para Marketing Digital com IA.
                Minhas informa√ß√µes:
                - P√∫blico-Alvo: {publico_alvo}
                - Produto/Servi√ßo: {produto_servico}
                - Diferencial: {diferencial}
                - Objetivo: {objetivo_campanha}
                - Mensagem Chave: {mensagem_principal}
                - Imagem: {descricao_imagem or "N/A"}
                - V√≠deo: {descricao_video or "N/A"}
                - Or√ßamento: {orcamento_ideia or "N/A"}
                - Canal: {rede_social_alvo}

                Forne√ßa um GUIA ESTRAT√âGICO E PR√ÅTICO, incluindo:
                1. Diagn√≥stico R√°pido e Oportunidade com IA.
                2. Canal(is) Priorit√°rio(s) (com justificativa se pedi sugest√£o, ou como otimizar o escolhido com IA).
                3. Estrat√©gias de Conte√∫do Inteligente: Tipos de conte√∫do, como IA pode ajudar (ideias, rascunhos), 2 exemplos de T√çTULOS/POSTS para meu neg√≥cio.
                4. Ferramenta de IA Recomendada (Gratuita/Baixo Custo): UMA ferramenta e como ajudaria.
                5. Primeiros 3 Passos Acion√°veis para usar IA no marketing.
                6. M√©trica Chave de Sucesso Inicial.
                Tom: Mentor experiente, pr√°tico, encorajador. Linguagem clara. Foco em plano inicial acion√°vel.
                """
                with st.spinner("O Assistente PME Pro est√° elaborando seu guia de marketing... üí°"):
                    # Usando uma cadeia simples para esta funcionalidade baseada em formul√°rio
                    resposta_llm = self.llm.invoke(system_message_marketing + "\n\n" + prompt_llm_marketing).content
                st.markdown("### üí° Seu Guia Personalizado de Marketing Digital com IA:")
                st.markdown(resposta_llm)

    def conversar_plano_de_negocios(self, input_usuario, memoria_conversa):
        system_message_plano = """
        Voc√™ √© o "Assistente PME Pro", um consultor de neg√≥cios especialista em IA.
        Sua tarefa √© ajudar um empreendedor a ESBO√áAR um PLANO DE NEG√ìCIOS.
        Inicie a conversa perguntando sobre o ramo de atua√ß√£o, se ainda n√£o souber.
        Fa√ßa perguntas UMA DE CADA VEZ para coletar informa√ß√µes essenciais para as se√ß√µes de um plano de neg√≥cios simples:
        1. Sum√°rio Executivo (Nome da empresa, miss√£o, vis√£o, objetivos principais - colete isso aos poucos).
        2. Descri√ß√£o da Empresa (O que faz, mercado-alvo, diferencial).
        3. Produtos/Servi√ßos.
        4. Plano de Marketing e Vendas (Como vai alcan√ßar clientes).
        5. Plano Operacional (Como vai funcionar no dia a dia).
        6. Plano Financeiro (Estimativas iniciais, como vai ganhar dinheiro - de forma simples).
        Quando o usu√°rio disser "sim" para criar o plano ou der um comando inicial, sua PRIMEIRA pergunta DEVE SER: "Perfeito! Para come√ßarmos a esbo√ßar seu plano de neg√≥cios, qual √© o seu ramo de atua√ß√£o principal?"
        Se ele responder, continue com perguntas para as outras se√ß√µes.
        Ap√≥s coletar algumas informa√ß√µes chave (ex: ramo, nome, produto, p√∫blico), voc√™ pode perguntar: "Com as informa√ß√µes que temos, gostaria que eu tentasse montar um primeiro esbo√ßo do seu plano de neg√≥cios com as se√ß√µes principais?"
        Se ele disser sim, gere um esbo√ßo com as se√ß√µes que puder preencher.
        Mantenha a conversa fluindo naturalmente.
        """
        # A mem√≥ria √© gerenciada externamente e passada para a cadeia
        cadeia = self._criar_cadeia_conversacional(system_message_plano, memoria_conversa)
        resposta_ai = cadeia.predict(input_usuario=input_usuario)
        return resposta_ai

# --- Interface Principal Streamlit ---
if llm:
    if 'agente_pme' not in st.session_state:
        st.session_state.agente_pme = AssistentePMEPro(llm_model=llm)
    agente = st.session_state.agente_pme

    st.sidebar.image("https://i.imgur.com/rGkzKxN.png", width=100)
    st.sidebar.title("Assistente PME Pro")
    st.sidebar.markdown("IA para seu Neg√≥cio Decolar!")
    st.sidebar.markdown("---")

    opcoes_menu = {
        "P√°gina Inicial": "pagina_inicial",
        "Marketing Digital com IA (Guia)": "marketing_guiado",
        "Elaborar Plano de Neg√≥cios": "plano_negocios"
    }

    if 'area_selecionada' not in st.session_state:
        st.session_state.area_selecionada = "P√°gina Inicial"

    # Inicializar mem√≥rias e hist√≥ricos de chat no session_state
    if "memoria_plano_negocios" not in st.session_state:
        st.session_state.memoria_plano_negocios = ConversationBufferMemory(memory_key="historico_chat", return_messages=True)
    if "chat_display_plano_negocios" not in st.session_state:
        st.session_state.chat_display_plano_negocios = []


    area_selecionada_label = st.sidebar.radio(
        "Como posso te ajudar hoje?",
        options=list(opcoes_menu.keys()),
        key='sidebar_selection_v7',
        index=list(opcoes_menu.keys()).index(st.session_state.area_selecionada) if st.session_state.area_selecionada in opcoes_menu else 0
    )

    if area_selecionada_label != st.session_state.area_selecionada:
        st.session_state.area_selecionada = area_selecionada_label
        # N√£o resetar o formul√°rio de marketing ou o chat do plano de neg√≥cios ao trocar de aba
        # O estado do formul√°rio √© gerenciado por st.form e o chat do plano por sua pr√≥pria mem√≥ria/display list
        st.rerun()


    if st.session_state.area_selecionada == "P√°gina Inicial":
        st.title("üåü Bem-vindo ao Assistente PME Pro! üåü")
        st.markdown("Sou seu parceiro de IA pronto para ajudar sua pequena ou m√©dia empresa a crescer e se organizar melhor.")
        col1, col2 = st.columns(2)
        with col1:
            if st.button("üöÄ Quero um Guia de Marketing Digital com IA!", key="btn_goto_marketing"):
                st.session_state.area_selecionada = "Marketing Digital com IA (Guia)"
                st.session_state.start_marketing_form = False # Garante que o bot√£o de in√≠cio do form apare√ßa
                st.rerun()
        with col2:
            if st.button("üìù Quero Esbo√ßar meu Plano de Neg√≥cios com IA!", key="btn_goto_plano"):
                st.session_state.area_selecionada = "Elaborar Plano de Neg√≥cios"
                # Se o chat do plano de neg√≥cios estiver vazio, adiciona a primeira mensagem da IA
                if not st.session_state.chat_display_plano_negocios:
                     st.session_state.chat_display_plano_negocios = [{"role": "assistant", "content": "Ol√°! Para come√ßarmos a esbo√ßar seu plano de neg√≥cios, qual √© o seu ramo de atua√ß√£o principal?"}]
                     st.session_state.memoria_plano_negocios.chat_memory.add_ai_message("Ol√°! Para come√ßarmos a esbo√ßar seu plano de neg√≥cios, qual √© o seu ramo de atua√ß√£o principal?")
                st.rerun()
        st.balloons()

    elif st.session_state.area_selecionada == "Marketing Digital com IA (Guia)":
        agente.marketing_digital_guiado()

    elif st.session_state.area_selecionada == "Elaborar Plano de Neg√≥cios":
        st.header("üìù Elaborando seu Plano de Neg√≥cios com IA")
        st.caption("Converse comigo para construirmos seu plano passo a passo.")

        # Exibir hist√≥rico da conversa do plano de neg√≥cios
        for msg_info in st.session_state.chat_display_plano_negocios:
            with st.chat_message(msg_info["role"]):
                st.markdown(msg_info["content"])

        prompt_usuario_plano = st.chat_input("Sua resposta ou diga 'Crie meu plano de neg√≥cios'")

        if prompt_usuario_plano:
            st.session_state.chat_display_plano_negocios.append({"role": "user", "content": prompt_usuario_plano})
            with st.chat_message("user"):
                st.markdown(prompt_usuario_plano)

            with st.spinner("Assistente PME Pro est√° processando... ü§î"):
                # A mem√≥ria √© passada para a fun√ß√£o e atualizada pela LLMChain
                resposta_ai_plano = agente.conversar_plano_de_negocios(prompt_usuario_plano, st.session_state.memoria_plano_negocios)

            st.session_state.chat_display_plano_negocios.append({"role": "assistant", "content": resposta_ai_plano})
            with st.chat_message("assistant"):
                st.markdown(resposta_ai_plano)
        
        if st.sidebar.button("Reiniciar Plano de Neg√≥cios", key="btn_reset_plano_v2"):
            st.session_state.chat_display_plano_negocios = [{"role": "assistant", "content": "Ok, vamos recome√ßar seu plano de neg√≥cios! Qual √© o seu ramo de atua√ß√£o principal?"}]
            st.session_state.memoria_plano_negocios.clear()
            st.session_state.memoria_plano_negocios.chat_memory.add_ai_message("Ok, vamos recome√ßar seu plano de neg√≥cios! Qual √© o seu ramo de atua√ß√£o principal?")
            st.rerun()

else:
    st.error("üö® O Assistente PME Pro n√£o p√¥de ser iniciado. Verifique a API Key e o modelo LLM.")

st.sidebar.markdown("---")
st.sidebar.info("Desenvolvido por Yaakov com seu Assistente PME Pro")
