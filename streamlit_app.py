import streamlit as st
import os
from langchain_google_genai import ChatGoogleGenerativeAI
from langchain.prompts import ChatPromptTemplate, SystemMessagePromptTemplate, HumanMessagePromptTemplate, MessagesPlaceholder
from langchain.chains import LLMChain
from langchain.memory import ConversationBufferMemory
from langchain.schema import HumanMessage, AIMessage
import google.generativeai as genai
from PIL import Image # Adicionado para processar upload de imagem

# --- Configura√ß√£o da P√°gina Streamlit ---
st.set_page_config(page_title="Assistente PME Pro", layout="wide", initial_sidebar_state="expanded")

# --- Carregar API Key e Configurar Modelo ---
GOOGLE_API_KEY = None
llm = None

try:
    GOOGLE_API_KEY = st.secrets["GOOGLE_API_KEY"]
except KeyError:
    st.error("üö® ERRO: Chave API 'GOOGLE_API_KEY' n√£o encontrada nos Segredos (Secrets) do Streamlit.")
    st.info("Adicione sua GOOGLE_API_KEY aos Segredos do seu app no painel do Streamlit Community Cloud.")
    st.stop()
except FileNotFoundError:
    GOOGLE_API_KEY = os.environ.get("GOOGLE_API_KEY")
    if not GOOGLE_API_KEY:
        st.error("üö® ERRO: Chave API n√£o encontrada nos Segredos do Streamlit nem como vari√°vel de ambiente.")
        st.info("Configure GOOGLE_API_KEY nos Segredos do Streamlit Cloud ou defina como vari√°vel de ambiente local.")
        st.stop()

if not GOOGLE_API_KEY or not GOOGLE_API_KEY.strip():
    st.error("üö® ERRO: GOOGLE_API_KEY n√£o foi carregada ou est√° vazia.")
    st.stop()
else:
    try:
        genai.configure(api_key=GOOGLE_API_KEY)
        # Usaremos gemini-1.5-flash, mas para an√°lise de imagem com LangChain, a integra√ß√£o pode ser mais direta com a SDK
        # Por enquanto, a inicializa√ß√£o do llm para LangChain permanece a mesma.
        # A an√°lise de imagem, se feita, pode usar a SDK do google.generativeai diretamente com um modelo vision.
        llm_langchain = ChatGoogleGenerativeAI(model="gemini-1.5-flash", # Para LangChain
                                     temperature=0.7,
                                     google_api_key=GOOGLE_API_KEY,
                                     convert_system_message_to_human=True)
        
        # Modelo espec√≠fico para poss√≠vel an√°lise de imagem no futuro (se usarmos a SDK direta)
        # model_vision = genai.GenerativeModel('gemini-1.5-flash') # Ou gemini-pro-vision

        st.sidebar.success("‚úÖ Modelo LLM (Gemini) para texto inicializado!")
    except Exception as e:
        st.error(f"üò• ERRO AO INICIALIZAR O MODELO LLM DO GOOGLE: {e}")
        st.info("Verifique sua chave API, se a 'Generative Language API' est√° ativa no Google Cloud e suas cotas.")
        st.stop()

# --- Classe do Agente (AssistentePMEPro) ---
class AssistentePMEPro:
    def __init__(self, llm_model_langchain): # Agora recebe o modelo LangChain
        if llm_model_langchain is None:
            st.error("‚ùå Erro cr√≠tico: Agente sem modelo LLM para LangChain.")
            st.stop()
        self.llm_langchain = llm_model_langchain # Modelo para cadeias LangChain
        # self.model_vision = model_vision # Modelo para vis√£o, se inicializado
        
        if 'memoria_plano_negocios_agente' not in st.session_state:
            st.session_state.memoria_plano_negocios_agente = ConversationBufferMemory(memory_key="historico_chat_plano", return_messages=True)
        self.memoria_plano_negocios = st.session_state.memoria_plano_negocios_agente

        if 'memoria_controle_financeiro_agente' not in st.session_state:
            st.session_state.memoria_controle_financeiro_agente = ConversationBufferMemory(memory_key="historico_chat_financeiro", return_messages=True)
        self.memoria_controle_financeiro = st.session_state.memoria_controle_financeiro_agente
        
        if 'memoria_calculo_precos_agente' not in st.session_state: # Nova mem√≥ria
            st.session_state.memoria_calculo_precos_agente = ConversationBufferMemory(memory_key="historico_chat_precos", return_messages=True)
        self.memoria_calculo_precos = st.session_state.memoria_calculo_precos_agente

    def _criar_cadeia_simples(self, system_message_content, human_message_content_template="{solicitacao_usuario}"):
        prompt_template = ChatPromptTemplate.from_messages([
            SystemMessagePromptTemplate.from_template(system_message_content),
            HumanMessagePromptTemplate.from_template(human_message_content_template)
        ])
        return LLMChain(llm=self.llm_langchain, prompt=prompt_template, verbose=False)

    def _criar_cadeia_conversacional(self, system_message_content, memoria, memory_key="historico_chat"):
        prompt_template = ChatPromptTemplate.from_messages([
            SystemMessagePromptTemplate.from_template(system_message_content),
            MessagesPlaceholder(variable_name=memory_key),
            HumanMessagePromptTemplate.from_template("{input_usuario}")
        ])
        return LLMChain(llm=self.llm_langchain, prompt=prompt_template, memory=memoria, verbose=False)

    def marketing_digital_guiado(self):
        # ... (c√≥digo da fun√ß√£o marketing_digital_guiado como na vers√£o anterior - omitido por brevidade)
        st.header("üöÄ Marketing Digital Inteligente para sua Empresa")
        st.markdown("Bem-vindo! Preencha os campos abaixo para criarmos juntos uma estrat√©gia de marketing digital eficaz usando IA.")
        with st.form(key='marketing_form_guiado_v6'):
            st.markdown("##### üìã Conte-nos sobre seu Neg√≥cio e Objetivos")
            publico_alvo = st.text_input("1. Quem voc√™ quer alcan√ßar?", key="mdg_publico_v6")
            produto_servico = st.text_input("2. Qual produto ou servi√ßo principal voc√™ oferece?", key="mdg_produto_v6")
            objetivo_campanha = st.selectbox("3. Qual o principal objetivo com esta a√ß√£o de marketing?", ["", "Aumentar vendas online", "Gerar mais contatos (leads)", "Fortalecer o reconhecimento da marca", "Aumentar o engajamento"], key="mdg_objetivo_v6")
            st.markdown("---")
            mensagem_principal = st.text_area("4. Qual mensagem chave voc√™ quer comunicar?", key="mdg_mensagem_v6")
            diferencial = st.text_input("5. O que torna seu produto/servi√ßo especial?", key="mdg_diferencial_v6")
            st.markdown("---")
            descricao_imagem = st.text_input("6. Ideia para imagem (opcional):", key="mdg_img_v6")
            descricao_video = st.text_input("7. Ideia para v√≠deo (opcional):", key="mdg_video_v6")
            orcamento_ideia = st.text_input("8. Ideia de or√ßamento para esta a√ß√£o (opcional):", key="mdg_orcamento_v6")
            redes_opcoes = { "N√£o tenho certeza, preciso de sugest√£o": "Sugest√£o da IA", "Instagram": "Instagram", "Facebook": "Facebook", "TikTok": "TikTok", "LinkedIn": "LinkedIn", "WhatsApp Business": "WhatsApp", "E-mail Marketing": "E-mail Marketing", "Google Ads/Meu Neg√≥cio": "Google", "Integrada": "Integrada"}
            rede_social_alvo_label = st.selectbox("9. Canal digital principal ou pedir sugest√£o?", options=list(redes_opcoes.keys()), key="mdg_canal_v6")
            rede_social_alvo = redes_opcoes[rede_social_alvo_label]
            submit_button = st.form_submit_button(label='Gerar Meu Guia de Marketing com IA üöÄ')

        if submit_button:
            if not all([publico_alvo, produto_servico, objetivo_campanha, mensagem_principal, diferencial]):
                st.warning("Por favor, preencha os campos sobre P√∫blico, Produto/Servi√ßo, Objetivo, Mensagem e Diferencial.")
            else:
                system_message_marketing = "Voc√™ √© o \"Assistente PME Pro\", um consultor especialista em Marketing Digital com IA para pequenas empresas. Seu objetivo √© guiar o usu√°rio a criar uma estrat√©gia de marketing digital eficaz, baseado nos melhores princ√≠pios de marketing (como os de Kotler) e nas capacidades da IA."
                prompt_llm_marketing = f"Um dono de pequena empresa preencheu o seguinte formul√°rio para obter um guia pr√°tico para Marketing Digital com IA:\n- P√∫blico-Alvo: {publico_alvo}\n- Produto/Servi√ßo Principal: {produto_servico}\n- Principal Diferencial: {diferencial}\n- Objetivo Principal com Marketing Digital: {objetivo_campanha}\n- Mensagem Chave: {mensagem_principal}\n- Ideia para Imagem (se houver): {descricao_imagem or 'N√£o especificado'}\n- Ideia para V√≠deo (se houver): {descricao_video or 'N√£o especificado'}\n- Or√ßamento Estimado (se houver): {orcamento_ideia or 'N√£o especificado'}\n- Canal Digital em Mente ou Pedido de Sugest√£o: {rede_social_alvo}\n\nCom base nisso, forne√ßa um GUIA ESTRAT√âGICO E PR√ÅTICO, incluindo:\n1. Diagn√≥stico R√°pido e Oportunidade com IA.\n2. Canal(is) Priorit√°rio(s) (com justificativa se pedi sugest√£o, ou como otimizar o escolhido com IA).\n3. Estrat√©gias de Conte√∫do Inteligente: Tipos de conte√∫do, como IA pode ajudar (ideias, rascunhos), 2 exemplos de T√çTULOS/POSTS para meu neg√≥cio.\n4. Ferramenta de IA Recomendada (Gratuita/Baixo Custo): UMA ferramenta e como ajudaria.\n5. Primeiros 3 Passos Acion√°veis para usar IA no marketing.\n6. M√©trica Chave de Sucesso Inicial.\nTom: Mentor experiente, pr√°tico, encorajador. Linguagem clara. Foco em plano inicial acion√°vel."
                with st.spinner("O Assistente PME Pro est√° elaborando seu guia de marketing... üí°"):
                    cadeia_mkt = self._criar_cadeia_simples(system_message_marketing)
                    resposta_llm = cadeia_mkt.run(solicitacao_usuario=prompt_llm_marketing)
                st.markdown("### üí° Seu Guia Personalizado de Marketing Digital com IA:")
                st.markdown(resposta_llm)


    def conversar_plano_de_negocios(self, input_usuario):
        # ... (c√≥digo da fun√ß√£o conversar_plano_de_negocios como na vers√£o anterior - omitido por brevidade)
        system_message_plano = "Voc√™ √© o \"Assistente PME Pro\", um consultor de neg√≥cios especialista em IA. Sua tarefa √© ajudar um empreendedor a ESBO√áAR e depois DETALHAR um PLANO DE NEG√ìCIOS. Voc√™ faz perguntas UMA DE CADA VEZ para coletar informa√ß√µes. Use linguagem clara e seja encorajador.\n\n**FLUXO DA CONVERSA:**\n\n**IN√çCIO DA CONVERSA / PEDIDO INICIAL:**\nSe o usu√°rio indicar que quer criar um plano de neg√≥cios (ex: \"Crie meu plano de neg√≥cios\", \"Quero ajuda com meu plano\", \"sim\" para um bot√£o de iniciar plano), SUA PRIMEIRA PERGUNTA DEVE SER: \"Perfeito! Para come√ßarmos a esbo√ßar seu plano de neg√≥cios, qual √© o seu ramo de atua√ß√£o principal?\"\n\n**COLETA PARA O ESBO√áO:**\nAp√≥s saber o ramo, continue fazendo UMA PERGUNTA POR VEZ para obter informa√ß√µes para as seguintes se√ß√µes (n√£o precisa ser exatamente nesta ordem, mas cubra-as):\n1.  Nome da Empresa\n2.  Miss√£o da Empresa (o prop√≥sito central, o que ela busca fazer)\n3.  Vis√£o da Empresa (onde ela quer estar no futuro, ex: em 3-5 anos)\n4.  Principais Objetivos (metas claras, ex: atingir X de faturamento, abrir Y filiais)\n5.  Produtos/Servi√ßos Principais (o que ela vende/oferece)\n6.  P√∫blico-Alvo Principal (para quem ela vende)\n7.  Principal Diferencial (o que a torna especial/melhor que a concorr√™ncia)\n8.  Ideias Iniciais de Marketing e Vendas (como ela pretende alcan√ßar os clientes)\n9.  Ideias Iniciais de Opera√ß√µes (como o neg√≥cio vai funcionar no dia a dia)\n10. Estimativas Financeiras Muito B√°sicas (ideia de investimento inicial, principais custos fixos e vari√°veis, como espera gerar receita - n√£o precisa de n√∫meros exatos agora, apenas conceitos).\n\n**GERA√á√ÉO DO ESBO√áO:**\nQuando voc√™ sentir que coletou informa√ß√µes suficientes para estas 10 √°reas (geralmente ap√≥s a pergunta sobre finan√ßas b√°sicas), VOC√ä DEVE PERGUNTAR:\n\"Com as informa√ß√µes que reunimos at√© agora, voc√™ gostaria que eu montasse um primeiro ESBO√áO do seu plano de neg√≥cios? Ele ter√° as se√ß√µes principais que discutimos.\"\n\nSe o usu√°rio disser \"sim\" (ou algo similar):\n    - Gere um ESBO√áO do plano de neg√≥cios. Organize-o com os seguintes t√≠tulos de se√ß√£o:\n        1. Sum√°rio Executivo (inclua nome, miss√£o, vis√£o, objetivos)\n        2. Descri√ß√£o da Empresa (ramo, o que faz)\n        3. Produtos e Servi√ßos\n        4. P√∫blico-Alvo e Diferenciais\n        5. Estrat√©gias Iniciais de Marketing e Vendas\n        6. Opera√ß√µes Iniciais\n        7. Panorama Financeiro Inicial\n    - No final do esbo√ßo, ADICIONE a seguinte frase: \"Este √© um esbo√ßo inicial para organizar suas ideias. Ele pode ser muito mais detalhado e aprofundado.\"\n    - ENT√ÉO, IMEDIATAMENTE AP√ìS MOSTRAR O ESBO√áO, PERGUNTE: \"Este esbo√ßo inicial te ajuda a visualizar melhor? Gostaria de DETALHAR este plano de neg√≥cios agora? Podemos aprofundar cada se√ß√£o, e voc√™ poder√° me fornecer mais informa√ß√µes e, no futuro, at√© mesmo subir documentos.\"\n\n**DETALHAMENTO DO PLANO (SE O USU√ÅRIO ACEITAR):**\nSe o usu√°rio disser \"sim\" para detalhar (ou algo similar):\n    - Responda com entusiasmo: \"√ìtimo! Para detalharmos, vamos focar em cada se√ß√£o do plano. Aplicaremos princ√≠pios de administra√ß√£o e marketing (como os de Chiavenato e Kotler) para enriquecer a an√°lise.\"\n    - ENT√ÉO, PERGUNTE: \"Em qual se√ß√£o do plano de neg√≥cios voc√™ gostaria de come√ßar a aprofundar ou fornecer mais detalhes? Por exemplo, podemos come√ßar com uma 'An√°lise de Mercado mais completa', detalhar suas 'Estrat√©gias de Marketing e Vendas', ou elaborar 'Proje√ß√µes Financeiras'?\"\n    - A partir da escolha do usu√°rio, fa√ßa perguntas espec√≠ficas para aquela se√ß√£o, buscando mais detalhes, dados, e explicando brevemente a import√¢ncia daquela informa√ß√£o para o plano.\n\nLembre-se de manter o tom de um consultor parceiro e experiente."
        cadeia = self._criar_cadeia_conversacional(system_message_plano, self.memoria_plano_negocios, memory_key="historico_chat_plano")
        resposta_ai = cadeia.predict(input_usuario=input_usuario)
        return resposta_ai


    def conversar_controle_financeiro(self, input_usuario):
        # ... (c√≥digo da fun√ß√£o conversar_controle_financeiro como na vers√£o anterior - omitido por brevidade)
        system_message_financeiro = "Voc√™ √© o \"Assistente PME Pro\", um consultor financeiro especialista em IA para pequenas empresas. Sua tarefa √© ajudar o empreendedor a entender e iniciar um CONTROLE FINANCEIRO b√°sico. Voc√™ faz perguntas UMA DE CADA VEZ.\n\n- Se a conversa est√° come√ßando ou o usu√°rio diz algo como \"Quero ajuda com controle financeiro\" ou \"sim\" para uma pergunta inicial sobre o tema, sua PRIMEIRA pergunta DEVE SER: \"Entendido! Para come√ßarmos a organizar suas finan√ßas, qual √© o principal tipo de receita da sua empresa atualmente?\"\n- Continue com perguntas para entender:\n    - Outras fontes de receita (se houver).\n    - Principais categorias de despesas fixas (aluguel, sal√°rios, pro-labore, etc.).\n    - Principais categorias de despesas vari√°veis (mat√©ria-prima, comiss√µes, marketing, etc.).\n    - Se j√° utiliza alguma ferramenta ou planilha de controle.\n- Ap√≥s coletar algumas informa√ß√µes b√°sicas, PERGUNTE: \"Com base no que conversamos, gostaria que eu gerasse um resumo da sua situa√ß√£o financeira atual e sugest√µes de como estruturar uma planilha de controle de fluxo de caixa simples e uma de despesas?\"\n- Se o usu√°rio disser \"sim\", forne√ßa:\n    a) Um breve resumo textual das receitas e despesas identificadas.\n    b) Uma sugest√£o de estrutura para uma planilha de Fluxo de Caixa Simples (colunas: Data, Descri√ß√£o, Entrada, Sa√≠da, Saldo).\n    c) Uma sugest√£o de estrutura para uma Planilha de Despesas Fixas e Vari√°veis (Categorias, Valor Mensal Estimado).\n    d) Uma dica sobre a import√¢ncia de separar finan√ßas pessoais das empresariais.\n- AP√ìS apresentar as sugest√µes, pergunte: \"Isso te d√° um ponto de partida? Podemos detalhar alguma dessas planilhas ou discutir como analisar esses n√∫meros e gerar alguns gr√°ficos simples com base nos dados que voc√™ me fornecer?\""
        cadeia = self._criar_cadeia_conversacional(system_message_financeiro, self.memoria_controle_financeiro, memory_key="historico_chat_financeiro")
        resposta_ai = cadeia.predict(input_usuario=input_usuario)
        return resposta_ai

    # NOVA FUN√á√ÉO PARA C√ÅLCULO DE PRE√áOS
    def calcular_precos_interativo(self, input_usuario, imagem_produto=None):
        # O system_message define o comportamento geral da IA para esta fun√ß√£o.
        # A l√≥gica de perguntar sobre tipo de precifica√ß√£o (revenda vs. produ√ß√£o pr√≥pria)
        # e coletar custos/informa√ß√µes de mercado ser√° parte do fluxo da conversa.
        system_message_precos = f"""
        Voc√™ √© o "Assistente PME Pro", especialista em precifica√ß√£o com IA.
        Sua tarefa √© ajudar o usu√°rio a definir o pre√ßo de venda de um produto ou servi√ßo.
        Voc√™ faz perguntas UMA DE CADA VEZ.

        **IN√çCIO DA CONVERSA:**
        - Se o usu√°rio acabou de entrar nesta se√ß√£o ou diz algo como "quero calcular pre√ßos",
          SUA PRIMEIRA PERGUNTA DEVE SER: "Ol√°! Para te ajudar a calcular o pre√ßo, me diga primeiro:
          Voc√™ quer precificar um produto que voc√™ COMPRA E REVENDE, ou um produto/servi√ßo que voc√™ MESMO PRODUZ/CRIA?"
        
        **CEN√ÅRIO 1: PRODUTO DE REVENDA**
        - Se o usu√°rio indicar REVENDA:
            - Pergunte: "Qual o nome ou tipo do produto que voc√™ revende?"
            - (Opcional, se imagem foi enviada): "Recebi uma imagem. Ela ajuda a identificar o produto?"
            - Pergunte: "Em qual cidade/estado voc√™ atua principalmente? (Isso me ajuda a pensar no mercado local)"
            - Pergunte: "Voc√™ tem o custo de aquisi√ß√£o deste produto por unidade?"
            - Explique: "Para produtos de revenda, √© importante pesquisar o pre√ßo de mercado. Eu n√£o consigo pesquisar na web em tempo real, mas posso te dar dicas de como voc√™ pode fazer essa pesquisa (ex: pesquisar em grandes varejistas online, marketplaces, ou concorrentes locais). Com base no seu custo e na pesquisa de mercado, definiremos uma margem de lucro."
            - Pergunte: "Qual margem de lucro voc√™ gostaria de aplicar sobre o custo (ex: 30%, 50%, 100%) ou qual pre√ßo de venda voc√™ tem em mente?"
            - Com base no custo e margem (ou pre√ßo alvo), calcule e sugira o pre√ßo.

        **CEN√ÅRIO 2: PRODUTO/SERVI√áO DE PRODU√á√ÉO PR√ìPRIA**
        - Se o usu√°rio indicar PRODU√á√ÉO PR√ìPRIA:
            - Pergunte: "Entendido! Para precificar seu produto/servi√ßo pr√≥prio, vamos detalhar os custos. Qual o nome do produto ou tipo de servi√ßo?"
            - (Opcional, se imagem foi enviada): "Recebi uma imagem. Ela ajuda a identificar o produto?"
            - Pergunte sobre CUSTOS DIRETOS: "Quais s√£o os custos diretos de material ou insumos por unidade produzida/servi√ßo prestado?" (Pe√ßa exemplos)
            - Pergunte sobre M√ÉO DE OBRA DIRETA: "Quanto tempo de trabalho √© gasto para produzir uma unidade ou prestar o servi√ßo, e qual o custo dessa m√£o de obra?" (Se for o pr√≥prio usu√°rio, pode ser o valor/hora que ele quer para o tempo dele)
            - Pergunte sobre CUSTOS INDIRETOS/FIXOS: "Voc√™ tem uma estimativa dos seus custos fixos mensais (aluguel, luz, etc.) que precisam ser cobertos? E quantas unidades voc√™ espera vender por m√™s (para ajudar a ratear esses custos)?"
            - Explique brevemente m√©todos de precifica√ß√£o (Markup, Margem de Contribui√ß√£o).
            - Pergunte: "Qual margem de lucro voc√™ gostaria de adicionar sobre o custo total de produ√ß√£o?"
            - Com base nos custos e margem, calcule e sugira o pre√ßo.

        **GERAL:**
        - Pe√ßa informa√ß√µes de forma clara e sequencial.
        - Ap√≥s apresentar um c√°lculo ou sugest√£o, pergunte se faz sentido ou se o usu√°rio gostaria de simular com outros valores.
        - Lembre o usu√°rio de considerar o valor percebido pelo cliente e os pre√ßos da concorr√™ncia.
        """
        # Se uma imagem foi enviada e processada, podemos adicionar a descri√ß√£o dela ao input do usu√°rio
        # Por enquanto, vamos focar no fluxo de texto.
        # A mem√≥ria √© self.memoria_calculo_precos
        cadeia = self._criar_cadeia_conversacional(system_message_precos, self.memoria_calculo_precos, memory_key="historico_chat_precos")
        resposta_ai = cadeia.predict(input_usuario=input_usuario)
        return resposta_ai

# --- Interface Principal Streamlit ---
if llm_langchain: # Verificando se o llm para LangChain foi inicializado
    if 'agente_pme' not in st.session_state:
        st.session_state.agente_pme = AssistentePMEPro(llm_model_langchain) # Passando o modelo correto
    agente = st.session_state.agente_pme

    st.sidebar.image("https://i.imgur.com/rGkzKxN.png", width=100)
    st.sidebar.title("Assistente PME Pro")
    st.sidebar.markdown("IA para seu Neg√≥cio Decolar!")
    st.sidebar.markdown("---")

    opcoes_menu = {
        "P√°gina Inicial": "pagina_inicial",
        "Marketing Digital com IA (Guia)": "marketing_guiado",
        "Elaborar Plano de Neg√≥cios com IA": "plano_negocios",
        "C√°lculo de Pre√ßos Inteligente": "calculo_precos" # NOVA OP√á√ÉO
    }

    if 'area_selecionada' not in st.session_state:
        st.session_state.area_selecionada = "P√°gina Inicial"
    
    if "chat_display_plano_negocios" not in st.session_state:
         st.session_state.chat_display_plano_negocios = []
    if "chat_display_controle_financeiro" not in st.session_state: # Mantido, mas n√£o no menu atual
         st.session_state.chat_display_controle_financeiro = []
    if "chat_display_calculo_precos" not in st.session_state: # Novo hist√≥rico de display
         st.session_state.chat_display_calculo_precos = []


    area_selecionada_label = st.sidebar.radio(
        "Como posso te ajudar hoje?",
        options=list(opcoes_menu.keys()),
        key='sidebar_selection_v12', 
        index=list(opcoes_menu.keys()).index(st.session_state.area_selecionada) if st.session_state.area_selecionada in opcoes_menu else 0
    )

    if area_selecionada_label != st.session_state.area_selecionada:
        st.session_state.area_selecionada = area_selecionada_label
        # Prepara a sauda√ß√£o inicial ao entrar nas abas de chat
        if st.session_state.area_selecionada == "Elaborar Plano de Neg√≥cios com IA" and not st.session_state.chat_display_plano_negocios:
            initial_ai_message = "Ol√°! Sou seu Assistente PME Pro. Se voc√™ gostaria de criar um plano de neg√≥cios, pode me dizer 'sim' ou 'vamos come√ßar'!"
            st.session_state.chat_display_plano_negocios = [{"role": "assistant", "content": initial_ai_message}]
            agente.memoria_plano_negocios.clear()
            agente.memoria_plano_negocios.chat_memory.add_ai_message(initial_ai_message)
        # Removida a inicializa√ß√£o do chat de Controle Financeiro aqui, pois a aba n√£o est√° no menu
        elif st.session_state.area_selecionada == "C√°lculo de Pre√ßos Inteligente" and not st.session_state.chat_display_calculo_precos:
            initial_ai_message = "Ol√°! Bem-vindo ao assistente de C√°lculo de Pre√ßos. Para come√ßar, voc√™ quer precificar um produto que voc√™ COMPRA E REVENDE, ou um produto/servi√ßo que voc√™ MESMO PRODUZ/CRIA?"
            st.session_state.chat_display_calculo_precos = [{"role": "assistant", "content": initial_ai_message}]
            agente.memoria_calculo_precos.clear()
            agente.memoria_calculo_precos.chat_memory.add_ai_message(initial_ai_message)
        elif st.session_state.area_selecionada == "Marketing Digital com IA (Guia)":
             st.session_state.start_marketing_form = False 
        st.rerun()


    if st.session_state.area_selecionada == "P√°gina Inicial":
        st.title("üåü Bem-vindo ao Assistente PME Pro! üåü")
        st.markdown("Sou seu parceiro de IA pronto para ajudar sua pequena ou m√©dia empresa a crescer e se organizar melhor.")
        st.markdown("---")
        # Ajustando para 3 colunas para os bot√µes
        col1, col2, col3 = st.columns(3)
        with col1:
            if st.button("üöÄ Guia de Marketing Digital", key="btn_goto_marketing_v4"):
                st.session_state.area_selecionada = "Marketing Digital com IA (Guia)"
                st.session_state.start_marketing_form = False 
                st.rerun()
        with col2:
            if st.button("üìù Esbo√ßar Plano de Neg√≥cios", key="btn_goto_plano_v5"):
                st.session_state.area_selecionada = "Elaborar Plano de Neg√≥cios com IA"
                if not st.session_state.chat_display_plano_negocios:
                     initial_ai_message = "Ol√°! Sou seu Assistente PME Pro. Se voc√™ gostaria de criar um plano de neg√≥cios, pode me dizer 'sim' ou 'vamos come√ßar'!"
                     st.session_state.chat_display_plano_negocios = [{"role": "assistant", "content": initial_ai_message}]
                     agente.memoria_plano_negocios.clear()
                     agente.memoria_plano_negocios.chat_memory.add_ai_message(initial_ai_message)
                st.rerun()
        with col3: 
            if st.button("üí≤ Calcular Pre√ßos com IA", key="btn_goto_precos"): # NOVO BOT√ÉO
                st.session_state.area_selecionada = "C√°lculo de Pre√ßos Inteligente"
                if not st.session_state.chat_display_calculo_precos:
                     initial_ai_message = "Ol√°! Bem-vindo ao assistente de C√°lculo de Pre√ßos. Para come√ßar, voc√™ quer precificar um produto que voc√™ COMPRA E REVENDE, ou um produto/servi√ßo que voc√™ MESMO PRODUZ/CRIA?"
                     st.session_state.chat_display_calculo_precos = [{"role": "assistant", "content": initial_ai_message}]
                     agente.memoria_calculo_precos.clear()
                     agente.memoria_calculo_precos.chat_memory.add_ai_message(initial_ai_message)
                st.rerun()
        st.balloons()

    elif st.session_state.area_selecionada == "Marketing Digital com IA (Guia)":
        agente.marketing_digital_guiado()

    elif st.session_state.area_selecionada == "Elaborar Plano de Neg√≥cios com IA":
        st.header("üìù Elaborando seu Plano de Neg√≥cios com IA")
        st.caption("Converse comigo para construirmos seu plano passo a passo.")
        if not st.session_state.chat_display_plano_negocios:
            initial_ai_message = "Ol√°! Sou seu Assistente PME Pro. Se voc√™ gostaria de criar um plano de neg√≥cios, pode me dizer 'sim' ou 'vamos come√ßar'!"
            st.session_state.chat_display_plano_negocios = [{"role": "assistant", "content": initial_ai_message}]
            if not agente.memoria_plano_negocios.chat_memory.messages:
                agente.memoria_plano_negocios.chat_memory.add_ai_message(initial_ai_message)
        for msg_info in st.session_state.chat_display_plano_negocios:
            with st.chat_message(msg_info["role"]):
                st.markdown(msg_info["content"])
        prompt_usuario_plano = st.chat_input("Sua resposta ou diga 'Crie meu plano de neg√≥cios'")
        if prompt_usuario_plano:
            st.session_state.chat_display_plano_negocios.append({"role": "user", "content": prompt_usuario_plano})
            with st.chat_message("user"): st.markdown(prompt_usuario_plano)
            with st.spinner("Assistente PME Pro est√° processando... ü§î"):
                resposta_ai_plano = agente.conversar_plano_de_negocios(prompt_usuario_plano)
            st.session_state.chat_display_plano_negocios.append({"role": "assistant", "content": resposta_ai_plano})
            with st.chat_message("assistant"): st.markdown(resposta_ai_plano)
        if st.sidebar.button("Reiniciar Plano de Neg√≥cios", key="btn_reset_plano_v4"):
            initial_ai_message = "Ok, vamos recome√ßar seu plano de neg√≥cios! Se voc√™ gostaria de criar um plano de neg√≥cios, pode me dizer 'sim' ou 'vamos come√ßar'!"
            st.session_state.chat_display_plano_negocios = [{"role": "assistant", "content": initial_ai_message}]
            agente.memoria_plano_negocios.clear()
            agente.memoria_plano_negocios.chat_memory.add_ai_message(initial_ai_message)
            st.rerun()

    elif st.session_state.area_selecionada == "C√°lculo de Pre√ßos Inteligente": # NOVA SE√á√ÉO DE UI
        st.header("üí≤ C√°lculo de Pre√ßos Inteligente com IA")
        st.caption("Vamos definir os melhores pre√ßos para seus produtos ou servi√ßos!")

        # Widget para upload de imagem (opcional)
        imagem_carregada = st.file_uploader("Envie uma imagem do produto (opcional):", type=["png", "jpg", "jpeg"], key="preco_img_uploader")
        
        if imagem_carregada is not None:
            try:
                imagem_pil = Image.open(imagem_carregada)
                st.image(imagem_pil, caption="Imagem Carregada", width=150)
                # Aqui poder√≠amos processar a imagem com um modelo multimodal no futuro
                # Por agora, apenas confirmamos o upload. A IA ser√° informada textualmente.
                st.session_state.descricao_imagem_preco = f"Uma imagem do produto foi carregada: {imagem_carregada.name}"
            except Exception as e:
                st.error(f"Erro ao carregar a imagem: {e}")
                st.session_state.descricao_imagem_preco = None
        else:
            st.session_state.descricao_imagem_preco = None


        if not st.session_state.chat_display_calculo_precos:
            initial_ai_message = "Ol√°! Bem-vindo ao assistente de C√°lculo de Pre√ßos. Para come√ßar, voc√™ quer precificar um produto que voc√™ COMPRA E REVENDE, ou um produto/servi√ßo que voc√™ MESMO PRODUZ/CRIA?"
            st.session_state.chat_display_calculo_precos = [{"role": "assistant", "content": initial_ai_message}]
            if not agente.memoria_calculo_precos.chat_memory.messages:
                agente.memoria_calculo_precos.chat_memory.add_ai_message(initial_ai_message)
        
        for msg_info in st.session_state.chat_display_calculo_precos:
            with st.chat_message(msg_info["role"]):
                st.markdown(msg_info["content"])
        
        prompt_usuario_preco = st.chat_input("Sua resposta ou descreva o produto/servi√ßo para precificar:")

        if prompt_usuario_preco:
            st.session_state.chat_display_calculo_precos.append({"role": "user", "content": prompt_usuario_preco})
            with st.chat_message("user"): st.markdown(prompt_usuario_preco)

            input_para_ia = prompt_usuario_preco
            if st.session_state.get("descricao_imagem_preco"):
                input_para_ia += f"\n(Contexto da imagem: {st.session_state.descricao_imagem_preco})"
                st.session_state.descricao_imagem_preco = None # Limpa ap√≥s usar

            with st.spinner("Assistente PME Pro est√° calculando... üìà"):
                resposta_ai_preco = agente.calcular_precos_interativo(input_para_ia, imagem_produto=None) # Passando None para imagem por enquanto
            
            st.session_state.chat_display_calculo_precos.append({"role": "assistant", "content": resposta_ai_preco})
            with st.chat_message("assistant"): st.markdown(resposta_ai_preco)

        if st.sidebar.button("Reiniciar C√°lculo de Pre√ßos", key="btn_reset_precos"):
            initial_ai_message = "Ok, vamos come√ßar um novo c√°lculo de pre√ßos! Voc√™ quer precificar um produto que voc√™ COMPRA E REVENDE, ou um produto/servi√ßo que voc√™ MESMO PRODUZ/CRIA?"
            st.session_state.chat_display_calculo_precos = [{"role": "assistant", "content": initial_ai_message}]
            agente.memoria_calculo_precos.clear()
            agente.memoria_calculo_precos.chat_memory.add_ai_message(initial_ai_message)
            st.rerun()
else:
    st.error("üö® O Assistente PME Pro n√£o p√¥de ser iniciado. Verifique a API Key e o modelo LLM.")

st.sidebar.markdown("---")
st.sidebar.info("Desenvolvido por Yaakov com seu Assistente PME Pro")
