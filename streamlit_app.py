import streamlit as st
import os
from langchain_google_genai import ChatGoogleGenerativeAI
from langchain.prompts import ChatPromptTemplate, SystemMessagePromptTemplate, HumanMessagePromptTemplate, MessagesPlaceholder
from langchain.chains import LLMChain
from langchain.memory import ConversationBufferMemory
from langchain.schema import HumanMessage, AIMessage
import google.generativeai as genai
from PIL import Image

# --- Configura√ß√£o da P√°gina Streamlit ---
st.set_page_config(
    page_title="Assistente PME Pro",
    layout="wide",
    initial_sidebar_state="expanded",
    page_icon="üöÄ"
)

# --- Carregar API Key e Configurar Modelo ---
GOOGLE_API_KEY = None
llm_model_instance = None

try:
    GOOGLE_API_KEY = st.secrets["GOOGLE_API_KEY"]
except KeyError:
    st.error("üö® ERRO: Chave API 'GOOGLE_API_KEY' n√£o encontrada nos Segredos (Secrets) do Streamlit.")
    st.info("Adicione sua GOOGLE_API_KEY aos Segredos do seu app no painel do Streamlit Community Cloud.")
    st.stop()
except FileNotFoundError:
    GOOGLE_API_KEY = os.environ.get("GOOGLE_API_KEY")
    if not GOOGLE_API_KEY:
        st.error("üö® ERRO: Chave API n√£o encontrada nos Segredos do Streamlit nem como vari√°vel de ambiente.")
        st.info("Configure GOOGLE_API_KEY nos Segredos do Streamlit Cloud ou defina como vari√°vel de ambiente local.")
        st.stop()

if not GOOGLE_API_KEY or not GOOGLE_API_KEY.strip():
    st.error("üö® ERRO: GOOGLE_API_KEY n√£o foi carregada ou est√° vazia.")
    st.stop()
else:
    try:
        genai.configure(api_key=GOOGLE_API_KEY)
        llm_model_instance = ChatGoogleGenerativeAI(model="gemini-1.5-flash",
                                             temperature=0.75,
                                             google_api_key=GOOGLE_API_KEY,
                                             convert_system_message_to_human=True)
        st.sidebar.success("‚úÖ Modelo LLM (Gemini) inicializado!")
    except Exception as e:
        st.error(f"üò• ERRO AO INICIALIZAR O MODELO LLM DO GOOGLE: {e}")
        st.info("Verifique sua chave API, se a 'Generative Language API' est√° ativa no Google Cloud e suas cotas.")
        st.stop()

# --- NOVAS FUN√á√ïES AUXILIARES PARA MARKETING DIGITAL INTERATIVO ---
def _marketing_display_social_media_options(section_key_prefix: str):
    st.subheader(" Plataformas Desejadas:")
    platforms_config = {
        "Instagram": "insta", "Facebook": "fb", "X (Twitter)": "x",
        "WhatsApp": "wpp", "TikTok": "tt", "Kwai": "kwai",
        "YouTube (descri√ß√£o/roteiro)": "yt",
        "E-mail Marketing (lista pr√≥pria)": "email_own",
        "E-mail Marketing (Campanha Google Ads)": "email_google"
    }
    
    key_select_all = f"{section_key_prefix}_marketing_select_all_v5" # Chave √∫nica e versionada
    # Este 'select_all_checkbox_value' refletir√° o estado submetido do checkbox "Selecionar Todos"
    # AP√ìS a submiss√£o do formul√°rio. Durante a renderiza√ß√£o inicial ou antes da submiss√£o,
    # ele √© apenas um widget sendo definido.
    select_all_checkbox_value = st.checkbox("Selecionar Todas as Plataformas Acima", key=key_select_all)

    cols = st.columns(2)
    # Este dicion√°rio guardar√° as vari√°veis dos checkboxes individuais.
    # Ap√≥s a submiss√£o, elas conter√£o os valores True/False submetidos.
    platform_checkbox_widgets = {} 
    any_email_platform_potentially_selected = False

    for i, (platform_name, platform_suffix) in enumerate(platforms_config.items()):
        col_index = i % 2
        platform_key = f"{section_key_prefix}_marketing_platform_{platform_suffix}_v5" # Chave √∫nica e versionada
        
        # O valor inicial para renderiza√ß√£o: se "Select All" est√° marcado AGORA, mostre marcado.
        # Sen√£o, use o estado persistido do checkbox individual (ou False se n√£o existir).
        # Streamlit lida com a persist√™ncia do estado do widget atrav√©s da sua chave.
        initial_display_value = True if select_all_checkbox_value else st.session_state.get(platform_key, False)
        if select_all_checkbox_value: # Garante que se "select all" for marcado, todos apare√ßam marcados nesta renderiza√ß√£o
            initial_display_value = True

        with cols[col_index]:
            # A vari√°vel python 'is_checked' receber√° o valor do checkbox ap√≥s a submiss√£o do form.
            is_checked = st.checkbox(
                platform_name,
                value=initial_display_value, # Define como o checkbox aparece nesta renderiza√ß√£o
                key=platform_key
            )
            platform_checkbox_widgets[platform_name] = is_checked # Armazena a vari√°vel do widget
            if "E-mail Marketing" in platform_name and is_checked:
                 any_email_platform_potentially_selected = True
    
    if select_all_checkbox_value:
        any_email_platform_potentially_selected = True # Se "Selecionar Tudo" est√° marcado, implica que emails tamb√©m est√£o.

    if any_email_platform_potentially_selected:
        st.caption("üí° Para e-mail marketing, a IA ajudar√° na cria√ß√£o do texto...")

    # Retorna a vari√°vel do checkbox "Selecionar Todas" e o dicion√°rio das vari√°veis dos checkboxes individuais.
    # Os valores corretos (submetidos) estar√£o nessas vari√°veis AP√ìS o st.form_submit_button ser processado.
    return select_all_checkbox_value, platform_checkbox_widgets


def _marketing_get_objective_details(section_key, type_of_creation="post/campanha"):
    st.subheader(f"Detalhes para Orientar a Cria√ß√£o do(a) {type_of_creation.capitalize()}:")
    details = {}
    details["objective"] = st.text_area(
        f"Qual o principal objetivo com est(e/a) {type_of_creation}? (Ex: Aumentar vendas, gerar leads, divulgar evento, construir marca)",
        key=f"{section_key}_obj_new"
    )
    details["target_audience"] = st.text_input("Quem voc√™ quer alcan√ßar? (Descreva seu p√∫blico-alvo)", key=f"{section_key}_audience_new")
    details["product_service"] = st.text_area("Qual produto ou servi√ßo principal voc√™ est√° promovendo?", key=f"{section_key}_product_new")
    details["key_message"] = st.text_area("Qual mensagem chave voc√™ quer comunicar?", key=f"{section_key}_message_new")
    details["usp"] = st.text_area("O que torna seu produto/servi√ßo especial ou diferente da concorr√™ncia (USP)?", key=f"{section_key}_usp_new")
    details["style_tone"] = st.selectbox(
        "Qual o tom/estilo da comunica√ß√£o?",
        ("Profissional e direto", "Amig√°vel e informal", "Criativo e inspirador", "Urgente e promocional", "Engra√ßado e leve", "Educacional e informativo"),
        key=f"{section_key}_tone_new"
    )
    details["extra_info"] = st.text_area("Alguma informa√ß√£o adicional, promo√ß√£o espec√≠fica, ou call-to-action (CTA) principal que devemos incluir?", key=f"{section_key}_extra_new")
    return details

def _marketing_display_output_options(generated_content, section_key, file_name_prefix="conteudo_gerado"):
    st.subheader("üéâ Resultado da IA e Pr√≥ximos Passos:")
    st.markdown(generated_content)

    st.download_button(
        label="üì• Baixar Conte√∫do Gerado",
        data=generated_content.encode('utf-8'),
        file_name=f"{file_name_prefix}_{section_key}_new.txt",
        mime="text/plain",
        key=f"download_{section_key}_new"
    )
    cols_actions = st.columns(2)
    with cols_actions[0]:
        if st.button("üîó Copiar para Compartilhar (Simulado)", key=f"{section_key}_share_btn_new"):
            st.success("Conte√∫do pronto para ser copiado e compartilhado nas suas redes ou e-mail!")
            st.caption("Lembre-se de adaptar para cada plataforma, se necess√°rio.")
    with cols_actions[1]:
        if st.button("üóìÔ∏è Simular Agendamento", key=f"{section_key}_schedule_btn_new"):
            st.info("Agendamento simulado. Para agendamento real, use ferramentas como Meta Business Suite, Hootsuite, mLabs, ou a fun√ß√£o de programa√ß√£o do seu servi√ßo de e-mail marketing.")

# --- HANDLER FUNCTIONS FOR EACH MARKETING ACTION ---
# (Estes handlers agora recebem 'llm' e operam com os dados do formul√°rio)

def _marketing_handle_criar_post(uploaded_files_info, details_dict, selected_platforms_list, llm):
    if not selected_platforms_list: # Checagem movida para o handler principal
        st.warning("Por favor, selecione pelo menos uma plataforma.")
        return
    if not details_dict["objective"]:
        st.warning("Por favor, descreva o objetivo do post.")
        return

    with st.spinner("ü§ñ A IA est√° criando seu post... Aguarde!"):
        prompt_parts = [
            "**Instru√ß√£o para IA:** Voc√™ √© um especialista em copywriting e marketing digital criando um post para pequenas empresas.",
            f"**Plataformas Alvo:** {', '.join(selected_platforms_list)}.",
            f"**Objetivo do Post:** {details_dict['objective']}",
            f"**P√∫blico-Alvo:** {details_dict['target_audience']}",
            f"**Produto/Servi√ßo Promovido:** {details_dict['product_service']}",
            f"**Mensagem Chave:** {details_dict['key_message']}",
            f"**Diferencial (USP):** {details_dict['usp']}",
            f"**Tom/Estilo:** {details_dict['style_tone']}",
            f"**Informa√ß√µes Adicionais/CTA:** {details_dict['extra_info']}",
            "**Tarefa:**",
            "1. Gere o conte√∫do do post. Se m√∫ltiplas plataformas foram selecionadas, forne√ßa uma vers√£o base com dicas de adapta√ß√£o para cada uma, ou vers√µes ligeiramente diferentes se a natureza da plataforma exigir (ex: WhatsApp mais direto, E-mail com Assunto e corpo).",
            "2. Inclua sugest√µes de 3-5 hashtags relevantes e populares, se aplic√°vel.",
            "3. Sugira 2-3 emojis apropriados para o tom e conte√∫do.",
            "4. Se for para e-mail, crie um Assunto (Subject Line) chamativo e o corpo do e-mail.",
            "5. Se for para YouTube/TikTok/Kwai, forne√ßa um roteiro breve ou ideias principais para um v√≠deo curto (at√© 1 minuto), incluindo sugest√µes para o visual e √°udio.",
            "6. Se o usu√°rio enviou arquivos de suporte, mencione como eles podem ser usados (ex: 'use a imagem [nome_arquivo_imagem] como principal' ou 'baseie-se nos dados da planilha [nome_arquivo_planilha]')."
        ]
        if uploaded_files_info:
            prompt_parts.append(f"**Arquivos de Suporte Enviados (para refer√™ncia contextual):** {', '.join([f['name'] for f in uploaded_files_info])}.")

        final_prompt = "\n\n".join(prompt_parts)
        st.text_area("Debug: Prompt Enviado para IA (Criar Post)", final_prompt, height=150, key="dbg_prompt_post_new")

        ai_response = llm.invoke(HumanMessage(content=final_prompt))
        generated_content = ai_response.content
        st.session_state.generated_post_content_new = generated_content

def _marketing_handle_criar_campanha(uploaded_files_info, details_dict, campaign_specifics, selected_platforms_list, llm):
    if not selected_platforms_list:
        st.warning("Por favor, selecione pelo menos uma plataforma para a campanha.")
        return
    if not details_dict["objective"]:
        st.warning("Por favor, descreva o objetivo principal da campanha.")
        return

    with st.spinner("üß† A IA est√° elaborando seu plano de campanha... Isso pode levar um momento."):
        prompt_parts = [
            "**Instru√ß√£o para IA:** Voc√™ √© um estrategista de marketing digital s√™nior, criando um plano de campanha completo e acion√°vel para uma pequena empresa.",
            f"**Nome da Campanha:** {campaign_specifics['name']}",
            f"**Plataformas Envolvidas:** {', '.join(selected_platforms_list)}.",
            f"**Dura√ß√£o Estimada:** {campaign_specifics['duration']}",
            f"**Or√ßamento para Impulsionamento (Refer√™ncia):** {campaign_specifics['budget']}",
            f"**Objetivo Principal da Campanha:** {details_dict['objective']}",
            f"**P√∫blico-Alvo Detalhado:** {details_dict['target_audience']}",
            f"**Produto/Servi√ßo Central:** {details_dict['product_service']}",
            f"**Mensagem Chave Central:** {details_dict['key_message']}",
            f"**Principal Diferencial (USP):** {details_dict['usp']}",
            f"**Tom/Estilo Geral da Campanha:** {details_dict['style_tone']}",
            f"**KPIs Principais:** {campaign_specifics['kpis']}",
            f"**Informa√ß√µes Adicionais/CTA Principal:** {details_dict['extra_info']}",
            "**Tarefa:** Elabore um plano de campanha que inclua:",
            "1.  **Conceito Criativo Central.**", "2.  **Estrutura da Campanha (Fases).**",
            "3.  **Mix de Conte√∫do por Plataforma (3-5 tipos).**", "4.  **Sugest√µes de Criativos.**",
            "5.  **Mini Calend√°rio Editorial.**", "6.  **Estrat√©gia de Hashtags.**",
            "7.  **Recomenda√ß√µes para Impulsionamento.**", "8.  **Como Mensurar os KPIs.**", "9.  **Dicas de Otimiza√ß√£o.**",
            "Se o usu√°rio enviou arquivos de suporte, integre informa√ß√µes relevantes deles no plano."
        ]
        if uploaded_files_info:
            prompt_parts.append(f"**Arquivos de Suporte Enviados (para refer√™ncia contextual):** {', '.join([f['name'] for f in uploaded_files_info])}.")

        final_prompt = "\n\n".join(prompt_parts)
        st.text_area("Debug: Prompt Enviado para IA (Criar Campanha)", final_prompt, height=150, key="dbg_prompt_camp_new")

        ai_response = llm.invoke(HumanMessage(content=final_prompt))
        generated_content = ai_response.content
        st.session_state.generated_campaign_content_new = generated_content

# ... (restante dos handlers _marketing_handle_criar_landing_page, _marketing_handle_criar_site, etc. permanecem iguais,
# pois j√° usam o 'llm' passado e n√£o t√™m a complexidade do 'select all')

def _marketing_handle_criar_landing_page(uploaded_files_info, lp_details, llm):
    if not lp_details["purpose"] or not lp_details["main_offer"] or not lp_details["cta"]:
        st.warning("Por favor, preencha o objetivo, a oferta principal e o CTA da landing page.")
        return
    with st.spinner("üé® A IA est√° desenhando a estrutura da sua landing page..."):
        prompt_parts = [
            "**Instru√ß√£o para IA:** Voc√™ √© um especialista em UX/UI e copywriting, focado em criar landing pages de alta convers√£o para pequenas empresas.",
            f"**Objetivo da Landing Page:** {lp_details['purpose']}",
            f"**P√∫blico-Alvo (Persona):** {lp_details['target_audience']}",
            f"**Oferta Principal:** {lp_details['main_offer']}",
            f"**Principais Benef√≠cios da Oferta:** {lp_details['key_benefits']}",
            f"**Chamada para A√ß√£o (CTA) Principal:** {lp_details['cta']}",
            f"**Prefer√™ncias Visuais/Refer√™ncias:** {lp_details['visual_prefs']}",
            "**Tarefa:** Crie uma estrutura detalhada e sugest√µes de conte√∫do (copy) para esta landing page. Inclua: T√≠tulo(s), Subt√≠tulo, Se√ß√µes (Problema, Solu√ß√£o/Oferta, Benef√≠cios, Prova Social, CTA), Elementos Adicionais (FAQ, Garantia), Tom de Voz, Sugest√µes de Layout/Design (descritivas).",
            "Se o usu√°rio enviou arquivos de suporte, sugira como integr√°-los."
        ]
        if uploaded_files_info:
            prompt_parts.append(f"**Arquivos de Suporte Enviados (para refer√™ncia contextual):** {', '.join([f['name'] for f in uploaded_files_info])}.")
        final_prompt = "\n\n".join(prompt_parts)
        st.text_area("Debug: Prompt Enviado para IA (Criar LP)", final_prompt, height=150, key="dbg_prompt_lp_new")

        ai_response = llm.invoke(HumanMessage(content=final_prompt))
        generated_content = ai_response.content
        st.session_state.generated_lp_content_new = generated_content

def _marketing_handle_criar_site(uploaded_files_info, site_details, llm):
    if not site_details["business_type"] or not site_details["main_purpose"]:
        st.warning("Por favor, informe o tipo de neg√≥cio e o objetivo principal do site.")
        return
    with st.spinner("üõ†Ô∏è A IA est√° arquitetando a estrutura do seu site..."):
        prompt_parts = [
            "**Instru√ß√£o para IA:** Voc√™ √© um arquiteto de informa√ß√£o e web designer conceitual, ajudando uma pequena empresa a planejar a estrutura e conte√∫do de seu novo site.",
            f"**Tipo de Neg√≥cio:** {site_details['business_type']}",
            f"**Objetivo Principal do Site:** {site_details['main_purpose']}",
            f"**P√∫blico-Alvo Principal:** {site_details['target_audience']}",
            f"**P√°ginas Essenciais Sugeridas pelo Usu√°rio:** {site_details['essential_pages']}",
            f"**Principais Produtos/Servi√ßos/Diferenciais a Destacar:** {site_details['key_features']}",
            f"**Personalidade da Marca:** {site_details['brand_personality']}",
            f"**Prefer√™ncias Visuais/Refer√™ncias:** {site_details['visual_references']}",
            "**Tarefa:** Desenvolva uma proposta de estrutura e conte√∫do para o site. Inclua: Mapa do Site, Detalhes por P√°gina (Objetivo, Se√ß√µes, Copy, Visuais, CTAs), Conceito de Design/Layout, Slogan (opcional), Dicas SEO On-Page.",
            "Se o usu√°rio enviou arquivos de suporte, sugira como incorpor√°-los."
        ]
        if uploaded_files_info:
            prompt_parts.append(f"**Arquivos de Suporte Enviados (para refer√™ncia contextual):** {', '.join([f['name'] for f in uploaded_files_info])}.")
        final_prompt = "\n\n".join(prompt_parts)
        st.text_area("Debug: Prompt Enviado para IA (Criar Site)", final_prompt, height=150, key="dbg_prompt_site_new")

        ai_response = llm.invoke(HumanMessage(content=final_prompt))
        generated_content = ai_response.content
        st.session_state.generated_site_content_new = generated_content

def _marketing_handle_encontre_cliente(uploaded_files_info, client_details, llm):
    if not client_details["product_campaign"]:
        st.warning("Por favor, descreva o produto/servi√ßo ou campanha.")
        return
    with st.spinner("üïµÔ∏è A IA est√° investigando seu p√∫blico-alvo..."):
        prompt_parts = [
            "**Instru√ß√£o para IA:** Voc√™ √© um 'Agente Detetive de Clientes', especialista em marketing e pesquisa de mercado.",
            f"**Produto/Servi√ßo/Campanha em Foco:** {client_details['product_campaign']}",
            f"**Localiza√ß√£o Principal:** {client_details['location']}",
            f"**Verba de Marketing (Refer√™ncia):** {client_details['budget']}",
            f"**Faixa Et√°ria e G√™nero (Informado):** {client_details['age_gender']}",
            f"**Interesses/Dores/Necessidades (Informado):** {client_details['interests']}",
            f"**Canais Atuais/Considerados:** {client_details['current_channels']}",
            f"**N√≠vel de Pesquisa Solicitado:** {'Deep Research Ativado' if client_details['deep_research'] else 'Pesquisa Padr√£o'}",
            "**Tarefa:** Realize uma an√°lise completa do p√∫blico-alvo. Inclua: Persona(s), Segmenta√ß√£o para An√∫ncios, Melhores Canais, Estrat√©gia de Conte√∫do, CPC/CPA Estimado (se poss√≠vel), Sugest√£o de Impulsionamento. Se 'Deep Research' ativo, adicione Insights Comportamentais, Influenciadores, Obje√ß√µes, Linguagem, Simula√ß√£o de Pesquisa Google, Oportunidades N√£o √ìbvias.",
            "Se o usu√°rio enviou arquivos de suporte, considere-os."
        ]
        if uploaded_files_info:
            prompt_parts.append(f"**Arquivos de Suporte Enviados (para refer√™ncia contextual):** {', '.join([f['name'] for f in uploaded_files_info])}.")
        final_prompt = "\n\n".join(prompt_parts)
        st.text_area("Debug: Prompt Enviado para IA (Encontre Cliente)", final_prompt, height=150, key="dbg_prompt_cliente_new")

        ai_response = llm.invoke(HumanMessage(content=final_prompt))
        generated_content = ai_response.content
        st.session_state.generated_client_analysis_new = generated_content

def _marketing_handle_conheca_concorrencia(uploaded_files_info, competitor_details, llm):
    if not competitor_details["your_business"] or not competitor_details["competitors_list"]:
        st.warning("Por favor, descreva seu neg√≥cio e liste pelo menos um concorrente.")
        return
    with st.spinner("üî¨ A IA est√° analisando a concorr√™ncia..."):
        prompt_parts = [
            "**Instru√ß√£o para IA:** Voc√™ √© um 'Agente de Intelig√™ncia Competitiva', especialista em analisar o mercado e os concorrentes de pequenas empresas.",
            f"**Neg√≥cio do Usu√°rio (para Ponto de Refer√™ncia):** {competitor_details['your_business']}",
            f"**Concorrentes a Serem Analisados (Informados pelo Usu√°rio):** {competitor_details['competitors_list']}",
            f"**Principais Aspectos para An√°lise:** {', '.join(competitor_details['aspects_to_analyze'])}",
            "**Tarefa:** Elabore um relat√≥rio breve e √∫til sobre os concorrentes. Para cada concorrente principal: resumo da an√°lise dos aspectos. Comparativo Geral: Pontos Fortes/Fracos da concorr√™ncia. Recomenda√ß√µes Estrat√©gicas para o usu√°rio (diferencia√ß√£o, a√ß√µes de marketing). Simule pesquisa p√∫blica.",
            "Se o usu√°rio enviou arquivos de suporte, considere-os."
        ]
        if uploaded_files_info:
            prompt_parts.append(f"**Arquivos de Suporte Enviados (para refer√™ncia contextual):** {', '.join([f['name'] for f in uploaded_files_info])}.")
        final_prompt = "\n\n".join(prompt_parts)
        st.text_area("Debug: Prompt Enviado para IA (Concorrencia)", final_prompt, height=150, key="dbg_prompt_concor_new")

        ai_response = llm.invoke(HumanMessage(content=final_prompt))
        generated_content = ai_response.content
        st.session_state.generated_competitor_analysis_new = generated_content


# --- Classe do Agente (AssistentePMEPro) ---
class AssistentePMEPro:
    def __init__(self, llm_passed_model):
        if llm_passed_model is None:
            st.error("‚ùå Erro cr√≠tico: Agente PME Pro tentou ser inicializado sem um modelo LLM.")
            st.stop()
        self.llm = llm_passed_model

        self.memoria_plano_negocios = ConversationBufferMemory(memory_key="historico_chat_plano", return_messages=True)
        self.memoria_calculo_precos = ConversationBufferMemory(memory_key="historico_chat_precos", return_messages=True)
        self.memoria_gerador_ideias = ConversationBufferMemory(memory_key="historico_chat_ideias", return_messages=True)

    def _criar_cadeia_simples(self, system_message_content, human_message_content_template="{solicitacao_usuario}"):
        prompt_template = ChatPromptTemplate.from_messages([
            SystemMessagePromptTemplate.from_template(system_message_content),
            HumanMessagePromptTemplate.from_template(human_message_content_template)
        ])
        return LLMChain(llm=self.llm, prompt=prompt_template, verbose=False)

    def _criar_cadeia_conversacional(self, system_message_content, memoria_especifica, memory_key_placeholder="historico_chat"):
        prompt_template = ChatPromptTemplate.from_messages([
            SystemMessagePromptTemplate.from_template(system_message_content),
            MessagesPlaceholder(variable_name=memory_key_placeholder),
            HumanMessagePromptTemplate.from_template("{input_usuario}")
        ])
        return LLMChain(llm=self.llm, prompt=prompt_template, memory=memoria_especifica, verbose=False)

    # ***** M√âTODO DE MARKETING DIGITAL ATUALIZADO *****
    def marketing_digital_guiado(self):
        st.header("üöÄ Marketing Digital Interativo com IA")
        st.caption("Seu copiloto para criar estrat√©gias, posts, campanhas e mais!")
        st.markdown("---")

        marketing_files_info_for_prompt = []
        with st.sidebar:
            st.subheader("üìé Suporte para Marketing")
            uploaded_marketing_files = st.file_uploader(
                "Upload para Marketing (opcional):",
                accept_multiple_files=True,
                type=['png', 'jpg', 'jpeg', 'txt', 'md', 'pdf', 'csv', 'xlsx', 'docx', 'pptx', 'mp4', 'mov'],
                key="marketing_files_uploader_new_section_v4" # Chave atualizada
            )
            if uploaded_marketing_files:
                temp_marketing_files_info = []
                for up_file in uploaded_marketing_files:
                    temp_marketing_files_info.append({"name": up_file.name, "type": up_file.type, "size": up_file.size})
                if temp_marketing_files_info:
                    marketing_files_info_for_prompt = temp_marketing_files_info
                    st.success(f"{len(uploaded_marketing_files)} arquivo(s) de marketing carregado(s)!")
                    with st.expander("Ver arquivos de marketing"):
                        for finfo in marketing_files_info_for_prompt:
                            st.write(f"- {finfo['name']} ({finfo['type']})")
            st.markdown("---")

        main_action_key = "main_marketing_action_choice_new_v4" # Chave atualizada
        main_action = st.radio(
            "Ol√°! O que voc√™ quer fazer agora em marketing digital?",
            (
                "Selecione uma op√ß√£o...",
                "1 - Criar post para redes sociais ou e-mail",
                "2 - Criar campanha de marketing completa",
                "3 - Criar estrutura e conte√∫do para landing page",
                "4 - Criar estrutura e conte√∫do para site com IA",
                "5 - Encontrar meu cliente ideal (An√°lise de P√∫blico-Alvo)",
                "6 - Conhecer a concorr√™ncia (An√°lise Competitiva)"
            ),
            index=0, key=main_action_key
        )
        st.markdown("---")

        # Define platform names for constructing the list after submission
        platform_names_available = [
            "Instagram", "Facebook", "X (Twitter)", "WhatsApp", "TikTok", "Kwai",
            "YouTube (descri√ß√£o/roteiro)", "E-mail Marketing (lista pr√≥pria)",
            "E-mail Marketing (Campanha Google Ads)"
        ]

        if main_action == "1 - Criar post para redes sociais ou e-mail":
            st.subheader("‚ú® Criador de Posts com IA")
            form_key_post = "post_creator_form_new_v4" # Chave atualizada
            with st.form(form_key_post):
                # Estas vari√°veis receber√£o os valores SUBMETIDOS dos widgets
                submitted_select_all_state, submitted_platform_checkbox_widgets = _marketing_display_social_media_options("post_new_v4")
                post_details = _marketing_get_objective_details("post_new_v4", "post")
                submit_button_pressed = st.form_submit_button("üí° Gerar Post!")

            if submit_button_pressed:
                actual_selected_platforms = []
                if submitted_select_all_state: # Valor do checkbox "Selecionar Todos" ap√≥s submiss√£o
                    actual_selected_platforms = platform_names_available
                else:
                    for platform_name, is_selected_widget_var in submitted_platform_checkbox_widgets.items():
                        if is_selected_widget_var: # Valor do checkbox individual ap√≥s submiss√£o
                            actual_selected_platforms.append(platform_name)
                
                _marketing_handle_criar_post(marketing_files_info_for_prompt, post_details, actual_selected_platforms, self.llm)

            if 'generated_post_content_new' in st.session_state:
                _marketing_display_output_options(st.session_state.generated_post_content_new, "post_new_v4", "post_ia")

        elif main_action == "2 - Criar campanha de marketing completa":
            st.subheader("üåç Planejador de Campanhas de Marketing com IA")
            form_key_campaign = "campaign_creator_form_new_v4" # Chave atualizada
            with st.form(form_key_campaign):
                campaign_name = st.text_input("Nome da Campanha (para sua organiza√ß√£o):", key="campaign_name_new_v4")
                submitted_select_all_state_camp, submitted_platform_checkbox_widgets_camp = _marketing_display_social_media_options("campaign_new_v4")
                campaign_details_obj = _marketing_get_objective_details("campaign_new_v4", "campanha")
                campaign_duration = st.text_input("Dura√ß√£o Estimada da Campanha:", key="campaign_duration_new_v4")
                campaign_budget_approx = st.text_input("Or√ßamento Aproximado para Impulsionamento (opcional):", key="campaign_budget_new_v4")
                specific_kpis = st.text_area("KPIs mais importantes:", placeholder="Ex: N¬∫ de vendas, leads, CPC alvo.", key="campaign_kpis_new_v4")
                submit_button_pressed_camp = st.form_submit_button("üöÄ Gerar Plano de Campanha!")

            if submit_button_pressed_camp:
                actual_selected_platforms_camp = []
                if submitted_select_all_state_camp:
                    actual_selected_platforms_camp = platform_names_available
                else:
                    for platform_name, is_selected_widget_var in submitted_platform_checkbox_widgets_camp.items():
                        if is_selected_widget_var:
                            actual_selected_platforms_camp.append(platform_name)
                
                campaign_specifics_dict = {
                    "name": campaign_name, "duration": campaign_duration,
                    "budget": campaign_budget_approx, "kpis": specific_kpis
                }
                _marketing_handle_criar_campanha(marketing_files_info_for_prompt, campaign_details_obj, campaign_specifics_dict, actual_selected_platforms_camp, self.llm)

            if 'generated_campaign_content_new' in st.session_state:
                _marketing_display_output_options(st.session_state.generated_campaign_content_new, "campaign_new_v4", "campanha_ia")
        
        # ... (L√≥gica similar de tratamento de form para as outras se√ß√µes de marketing) ...

        elif main_action == "3 - Criar estrutura e conte√∫do para landing page":
            st.subheader("üìÑ Gerador de Estrutura para Landing Pages com IA")
            with st.form("landing_page_form_new_v4"): # Chave √∫nica
                lp_purpose = st.text_input("Principal objetivo da landing page:", key="lp_purpose_new_v4")
                lp_target_audience = st.text_input("Para quem √© esta landing page? (Persona)", key="lp_audience_new_v4")
                lp_main_offer = st.text_area("Oferta principal e irresist√≠vel:", key="lp_offer_new_v4")
                lp_key_benefits = st.text_area("3-5 principais benef√≠cios/transforma√ß√µes:", key="lp_benefits_new_v4")
                lp_cta = st.text_input("Chamada para a√ß√£o (CTA) principal:", key="lp_cta_new_v4")
                lp_visual_prefs = st.text_input("Prefer√™ncia de cores, estilo visual ou sites de refer√™ncia? (Opcional)", key="lp_visual_new_v4")
                submitted_lp = st.form_submit_button("üõ†Ô∏è Gerar Estrutura da LP!")

            if submitted_lp:
                lp_details_dict = {
                    "purpose": lp_purpose, "target_audience": lp_target_audience, "main_offer": lp_main_offer,
                    "key_benefits": lp_key_benefits, "cta": lp_cta, "visual_prefs": lp_visual_prefs
                }
                _marketing_handle_criar_landing_page(marketing_files_info_for_prompt, lp_details_dict, self.llm)

            if 'generated_lp_content_new' in st.session_state:
                st.subheader("üí° Estrutura e Conte√∫do Sugeridos para Landing Page:")
                st.markdown(st.session_state.generated_lp_content_new)
                st.download_button(label="üì• Baixar Sugest√µes da LP",data=st.session_state.generated_lp_content_new.encode('utf-8'),
                                   file_name="landing_page_sugestoes_ia_new.txt", mime="text/plain", key="download_lp_new_v4") 

        elif main_action == "4 - Criar estrutura e conte√∫do para site com IA":
            st.subheader("üèóÔ∏è Arquiteto de Sites com IA")
            with st.form("site_creator_form_new_v4"): 
                site_business_type = st.text_input("Tipo do seu neg√≥cio/empresa:", key="site_biz_type_new_v4")
                site_main_purpose = st.text_area("Principal objetivo do seu site:", key="site_purpose_new_v4")
                site_target_audience = st.text_input("P√∫blico principal do site:", key="site_audience_new_v4")
                site_essential_pages = st.text_area("P√°ginas essenciais (Ex: Home, Sobre, Servi√ßos):", key="site_pages_new_v4")
                site_key_features = st.text_area("Principais produtos/servi√ßos/diferenciais:", key="site_features_new_v4")
                site_brand_personality = st.text_input("Personalidade da sua marca:", key="site_brand_new_v4")
                site_visual_references = st.text_input("Prefer√™ncias de cores, estilo ou sites de refer√™ncia? (Opcional)", key="site_visual_ref_new_v4")
                submitted_site = st.form_submit_button("üèõÔ∏è Gerar Estrutura do Site!")
            
            if submitted_site:
                site_details_dict = {
                    "business_type": site_business_type, "main_purpose": site_main_purpose,
                    "target_audience": site_target_audience, "essential_pages": site_essential_pages,
                    "key_features": site_key_features, "brand_personality": site_brand_personality,
                    "visual_references": site_visual_references
                }
                _marketing_handle_criar_site(marketing_files_info_for_prompt, site_details_dict, self.llm)

            if 'generated_site_content_new' in st.session_state:
                st.subheader("üèõÔ∏è Estrutura e Conte√∫do Sugeridos para o Site:")
                st.markdown(st.session_state.generated_site_content_new)
                st.download_button(label="üì• Baixar Sugest√µes do Site",data=st.session_state.generated_site_content_new.encode('utf-8'),
                                   file_name="site_sugestoes_ia_new.txt", mime="text/plain",key="download_site_new_v4")

        elif main_action == "5 - Encontrar meu cliente ideal (An√°lise de P√∫blico-Alvo)":
            st.subheader("üéØ Decodificador de Clientes com IA")
            with st.form("find_client_form_new_v4"):
                fc_product_campaign = st.text_area("Produto/servi√ßo ou campanha para an√°lise:", key="fc_campaign_new_v4")
                fc_location = st.text_input("Cidade(s) ou regi√£o de alcance:", key="fc_location_new_v4")
                fc_budget = st.text_input("Verba aproximada para a√ß√£o/campanha? (Opcional)", key="fc_budget_new_v4")
                fc_age_gender = st.text_input("Faixa et√°ria e g√™nero predominante:", key="fc_age_gender_new_v4")
                fc_interests = st.text_area("Principais interesses, hobbies, dores, necessidades:", key="fc_interests_new_v4")
                fc_current_channels = st.text_area("Canais de marketing que j√° utiliza ou considera:", key="fc_channels_new_v4")
                fc_deep_research = st.checkbox("Habilitar 'Deep Research' (an√°lise mais aprofundada pela IA)", key="fc_deep_new_v4")
                submitted_fc = st.form_submit_button("üîç Encontrar Meu Cliente!")

            if submitted_fc:
                client_details_dict = {
                    "product_campaign": fc_product_campaign, "location": fc_location, "budget": fc_budget,
                    "age_gender": fc_age_gender, "interests": fc_interests,
                    "current_channels": fc_current_channels, "deep_research": fc_deep_research
                }
                _marketing_handle_encontre_cliente(marketing_files_info_for_prompt, client_details_dict, self.llm)

            if 'generated_client_analysis_new' in st.session_state:
                st.subheader("üïµÔ∏è‚Äç‚ôÇÔ∏è An√°lise de P√∫blico-Alvo e Recomenda√ß√µes:")
                st.markdown(st.session_state.generated_client_analysis_new)
                st.download_button(label="üì• Baixar An√°lise de P√∫blico",data=st.session_state.generated_client_analysis_new.encode('utf-8'),
                                   file_name="analise_publico_alvo_ia_new.txt", mime="text/plain",key="download_client_analysis_new_v4")
        
        elif main_action == "6 - Conhecer a concorr√™ncia (An√°lise Competitiva)":
            st.subheader("üßê Radar da Concorr√™ncia com IA")
            with st.form("competitor_analysis_form_new_v4"):
                ca_your_business = st.text_area("Descreva seu pr√≥prio neg√≥cio/produto para compara√ß√£o:", key="ca_your_biz_new_v4")
                ca_competitors_list = st.text_area("Liste seus principais concorrentes (nomes, sites, redes sociais):", key="ca_competitors_new_v4")
                ca_aspects_to_analyze = st.multiselect(
                    "Quais aspectos da concorr√™ncia analisar?",
                    ["Presen√ßa Online", "Tipos de Conte√∫do", "Comunica√ß√£o", "Pontos Fortes", "Pontos Fracos", "Pre√ßos (se observ√°vel)", "Engajamento"],
                    default=["Presen√ßa Online", "Pontos Fortes", "Pontos Fracos"], key="ca_aspects_new_v4"
                )
                submitted_ca = st.form_submit_button("üì° Analisar Concorrentes!")

            if submitted_ca:
                competitor_details_dict = {
                    "your_business": ca_your_business, "competitors_list": ca_competitors_list,
                    "aspects_to_analyze": ca_aspects_to_analyze
                }
                _marketing_handle_conheca_concorrencia(marketing_files_info_for_prompt, competitor_details_dict, self.llm)

            if 'generated_competitor_analysis_new' in st.session_state:
                st.subheader("üìä An√°lise da Concorr√™ncia e Insights:")
                st.markdown(st.session_state.generated_competitor_analysis_new)
                st.download_button(label="üì• Baixar An√°lise da Concorr√™ncia", data=st.session_state.generated_competitor_analysis_new.encode('utf-8'),
                                   file_name="analise_concorrencia_ia_new.txt",mime="text/plain",key="download_competitor_analysis_new_v4")

        elif main_action == "Selecione uma op√ß√£o...":
            st.info("üëã Bem-vindo √† se√ß√£o interativa de Marketing Digital com IA! Escolha uma das op√ß√µes acima para come√ßar.")
            logo_url_marketing_welcome = "https://i.imgur.com/7IIYxq1.png"
            st.image(logo_url_marketing_welcome, caption="Assistente PME Pro", width=200)


    def conversar_plano_de_negocios(self, input_usuario):
        system_message_plano = "Voc√™ √© o \"Assistente PME Pro\", um consultor de neg√≥cios especialista em IA. Sua tarefa √© ajudar um empreendedor a ESBO√áAR e depois DETALHAR um PLANO DE NEG√ìCIOS. Voc√™ faz perguntas UMA DE CADA VEZ para coletar informa√ß√µes. Use linguagem clara e seja encorajador.\n\n**FLUXO DA CONVERSA:**\n\n**IN√çCIO DA CONVERSA / PEDIDO INICIAL:**\nSe o usu√°rio indicar que quer criar um plano de neg√≥cios (ex: \"Crie meu plano de neg√≥cios\", \"Quero ajuda com meu plano\", \"sim\" para um bot√£o de iniciar plano), SUA PRIMEIRA PERGUNTA DEVE SER: \"Perfeito! Para come√ßarmos a esbo√ßar seu plano de neg√≥cios, qual √© o seu ramo de atua√ß√£o principal?\"\n\n**COLETA PARA O ESBO√áO:**\nAp√≥s saber o ramo, continue fazendo UMA PERGUNTA POR VEZ para obter informa√ß√µes para as seguintes se√ß√µes (n√£o precisa ser exatamente nesta ordem, mas cubra-as):\n1.  Nome da Empresa\n2.  Miss√£o da Empresa\n3.  Vis√£o da Empresa\n4.  Principais Objetivos\n5.  Produtos/Servi√ßos Principais\n6.  P√∫blico-Alvo Principal\n7.  Principal Diferencial\n8.  Ideias Iniciais de Marketing e Vendas\n9.  Ideias Iniciais de Opera√ß√µes\n10. Estimativas Financeiras Muito B√°sicas\n\n**GERA√á√ÉO DO ESBO√áO:**\nQuando voc√™ sentir que coletou informa√ß√µes suficientes para estas 10 √°reas, VOC√ä DEVE PERGUNTAR:\n\"Com as informa√ß√µes que reunimos at√© agora, voc√™ gostaria que eu montasse um primeiro ESBO√áO do seu plano de neg√≥cios? Ele ter√° as se√ß√µes principais que discutimos.\"\n\nSe o usu√°rio disser \"sim\":\n    - Gere um ESBO√áO do plano de neg√≥cios com as se√ß√µes: Sum√°rio Executivo, Descri√ß√£o da Empresa, Produtos e Servi√ßos, P√∫blico-Alvo e Diferenciais, Estrat√©gias Iniciais de Marketing e Vendas, Opera√ß√µes Iniciais, Panorama Financeiro Inicial.\n    - No final do esbo√ßo, ADICIONE: \"Este √© um esbo√ßo inicial para organizar suas ideias. Ele pode ser muito mais detalhado e aprofundado.\"\n    - ENT√ÉO, PERGUNTE: \"Este esbo√ßo inicial te ajuda a visualizar melhor? Gostaria de DETALHAR este plano de neg√≥cios agora? Podemos aprofundar cada se√ß√£o, e voc√™ poder√° me fornecer mais informa√ß√µes (e no futuro, at√© mesmo subir documentos).\"\n\n**DETALHAMENTO DO PLANO (SE O USU√ÅRIO ACEITAR):**\nSe o usu√°rio disser \"sim\" para detalhar:\n    - Responda com entusiasmo: \"√ìtimo! Para detalharmos, vamos focar em cada se√ß√£o do plano. Aplicaremos princ√≠pios de administra√ß√£o e marketing (como os de Chiavenato e Kotler) para enriquecer a an√°lise.\"\n    - ENT√ÉO, PERGUNTE: \"Em qual se√ß√£o do plano de neg√≥cios voc√™ gostaria de come√ßar a aprofundar ou fornecer mais detalhes? Por exemplo, 'An√°lise de Mercado', 'Estrat√©gias de Marketing Detalhadas', ou 'Proje√ß√µes Financeiras'?\"\n    - A partir da escolha, fa√ßa perguntas espec√≠ficas para aquela se√ß√£o."
        cadeia = self._criar_cadeia_conversacional(system_message_plano, self.memoria_plano_negocios, memory_key_placeholder="historico_chat_plano")
        resposta_ai_obj = cadeia.invoke({"input_usuario": input_usuario})
        return resposta_ai_obj['text'] if isinstance(resposta_ai_obj, dict) and 'text' in resposta_ai_obj else str(resposta_ai_obj)


    def calcular_precos_interativo(self, input_usuario, descricao_imagem_contexto=None):
        system_message_precos = f"""
        Voc√™ √© o "Assistente PME Pro", especialista em precifica√ß√£o com IA.
        Sua tarefa √© ajudar o usu√°rio a definir o pre√ßo de venda de um produto ou servi√ßo, atuando como um consultor que busca as informa√ß√µes necess√°rias.
        Voc√™ faz perguntas UMA DE CADA VEZ e guia o usu√°rio.
        {(f"Contexto da imagem que o usu√°rio enviou: '{descricao_imagem_contexto}'. Considere esta informa√ß√£o ao falar sobre o produto.") if descricao_imagem_contexto else ""}

        **FLUXO DA CONVERSA PARA PRECIFICAR:**

        **1. PERGUNTA INICIAL (SEMPRE FA√áA ESTA PRIMEIRO QUANDO O USU√ÅRIO ENTRAR NESTA FUNCIONALIDADE):**
            "Ol√°! Sou o Assistente PME Pro, pronto para te ajudar com a precifica√ß√£o. Para come√ßar, o produto ou servi√ßo que voc√™ quer precificar √© algo que voc√™ COMPRA E REVENDE, ou √© algo que sua empresa MESMA PRODUZ/CRIA?"

        **2. SE O USU√ÅRIO ESCOLHER "COMPRA E REVENDE":**
            a. PERGUNTE: "Entendido, √© para revenda. Qual √© o nome ou tipo espec√≠fico do produto que voc√™ revende?" (Ex: SSD Interno 1TB Western Digital Blue, Camiseta XYZ)
            b. PERGUNTE: "Qual o seu CUSTO DE AQUISI√á√ÉO por unidade deste produto? (Quanto voc√™ paga ao seu fornecedor por cada um)."
            c. PERGUNTE: "Em qual CIDADE e ESTADO (Ex: Juiz de Fora - MG) sua loja ou neg√≥cio principal opera? Isso nos ajudar√° a considerar o mercado."
            d. AP√ìS OBTER ESSAS INFORMA√á√ïES, DIGA:
                "Ok, tenho as informa√ß√µes b√°sicas: produto '[NOME DO PRODUTO INFORMADO PELO USU√ÅRIO]', seu custo de R$[VALOR DO CUSTO INFORMADO] em [CIDADE/ESTADO INFORMADO].
                Agora, o passo CRUCIAL √© entendermos o pre√ßo de mercado. **Vou te ajudar a analisar os pre√ßos praticados para produtos similares na sua regi√£o.** (No futuro, este app poder√° fazer buscas autom√°ticas na web, mas por enquanto, vamos analisar juntos com base no seu conhecimento e no que eu posso inferir).
                Para termos um ponto de partida, qual MARGEM DE LUCRO (em porcentagem, ex: 20%, 50%, 100%) voc√™ gostaria de ter sobre o seu custo de R$[VALOR DO CUSTO INFORMADO]? Ou voc√™ j√° tem um PRE√áO DE VENDA ALVO em mente?"
            e. QUANDO O USU√ÅRIO RESPONDER A MARGEM/PRE√áO ALVO:
                - Calcule o pre√ßo de venda sugerido (Custo / (1 - %MargemDesejada/100)) ou (Custo * (1 + %MarkupDesejado/100)). Explique o c√°lculo de forma simples.
                - APRESENTE O PRE√áO CALCULADO e diga: "Com base no seu custo e na margem desejada, o pre√ßo de venda sugerido seria R$ X.XX.
                  Para validar este pre√ßo, sugiro que voc√™ pesquise em pelo menos 3-5 concorrentes online e locais. Compare este pre√ßo calculado com os pre√ßos praticados. Se estiver muito diferente, precisaremos ajustar a margem ou reanalisar os custos e a estrat√©gia de precifica√ß√£o."
                - PERGUNTE: "Este pre√ßo inicial faz sentido? Quer simular com outra margem?"

        **3. SE O USU√ÅRIO ESCOLHER "PRODUZ/CRIA":**
            a. PERGUNTE: "Excelente! Para precificar seu produto/servi√ßo pr√≥prio, vamos detalhar os custos. Qual o nome do produto ou tipo de servi√ßo que voc√™ cria/oferece?"
            b. PERGUNTE sobre CUSTOS DIRETOS DE MATERIAL/INSUMOS: "Quais s√£o os custos diretos de material ou insumos que voc√™ gasta para produzir UMA unidade do produto ou para realizar UMA vez o servi√ßo? Por favor, liste os principais itens e seus custos."
            c. PERGUNTE sobre M√ÉO DE OBRA DIRETA: "Quanto tempo de trabalho (seu ou de funcion√°rios) √© gasto diretamente na produ√ß√£o de UMA unidade ou na presta√ß√£o de UMA vez o servi√ßo? E qual o custo estimado dessa m√£o de obra por unidade/servi√ßo?"
            d. PERGUNTE sobre CUSTOS FIXOS MENSAIS TOTAIS: "Quais s√£o seus custos fixOS mensais totais (aluguel, luz, internet, sal√°rios administrativos, etc.) que precisam ser cobertos?"
            e. PERGUNTE sobre VOLUME DE PRODU√á√ÉO/VENDAS MENSAL ESPERADO: "Quantas unidades desse produto voc√™ espera vender por m√™s, ou quantos servi√ßos espera prestar? Isso nos ajudar√° a ratear os custos fixos por unidade."
            f. AP√ìS OBTER ESSAS INFORMA√á√ïES, explique: "Com esses dados, podemos calcular o Custo Total Unit√°rio. Depois, adicionaremos sua margem de lucro desejada. Existem m√©todos como Markup ou Margem de Contribui√ß√£o que podemos usar."
            g. PERGUNTE: "Qual MARGEM DE LUCRO (em porcentagem) voc√™ gostaria de adicionar sobre o custo total de produ√ß√£o para definirmos o pre√ßo de venda?"
            h. QUANDO O USU√ÅRIO RESPONDER A MARGEM:
                - Calcule o pre√ßo de venda sugerido.
                - APRESENTE O PRE√áO CALCULADO e diga: "Com base nos seus custos e na margem desejada, o pre√ßo de venda sugerido seria R$ X.XX."
                - PERGUNTE: "Este pre√ßo cobre todos os seus custos e te d√° a lucratividade esperada? Como ele se compara ao que voc√™ imagina que o mercado pagaria?"

        **FINALIZA√á√ÉO DA INTERA√á√ÉO (PARA AMBOS OS CASOS):**
        - Ap√≥s uma sugest√£o de pre√ßo, sempre ofere√ßa: "Podemos refinar este c√°lculo, simular outros cen√°rios ou discutir estrat√©gias de precifica√ß√£o com base nos princ√≠pios de marketing de Kotler?"

        Mantenha a conversa fluida e profissional, mas acess√≠vel. O objetivo √© entregar o 'bolo pronto com a velinha', ou seja, uma an√°lise e sugest√£o de pre√ßo fundamentada.
        """
        cadeia = self._criar_cadeia_conversacional(system_message_precos, self.memoria_calculo_precos, memory_key_placeholder="historico_chat_precos")
        resposta_ai_obj = cadeia.invoke({"input_usuario": input_usuario})
        return resposta_ai_obj['text'] if isinstance(resposta_ai_obj, dict) and 'text' in resposta_ai_obj else str(resposta_ai_obj)

    def gerar_ideias_para_negocios(self, input_usuario, contexto_arquivos=None):
        system_message_ideias = f"""
        Voc√™ √© o "Assistente PME Pro", um consultor de neg√≥cios especialista em IA, com foco em INOVA√á√ÉO e SOLU√á√ÉO DE PROBLEMAS.
        Sua tarefa √© ajudar empreendedores a gerar ideias criativas e pr√°ticas para seus neg√≥cios, seja para resolver dores, encontrar novas oportunidades ou inovar.
        Voc√™ faz perguntas UMA DE CADA VEZ para entender o contexto do usu√°rio.
        {(f"INFORMA√á√ÉO ADICIONAL FORNECIDA PELO USU√ÅRIO (pode ser de arquivos que ele carregou): '{contexto_arquivos}'. Por favor, CONSIDERE esta informa√ß√£o ao interagir e gerar ideias. Se for um arquivo de texto, use o conte√∫do. Se for uma imagem, pe√ßa ao usu√°rio para descrever como ela se relaciona com o desafio dele.") if contexto_arquivos else ""}

        **FLUXO DA CONVERSA:**

        **IN√çCIO DA CONVERSA / PEDIDO INICIAL:**
        - Se o usu√°rio indicar que quer ideias (ex: "Preciso de ideias para aumentar vendas", "Estou com dificuldade em X", "Como posso inovar meu servi√ßo Y?") ou simplesmente iniciar a conversa nesta se√ß√£o,
          SUA PRIMEIRA PERGUNTA DEVE SER (de forma emp√°tica e aberta): "Ol√°! Que bom que voc√™ quer explorar novas ideias. {('Recebi as informa√ß√µes dos arquivos que voc√™ carregou. ' if contexto_arquivos else 'Voc√™ tamb√©m pode carregar arquivos de texto ou imagens se achar que ajudam a dar contexto. ')} Para que eu possa te ajudar da melhor forma, conte-me um pouco mais sobre o principal desafio que voc√™ est√° enfrentando, a dor que sente no seu neg√≥cio, ou a √°rea espec√≠fica em que voc√™ gostaria de inovar ou receber sugest√µes."

        **EXPLORA√á√ÉO DO PROBLEMA/OPORTUNIDADE (SE NECESS√ÅRIO):**
        - Ap√≥s a primeira descri√ß√£o do usu√°rio, se precisar de mais clareza (e considerando o contexto de arquivos, se houver), fa√ßa UMA ou DUAS perguntas abertas para aprofundar, como:
              - "Interessante. Para eu entender melhor a dimens√£o disso, [fa√ßa uma pergunta espec√≠fica sobre o que ele disse ou o contexto do arquivo]?"
              - "Quais s√£o os principais obst√°culos ou dificuldades que voc√™ enfrenta atualmente em rela√ß√£o a isso?"
        - Ap√≥s o usu√°rio responder, ou se ele j√° deu um bom contexto (especialmente se forneceu arquivos), diga:
          "Entendido. Com base no que voc√™ me contou sobre [resuma brevemente o problema/dor/objetivo do usu√°rio, mencionando se informa√ß√µes de arquivos foram consideradas], vou gerar algumas ideias e sugest√µes para voc√™, aplicando princ√≠pios de marketing e administra√ß√£o para encontrar solu√ß√µes eficazes."
        - ENT√ÉO, gere de 3 a 5 ideias ou abordagens distintas e criativas. Para cada ideia:
              a. D√™ um **Nome ou T√≠tulo Curto e Chamativo**.
              b. **Descreva a Ideia:** Explique o conceito de forma clara e concisa (1-3 frases).
              c. **Benef√≠cio Principal:** Destaque o principal benef√≠cio ou solu√ß√£o que essa ideia traria.
              d. **Primeiro Passo Simples (Opcional, mas bom):** Se apropriado, sugira um primeiro passo muito pequeno e pr√°tico que o usu√°rio poderia dar para come√ßar a explorar essa ideia.

        **DISCUSS√ÉO E REFINAMENTO:**
        - Ap√≥s apresentar as ideias, PERGUNTE: "O que voc√™ achou dessas primeiras sugest√µes? Alguma delas te inspira ou parece particularmente promissora para o seu caso? Gostaria de explorar alguma delas com mais detalhes, ou talvez refinar o foco para gerarmos mais alternativas?"
        """
        cadeia = self._criar_cadeia_conversacional(system_message_ideias, self.memoria_gerador_ideias, memory_key_placeholder="historico_chat_ideias")
        resposta_ai_obj = cadeia.invoke({"input_usuario": input_usuario})
        return resposta_ai_obj['text'] if isinstance(resposta_ai_obj, dict) and 'text' in resposta_ai_obj else str(resposta_ai_obj)

# --- Fun√ß√µes Utilit√°rias de Chat ---
def inicializar_ou_resetar_chat(area_chave, mensagem_inicial_ia, memoria_agente_instancia):
    chat_display_key = f"chat_display_{area_chave}"
    st.session_state[chat_display_key] = [{"role": "assistant", "content": mensagem_inicial_ia}]
    if memoria_agente_instancia:
        memoria_agente_instancia.clear()
        if hasattr(memoria_agente_instancia.chat_memory, 'add_ai_message'):
            memoria_agente_instancia.chat_memory.add_ai_message(mensagem_inicial_ia)
        elif hasattr(memoria_agente_instancia.chat_memory, 'messages'):
             memoria_agente_instancia.chat_memory.messages.append(AIMessage(content=mensagem_inicial_ia))

    if area_chave == "calculo_precos":
        st.session_state.last_uploaded_image_info_pricing = None
        st.session_state.processed_image_id_pricing = None
    elif area_chave == "gerador_ideias":
        st.session_state.uploaded_file_info_ideias_for_prompt = None
        st.session_state.processed_file_id_ideias = None

def exibir_chat_e_obter_input(area_chave, prompt_placeholder, funcao_conversa_agente, **kwargs_funcao_agente):
    chat_display_key = f"chat_display_{area_chave}"
    if chat_display_key not in st.session_state:
        st.session_state[chat_display_key] = []

    for msg_info in st.session_state[chat_display_key]:
        with st.chat_message(msg_info["role"]):
            st.markdown(msg_info["content"])

    prompt_usuario = st.chat_input(prompt_placeholder, key=f"chat_input_{area_chave}_v6_merged_v2") # Nova chave

    if prompt_usuario:
        st.session_state[chat_display_key].append({"role": "user", "content": prompt_usuario})
        with st.chat_message("user"):
            st.markdown(prompt_usuario)

        if area_chave == "calculo_precos": st.session_state.user_input_processed_pricing = True
        elif area_chave == "gerador_ideias": st.session_state.user_input_processed_ideias = True

        with st.spinner("Assistente PME Pro est√° processando... ü§î"):
            resposta_ai = funcao_conversa_agente(prompt_usuario, **kwargs_funcao_agente)

        st.session_state[chat_display_key].append({"role": "assistant", "content": resposta_ai})
        st.rerun()

# --- Interface Principal Streamlit ---
if llm_model_instance:
    if 'agente_pme' not in st.session_state:
        st.session_state.agente_pme = AssistentePMEPro(llm_passed_model=llm_model_instance)
    agente = st.session_state.agente_pme

    URL_DO_SEU_LOGO = "https://i.imgur.com/7IIYxq1.png"
    st.sidebar.image(URL_DO_SEU_LOGO, width=200)

    st.sidebar.title("Assistente PME Pro")
    st.sidebar.markdown("IA para seu Neg√≥cio Decolar!")
    st.sidebar.markdown("---")

    opcoes_menu = {
        "P√°gina Inicial": "pagina_inicial",
        "Marketing Digital com IA (Guia)": "marketing_guiado",
        "Elaborar Plano de Neg√≥cios com IA": "plano_negocios",
        "C√°lculo de Pre√ßos Inteligente": "calculo_precos",
        "Gerador de Ideias para Neg√≥cios": "gerador_ideias"
    }

    if 'area_selecionada' not in st.session_state:
        st.session_state.area_selecionada = "P√°gina Inicial"

    for nome_menu_init, chave_secao_init in opcoes_menu.items():
        if chave_secao_init and chave_secao_init != "marketing_guiado" and f"chat_display_{chave_secao_init}" not in st.session_state :
            st.session_state[f"chat_display_{chave_secao_init}"] = []

    if 'start_marketing_form' not in st.session_state: st.session_state.start_marketing_form = False
    if 'last_uploaded_image_info_pricing' not in st.session_state: st.session_state.last_uploaded_image_info_pricing = None
    if 'processed_image_id_pricing' not in st.session_state: st.session_state.processed_image_id_pricing = None
    if 'user_input_processed_pricing' not in st.session_state: st.session_state.user_input_processed_pricing = False
    if 'uploaded_file_info_ideias_for_prompt' not in st.session_state: st.session_state.uploaded_file_info_ideias_for_prompt = None
    if 'processed_file_id_ideias' not in st.session_state: st.session_state.processed_file_id_ideias = None
    if 'user_input_processed_ideias' not in st.session_state: st.session_state.user_input_processed_ideias = False

    # Controle de re-inicializa√ß√£o de chat
    if 'previous_area_selecionada_for_chat_init' not in st.session_state:
        st.session_state['previous_area_selecionada_for_chat_init'] = None


    area_selecionada_label = st.sidebar.radio(
        "Como posso te ajudar hoje?",
        options=list(opcoes_menu.keys()),
        key='sidebar_selection_v18_final', # Nova chave
        index=list(opcoes_menu.keys()).index(st.session_state.area_selecionada) if st.session_state.area_selecionada in opcoes_menu else 0
    )

    if area_selecionada_label != st.session_state.area_selecionada: # Mudan√ßa de aba
        st.session_state.area_selecionada = area_selecionada_label
        # Limpar estados espec√≠ficos de marketing ao sair da se√ß√£o de marketing
        if area_selecionada_label != "Marketing Digital com IA (Guia)":
            for key in list(st.session_state.keys()): # Iterar sobre uma c√≥pia das chaves
                if key.startswith("generated_") and key.endswith("_new"):
                    del st.session_state[key]
                if "_all_social_checkbox_ui_v3" in key: # Limpar estado do "selecionar todos"
                    st.session_state[key] = False
        st.rerun() # For√ßar rerun para atualizar a interface e l√≥gica de inicializa√ß√£o de chat

    current_section_key = opcoes_menu.get(st.session_state.area_selecionada)

    # Inicializar chat para se√ß√µes conversacionais se necess√°rio (ap√≥s o rerun da sele√ß√£o de aba)
    if current_section_key not in ["pagina_inicial", "marketing_guiado"]:
        if st.session_state.area_selecionada != st.session_state.get('previous_area_selecionada_for_chat_init_processed'):
            chat_display_key_nav = f"chat_display_{current_section_key}"
            msg_inicial_nav = ""
            memoria_agente_nav = None
            if current_section_key == "plano_negocios":
                msg_inicial_nav = "Ol√°! Sou seu Assistente PME Pro. Se voc√™ gostaria de criar um plano de neg√≥cios, pode me dizer 'sim' ou 'vamos come√ßar'!"
                memoria_agente_nav = agente.memoria_plano_negocios
            elif current_section_key == "calculo_precos":
                msg_inicial_nav = "Ol√°! Bem-vindo ao assistente de C√°lculo de Pre√ßos. Para come√ßar, voc√™ quer precificar um produto que voc√™ COMPRA E REVENDE, ou um produto/servi√ßo que voc√™ MESMO PRODUZ/CRIA?"
                memoria_agente_nav = agente.memoria_calculo_precos
            elif current_section_key == "gerador_ideias":
                msg_inicial_nav = "Ol√°! Sou o Assistente PME Pro. Estou aqui para te ajudar a ter novas ideias para o seu neg√≥cio. Conte-me um pouco sobre um desafio, uma dor ou uma √°rea que voc√™ gostaria de inovar."
                memoria_agente_nav = agente.memoria_gerador_ideias
            
            if msg_inicial_nav and memoria_agente_nav:
                inicializar_ou_resetar_chat(current_section_key, msg_inicial_nav, memoria_agente_nav)
            st.session_state['previous_area_selecionada_for_chat_init_processed'] = st.session_state.area_selecionada


    if current_section_key == "pagina_inicial":
        st.markdown("<div style='text-align: center;'><h1>üöÄ Bem-vindo ao seu Assistente PME Pro!</h1></div>", unsafe_allow_html=True)
        st.markdown("<div style='text-align: center;'><p style='font-size: 1.1em;'>Sou seu parceiro de IA pronto para ajudar sua pequena ou m√©dia empresa a crescer e se organizar melhor.</p></div>", unsafe_allow_html=True)
        st.markdown("<div style='text-align: center;'><p style='font-size: 1.1em;'>Use o menu √† esquerda para explorar as ferramentas dispon√≠veis.</p></div>", unsafe_allow_html=True)
        st.markdown("---")
        st.markdown(f"<div style='text-align: center;'><img src='{URL_DO_SEU_LOGO}' alt='Logo Assistente PME Pro' width='200'></div>", unsafe_allow_html=True)
        st.markdown("---")

        num_botoes_funcionais = len(opcoes_menu) -1
        if num_botoes_funcionais > 0 :
            num_cols_render = min(num_botoes_funcionais, 4)
            cols_botoes_pg_inicial = st.columns(num_cols_render)
            btn_idx_pg_inicial = 0
            for nome_menu_btn_pg, chave_secao_btn_pg in opcoes_menu.items():
                if chave_secao_btn_pg != "pagina_inicial":
                    col_para_botao_pg = cols_botoes_pg_inicial[btn_idx_pg_inicial % num_cols_render]
                    button_label_pg = nome_menu_btn_pg.split(" com IA")[0].split(" para ")[0].replace("Elaborar ", "").replace(" Inteligente","").replace(" (Guia)","")
                    if col_para_botao_pg.button(button_label_pg, key=f"btn_goto_{chave_secao_btn_pg}_v11_final", use_container_width=True): # Chave atualizada
                        st.session_state.area_selecionada = nome_menu_btn_pg
                        st.rerun() # For√ßa o rerun para que a l√≥gica de inicializa√ß√£o de chat no topo seja acionada
                    btn_idx_pg_inicial +=1
            st.balloons()

    elif current_section_key == "marketing_guiado":
        agente.marketing_digital_guiado()

    elif current_section_key == "plano_negocios":
        st.header("üìù Elaborando seu Plano de Neg√≥cios com IA")
        st.caption("Converse comigo para construirmos seu plano passo a passo.")
        exibir_chat_e_obter_input(current_section_key, "Sua resposta ou diga 'Crie meu plano de neg√≥cios'", agente.conversar_plano_de_negocios)
        if st.sidebar.button("Reiniciar Plano de Neg√≥cios", key="btn_reset_plano_v7_final"): # Chave atualizada
            inicializar_ou_resetar_chat(current_section_key, "Ok, vamos recome√ßar seu plano de neg√≥cios! Se voc√™ gostaria de criar um plano de neg√≥cios, pode me dizer 'sim' ou 'vamos come√ßar'!", agente.memoria_plano_negocios)
            st.rerun()

    elif current_section_key == "calculo_precos":
        st.header("üí≤ C√°lculo de Pre√ßos Inteligente com IA")
        st.caption("Vamos definir os melhores pre√ßos para seus produtos ou servi√ßos!")

        uploaded_image = st.file_uploader("Envie uma imagem do produto (opcional):", type=["png", "jpg", "jpeg"], key="preco_img_uploader_v8_final") # Chave atualizada
        descricao_imagem_para_ia = None
        if uploaded_image is not None:
            if st.session_state.get('processed_image_id_pricing') != uploaded_image.id:
                try:
                    st.image(Image.open(uploaded_image), caption=f"Imagem: {uploaded_image.name}", width=150)
                    descricao_imagem_para_ia = f"O usu√°rio carregou uma imagem chamada '{uploaded_image.name}'. Considere esta informa√ß√£o."
                    st.session_state.last_uploaded_image_info_pricing = descricao_imagem_para_ia
                    st.session_state.processed_image_id_pricing = uploaded_image.id
                    st.info(f"Imagem '{uploaded_image.name}' pronta para ser considerada no pr√≥ximo di√°logo.")
                except Exception as e:
                    st.error(f"Erro ao processar a imagem: {e}")
                    st.session_state.last_uploaded_image_info_pricing = None
                    st.session_state.processed_image_id_pricing = None

        kwargs_preco_chat = {}
        current_image_context = st.session_state.get('last_uploaded_image_info_pricing')
        if current_image_context:
                kwargs_preco_chat['descricao_imagem_contexto'] = current_image_context

        exibir_chat_e_obter_input(current_section_key, "Sua resposta ou descreva o produto/servi√ßo", agente.calcular_precos_interativo, **kwargs_preco_chat)

        if 'user_input_processed_pricing' in st.session_state and st.session_state.user_input_processed_pricing:
            if st.session_state.get('last_uploaded_image_info_pricing'):
                    st.session_state.last_uploaded_image_info_pricing = None
            st.session_state.user_input_processed_pricing = False

        if st.sidebar.button("Reiniciar C√°lculo de Pre√ßos", key="btn_reset_precos_v8_final"): # Chave atualizada
            inicializar_ou_resetar_chat(current_section_key, "Ok, vamos come√ßar um novo c√°lculo de pre√ßos! Voc√™ quer precificar um produto que voc√™ COMPRA E REVENDE, ou um produto/servi√ßo que voc√™ MESMO PRODUZ/CRIA?", agente.memoria_calculo_precos)
            st.rerun()

    elif current_section_key == "gerador_ideias":
        st.header("üí° Gerador de Ideias para seu Neg√≥cio com IA")
        st.caption("Descreva seus desafios ou √°reas onde busca inova√ß√£o, e vamos encontrar solu√ß√µes juntos!")

        uploaded_files_ideias_ui = st.file_uploader(
            "Envie arquivos com informa√ß√µes (.txt, .png, .jpg):",
            type=["txt", "png", "jpg", "jpeg"],
            accept_multiple_files=True,
            key="ideias_file_uploader_v3_final" # Chave atualizada
        )

        contexto_para_ia_ideias_local = None
        if uploaded_files_ideias_ui:
            current_file_signature = "-".join(sorted([f"{f.name}-{f.size}" for f in uploaded_files_ideias_ui]))
            if st.session_state.get('processed_file_id_ideias') != current_file_signature or not st.session_state.get('uploaded_file_info_ideias_for_prompt'):
                text_contents_ui = []
                image_info_ui = []
                for uploaded_file_item in uploaded_files_ideias_ui:
                    try:
                        if uploaded_file_item.type == "text/plain":
                            file_content_ui = uploaded_file_item.read().decode("utf-8")
                            text_contents_ui.append(f"Conte√∫do do arquivo de texto '{uploaded_file_item.name}':\n{file_content_ui[:2000]}...")
                        elif uploaded_file_item.type in ["image/png", "image/jpeg"]:
                            st.image(Image.open(uploaded_file_item), caption=f"Imagem: {uploaded_file_item.name}", width=100)
                            image_info_ui.append(f"O usu√°rio tamb√©m carregou uma imagem chamada '{uploaded_file_item.name}'.")
                    except Exception as e:
                        st.error(f"Erro ao processar o arquivo '{uploaded_file_item.name}': {e}")

                full_context_ui = ""
                if text_contents_ui: full_context_ui += "\n\n--- CONTE√öDO DE ARQUIVOS DE TEXTO ---\n" + "\n\n".join(text_contents_ui)
                if image_info_ui: full_context_ui += "\n\n--- INFORMA√á√ÉO SOBRE IMAGENS CARREGADAS ---\n" + "\n".join(image_info_ui)

                if full_context_ui:
                    st.session_state.uploaded_file_info_ideias_for_prompt = full_context_ui.strip()
                    contexto_para_ia_ideias_local = st.session_state.uploaded_file_info_ideias_for_prompt
                    st.info("Arquivo(s) pronto(s) para serem considerados no pr√≥ximo di√°logo.")
                else:
                    st.session_state.uploaded_file_info_ideias_for_prompt = None
                st.session_state.processed_file_id_ideias = current_file_signature
            else:
                contexto_para_ia_ideias_local = st.session_state.get('uploaded_file_info_ideias_for_prompt')

        kwargs_ideias_chat_ui = {}
        if contexto_para_ia_ideias_local:
            kwargs_ideias_chat_ui['contexto_arquivos'] = contexto_para_ia_ideias_local

        exibir_chat_e_obter_input(current_section_key, "Descreva seu desafio ou pe√ßa ideias:", agente.gerar_ideias_para_negocios, **kwargs_ideias_chat_ui)

        if 'user_input_processed_ideias' in st.session_state and st.session_state.user_input_processed_ideias:
            st.session_state.user_input_processed_ideias = False

        if st.sidebar.button("Nova Sess√£o de Ideias", key="btn_reset_ideias_v4_final"): # Chave atualizada
            inicializar_ou_resetar_chat(current_section_key, "Ok, vamos come√ßar uma nova busca por ideias! Conte-me sobre um novo desafio, dor ou √°rea para inovar.", agente.memoria_gerador_ideias)
            st.rerun()
else:
    st.error("üö® O Assistente PME Pro n√£o p√¥de ser iniciado. Verifique a API Key e o modelo LLM.")

st.sidebar.markdown("---")
st.sidebar.info("Desenvolvido por Yaakov Israel com AI Google")   
