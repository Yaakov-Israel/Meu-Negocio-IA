import streamlit as st
import os
from langchain_google_genai import ChatGoogleGenerativeAI
from langchain.prompts import ChatPromptTemplate, SystemMessagePromptTemplate, HumanMessagePromptTemplate, MessagesPlaceholder
from langchain.chains import LLMChain
from langchain.memory import ConversationBufferMemory
from langchain.schema import HumanMessage, AIMessage
import google.generativeai as genai
from PIL import Image
import streamlit_firebase_auth as st_auth # NOVA IMPORTA√á√ÉO

# --- Configura√ß√£o da P√°gina Streamlit ---
st.set_page_config(
    page_title="Assistente PME Pro",
    layout="wide",
    initial_sidebar_state="expanded",
    page_icon="üöÄ"
)

# --- IN√çCIO DA SE√á√ÉO DE AUTENTICA√á√ÉO FIREBASE ---
try:
    # Tenta carregar a configura√ß√£o do Firebase dos segredos
    firebase_config = st.secrets["firebase_config"]
    
    # Inicializa o objeto de autentica√ß√£o
    # Voc√™ pode adicionar um nome para o cookie e uma chave se quiser personalizar,
    # mas para come√ßar, apenas a configura√ß√£o do Firebase √© suficiente.
    # Exemplo com cookie (se voc√™ criar uma se√ß√£o [cookie_auth_firebase] nos seus segredos):
    # auth = st_auth.Authenticate(
    # firebase_config,
    # st.secrets["cookie_auth_firebase"]["name"],
    # st.secrets["cookie_auth_firebase"]["key"],
    # st.secrets["cookie_auth_firebase"]["expiry_days"],
    # )
    #
    # Para um in√≠cio mais simples, focando apenas no login:
    auth = st_auth.Authenticate(config=firebase_config)

except KeyError as e:
    st.error(f"üö® ERRO: Configura√ß√£o '[firebase_config]' n√£o encontrada nos Segredos (Secrets) do Streamlit. Detalhe: {e}")
    st.info("Adicione a se√ß√£o [firebase_config] com todas as chaves (apiKey, authDomain, etc.) aos Segredos do seu app no painel do Streamlit Community Cloud.")
    st.stop()
except Exception as e:
    st.error(f"üö® ERRO ao inicializar o autenticador Firebase: {e}")
    st.stop()

# Renderiza o widget de login/registro e obt√©m o status
# O widget em si tem op√ß√µes para "Login", "Register", "Forgot Password"
# e login com provedores (Google, se configurado e o componente suportar diretamente)
auth.login() # Isso vai renderizar o formul√°rio de login e processar os dados

# Verificando o status da autentica√ß√£o
if not st.session_state.get("authentication_status"):
    # Se n√£o estiver autenticado, pode mostrar uma mensagem ou apenas deixar o formul√°rio de login vis√≠vel.
    # O pr√≥prio auth.login() j√° mostra o formul√°rio, ent√£o n√£o precisamos adicionar muito aqui
    # a menos que queira uma mensagem customizada.
    # st.info("Por favor, fa√ßa login ou registre-se para acessar o Assistente PME Pro.")
    st.stop() # Impede a execu√ß√£o do restante do app se n√£o estiver logado

# Se chegou aqui, o usu√°rio est√° autenticado
st.sidebar.success(f"Bem-vindo, {st.session_state.get('username', 'Usu√°rio')}!")
if auth.logout("Logout", "sidebar"): # Adiciona bot√£o de logout na sidebar
    # A fun√ß√£o logout retorna True se o bot√£o foi clicado e o logout foi bem-sucedido
    # O pr√≥prio componente deve lidar com a limpeza do session_state relacionado √† autentica√ß√£o
    st.success("Logout realizado com sucesso!")
    st.experimental_rerun() # For√ßa o re-run para voltar √† tela de login

# --- FIM DA SE√á√ÉO DE AUTENTICA√á√ÉO FIREBASE ---


# O restante do seu c√≥digo do app S√ì RODA SE O USU√ÅRIO ESTIVER AUTENTICADO
# (Devido ao st.stop() acima se n√£o estiver autenticado)

# --- Carregar API Key e Configurar Modelo LLM ---
GOOGLE_API_KEY = None
llm_model_instance = None

try:
    GOOGLE_API_KEY = st.secrets["GOOGLE_API_KEY"]
except KeyError: # Este erro j√° foi tratado acima se firebase_config tamb√©m estiver faltando
    if not firebase_config: # S√≥ mostra se o erro da API key for o √∫nico
        st.error("üö® ERRO: Chave API 'GOOGLE_API_KEY' n√£o encontrada nos Segredos (Secrets) do Streamlit.")
        st.info("Adicione sua GOOGLE_API_KEY aos Segredos do seu app no painel do Streamlit Community Cloud.")
        st.stop()
# A exce√ß√£o FileNotFoundError √© menos prov√°vel no Cloud, mas mantida por seguran√ßa
except FileNotFoundError: 
    GOOGLE_API_KEY = os.environ.get("GOOGLE_API_KEY")
    if not GOOGLE_API_KEY:
        st.error("üö® ERRO: Chave API n√£o encontrada nos Segredos do Streamlit nem como vari√°vel de ambiente.")
        st.info("Configure GOOGLE_API_KEY nos Segredos do Streamlit Cloud ou defina como vari√°vel de ambiente local.")
        st.stop()

if not GOOGLE_API_KEY or not GOOGLE_API_KEY.strip():
    # Se firebase_config estava presente mas GOOGLE_API_KEY n√£o, este erro ser√° mostrado.
    # Se ambos faltarem, o erro do firebase_config (ou do auth init) aparecer√° primeiro.
    if firebase_config: # S√≥ mostra se o erro da API key √© o problema principal agora
      st.error("üö® ERRO: GOOGLE_API_KEY n√£o foi carregada ou est√° vazia.")
      st.stop()
else:
    try:
        genai.configure(api_key=GOOGLE_API_KEY)
        llm_model_instance = ChatGoogleGenerativeAI(model="gemini-1.5-flash",
                                                 temperature=0.75,
                                                 google_api_key=GOOGLE_API_KEY,
                                                 convert_system_message_to_human=True) # Mantido por enquanto
        st.sidebar.success("‚úÖ Modelo LLM (Gemini) inicializado!") # Isso s√≥ aparecer√° se o LLM iniciar ap√≥s o login
    except Exception as e:
        st.error(f"üò• ERRO AO INICIALIZAR O MODELO LLM DO GOOGLE: {e}")
        st.info("Verifique sua chave API, se a 'Generative Language API' est√° ativa no Google Cloud e suas cotas.")
        st.stop()

# --- FUN√á√ïES AUXILIARES PARA MARKETING DIGITAL (Objetivos e Output) ---
# (Seu c√≥digo de _marketing_get_objective_details, _marketing_display_output_options, etc. permanece aqui)
# ... seu c√≥digo de fun√ß√µes de marketing ...
def _marketing_get_objective_details(section_key, type_of_creation="post/campanha"):
    st.subheader(f"Detalhes para Orientar a Cria√ß√£o do(a) {type_of_creation.capitalize()}:")
    details = {}
    key_suffix = "_v15_final" 
    details["objective"] = st.text_area(
        f"Qual o principal objetivo com est(e/a) {type_of_creation}?",
        key=f"{section_key}_obj_new{key_suffix}" 
    )
    details["target_audience"] = st.text_input("Quem voc√™ quer alcan√ßar?", key=f"{section_key}_audience_new{key_suffix}")
    details["product_service"] = st.text_area("Qual produto ou servi√ßo principal voc√™ est√° promovendo?", key=f"{section_key}_product_new{key_suffix}")
    details["key_message"] = st.text_area("Qual mensagem chave voc√™ quer comunicar?", key=f"{section_key}_message_new{key_suffix}")
    details["usp"] = st.text_area("O que torna seu produto/servi√ßo especial (USP)?", key=f"{section_key}_usp_new{key_suffix}")
    details["style_tone"] = st.selectbox(
        "Qual o tom/estilo da comunica√ß√£o?",
        ("Profissional e direto", "Amig√°vel e informal", "Criativo e inspirador", "Urgente e promocional", "Engra√ßado e leve", "Educacional e informativo"),
        key=f"{section_key}_tone_new{key_suffix}"
    )
    details["extra_info"] = st.text_area("Alguma informa√ß√£o adicional/CTA?", key=f"{section_key}_extra_new{key_suffix}")
    return details

def _marketing_display_output_options(generated_content, section_key, file_name_prefix="conteudo_gerado"):
    st.subheader("üéâ Resultado da IA e Pr√≥ximos Passos:")
    st.markdown(generated_content)
    key_suffix = "_v15_final"
    st.download_button(
        label="üì• Baixar Conte√∫do Gerado",
        data=generated_content.encode('utf-8'),
        file_name=f"{file_name_prefix}_{section_key}_new.txt",
        mime="text/plain",
        key=f"download_{section_key}_new{key_suffix}"
    )
    cols_actions = st.columns(2)
    with cols_actions[0]:
        if st.button("üîó Copiar para Compartilhar (Simulado)", key=f"{section_key}_share_btn_new{key_suffix}"):
            st.success("Conte√∫do pronto para ser copiado e compartilhado nas suas redes ou e-mail!")
            st.caption("Lembre-se de adaptar para cada plataforma, se necess√°rio.")
    with cols_actions[1]:
        if st.button("üóìÔ∏è Simular Agendamento", key=f"{section_key}_schedule_btn_new{key_suffix}"):
            st.info("Agendamento simulado. Para agendamento real, use ferramentas como Meta Business Suite, Hootsuite, mLabs, ou a fun√ß√£o de programa√ß√£o do seu servi√ßo de e-mail marketing.")

# --- HANDLER FUNCTIONS ---
# CORRE√á√ÉO DOS BUGS NAS CHAVES key_for_select_all_...
def _marketing_handle_criar_post(uploaded_files_info, details_dict, selected_platforms_list, llm):
    if not selected_platforms_list: st.warning("Por favor, selecione pelo menos uma plataforma."); return
    if not details_dict["objective"]: st.warning("Por favor, descreva o objetivo do post."); return
    with st.spinner("ü§ñ A IA est√° criando seu post... Aguarde!"):
        prompt_parts = [
            "**Instru√ß√£o para IA:** Voc√™ √© um especialista em copywriting e marketing digital para pequenas e m√©dias empresas no Brasil. Sua tarefa √© criar um post otimizado e engajador para as seguintes plataformas e objetivos. Considere as informa√ß√µes de suporte se fornecidas. Gere apenas o texto do post, com sugest√µes de emojis e hashtags relevantes. Seja conciso e direto ao ponto, adaptando a linguagem para cada plataforma se necess√°rio, mas mantendo a mensagem central. Se multiplas plataformas forem selecionadas, gere uma vers√£o base e sugira pequenas adapta√ß√µes para cada uma se fizer sentido, ou indique que o post pode ser usado de forma similar.",
            f"**Plataformas Alvo:** {', '.join(selected_platforms_list)}.",
            f"**Produto/Servi√ßo Principal:** {details_dict['product_service']}",
            f"**P√∫blico-Alvo:** {details_dict['target_audience']}",
            f"**Objetivo do Post:** {details_dict['objective']}",
            f"**Mensagem Chave:** {details_dict['key_message']}",
            f"**Proposta √önica de Valor (USP):** {details_dict['usp']}",
            f"**Tom/Estilo:** {details_dict['style_tone']}",
            f"**Informa√ß√µes Adicionais/CTA:** {details_dict['extra_info']}"
        ] 
        if uploaded_files_info: prompt_parts.append(f"**Informa√ß√µes de Arquivos de Suporte (considere o conte√∫do relevante se aplic√°vel):** {', '.join([f['name'] for f in uploaded_files_info])}.")
        final_prompt = "\n\n".join(prompt_parts)
        ai_response = llm.invoke(HumanMessage(content=final_prompt))
        st.session_state.generated_post_content_new = ai_response.content

def _marketing_handle_criar_campanha(uploaded_files_info, details_dict, campaign_specifics, selected_platforms_list, llm):
    if not selected_platforms_list: st.warning("Por favor, selecione pelo menos uma plataforma."); return
    if not details_dict["objective"]: st.warning("Por favor, descreva o objetivo da campanha."); return
    with st.spinner("üß† A IA est√° elaborando seu plano de campanha..."):
        prompt_parts = [
            "**Instru√ß√£o para IA:** Voc√™ √© um estrategista de marketing digital experiente, focado em PMEs no Brasil. Desenvolva um plano de campanha de marketing conciso e acion√°vel com base nas informa√ß√µes fornecidas. O plano deve incluir: 1. Conceito da Campanha (Tema Central). 2. Sugest√µes de Conte√∫do Chave para cada plataforma selecionada. 3. Um cronograma geral sugerido (Ex: Semana 1 - Teaser, Semana 2 - Lan√ßamento, etc.). 4. M√©tricas chave para acompanhar o sucesso. Considere as informa√ß√µes de suporte, se fornecidas.",
            f"**Nome da Campanha:** {campaign_specifics['name']}",
            f"**Plataformas Alvo:** {', '.join(selected_platforms_list)}.",
            f"**Produto/Servi√ßo Principal da Campanha:** {details_dict['product_service']}",
            f"**P√∫blico-Alvo da Campanha:** {details_dict['target_audience']}",
            f"**Objetivo Principal da Campanha:** {details_dict['objective']}",
            f"**Mensagem Chave da Campanha:** {details_dict['key_message']}",
            f"**USP do Produto/Servi√ßo na Campanha:** {details_dict['usp']}",
            f"**Tom/Estilo da Campanha:** {details_dict['style_tone']}",
            f"**Dura√ß√£o Estimada:** {campaign_specifics['duration']}",
            f"**Or√ßamento Aproximado (se informado):** {campaign_specifics['budget']}",
            f"**KPIs mais importantes:** {campaign_specifics['kpis']}",
            f"**Informa√ß√µes Adicionais/CTA da Campanha:** {details_dict['extra_info']}"
        ] 
        if uploaded_files_info: prompt_parts.append(f"**Informa√ß√µes de Arquivos de Suporte (considere o conte√∫do relevante se aplic√°vel):** {', '.join([f['name'] for f in uploaded_files_info])}.")
        final_prompt = "\n\n".join(prompt_parts)
        ai_response = llm.invoke(HumanMessage(content=final_prompt))
        st.session_state.generated_campaign_content_new = ai_response.content

def _marketing_handle_criar_landing_page(uploaded_files_info, lp_details, llm):
    if not lp_details["purpose"] or not lp_details["main_offer"] or not lp_details["cta"]: st.warning("Por favor, preencha objetivo, oferta e CTA."); return
    with st.spinner("üé® A IA est√° desenhando a estrutura da sua landing page..."):
        prompt_parts = [
            "**Instru√ß√£o para IA:** Voc√™ √© um especialista em UX/UI e copywriting para landing pages de alta convers√£o, com foco em PMEs no Brasil. Baseado nos detalhes fornecidos, crie uma estrutura detalhada e sugest√µes de texto (copy) para cada se√ß√£o de uma landing page. Inclua se√ß√µes como: Cabe√ßalho (Headline, Sub-headline), Problema/Dor, Apresenta√ß√£o da Solu√ß√£o/Produto, Benef√≠cios Chave, Prova Social (Depoimentos), Oferta Irresist√≠vel, Chamada para A√ß√£o (CTA) clara e forte, Garantia (se aplic√°vel), FAQ. Considere as informa√ß√µes de suporte, se fornecidas.",
            f"**Objetivo da Landing Page:** {lp_details['purpose']}",
            f"**P√∫blico-Alvo (Persona):** {lp_details['target_audience']}",
            f"**Oferta Principal:** {lp_details['main_offer']}",
            f"**Principais Benef√≠cios/Transforma√ß√µes da Oferta:** {lp_details['key_benefits']}",
            f"**Chamada para A√ß√£o (CTA) Principal:** {lp_details['cta']}",
            f"**Prefer√™ncias Visuais/Refer√™ncias (se houver):** {lp_details['visual_prefs']}"
        ]
        if uploaded_files_info: prompt_parts.append(f"**Informa√ß√µes de Arquivos de Suporte (considere o conte√∫do relevante se aplic√°vel):** {', '.join([f['name'] for f in uploaded_files_info])}.")
        final_prompt = "\n\n".join(prompt_parts)
        ai_response = llm.invoke(HumanMessage(content=final_prompt)); generated_content = ai_response.content
        st.session_state.generated_lp_content_new = generated_content

def _marketing_handle_criar_site(uploaded_files_info, site_details, llm):
    if not site_details["business_type"] or not site_details["main_purpose"]: st.warning("Informe tipo de neg√≥cio e objetivo do site."); return
    with st.spinner("üõ†Ô∏è A IA est√° arquitetando a estrutura do seu site..."):
        prompt_parts = [
            "**Instru√ß√£o para IA:** Voc√™ √© um arquiteto de informa√ß√£o e web designer experiente, focado em criar sites eficazes para PMEs no Brasil. Desenvolva uma proposta de estrutura de site (mapa do site com principais p√°ginas e se√ß√µes dentro de cada p√°gina) e sugest√µes de conte√∫do chave para cada se√ß√£o. Considere as informa√ß√µes de suporte, se fornecidas.",
            f"**Tipo de Neg√≥cio/Empresa:** {site_details['business_type']}",
            f"**Principal Objetivo do Site:** {site_details['main_purpose']}",
            f"**P√∫blico-Alvo Principal:** {site_details['target_audience']}",
            f"**P√°ginas Essenciais Desejadas:** {site_details['essential_pages']}",
            f"**Principais Produtos/Servi√ßos/Diferenciais a serem destacados:** {site_details['key_features']}",
            f"**Personalidade da Marca:** {site_details['brand_personality']}",
            f"**Prefer√™ncias Visuais/Refer√™ncias (se houver):** {site_details['visual_references']}"
        ]
        if uploaded_files_info: prompt_parts.append(f"**Informa√ß√µes de Arquivos de Suporte (considere o conte√∫do relevante se aplic√°vel):** {', '.join([f['name'] for f in uploaded_files_info])}.")
        final_prompt = "\n\n".join(prompt_parts)
        ai_response = llm.invoke(HumanMessage(content=final_prompt)); generated_content = ai_response.content
        st.session_state.generated_site_content_new = generated_content

def _marketing_handle_encontre_cliente(uploaded_files_info, client_details, llm):
    if not client_details["product_campaign"]: st.warning("Descreva o produto/servi√ßo ou campanha."); return
    with st.spinner("üïµÔ∏è A IA est√° investigando seu p√∫blico-alvo..."):
        prompt_parts = [
             "**Instru√ß√£o para IA:** Voc√™ √© um 'Agente Detetive de Clientes', especialista em marketing e pesquisa de mercado para PMEs no Brasil. Sua tarefa √© realizar uma an√°lise completa do p√∫blico-alvo com base nas informa√ß√µes fornecidas e gerar um relat√≥rio detalhado com os seguintes itens: 1. Persona Detalhada (Nome fict√≠cio, Idade, Profiss√£o, Dores, Necessidades, Sonhos, Onde busca informa√ß√£o). 2. Sugest√µes de Canais de Marketing mais eficazes para alcan√ßar essa persona. 3. Sugest√µes de Mensagens Chave e √Çngulos de Comunica√ß√£o que ressoem com essa persona. 4. Se 'Deep Research' estiver ativado, inclua insights adicionais sobre comportamento online, tend√™ncias e micro-segmentos. Considere as informa√ß√µes de suporte, se fornecidas.",
            f"**Produto/Servi√ßo ou Campanha para An√°lise:** {client_details['product_campaign']}",
            f"**Localiza√ß√£o Geogr√°fica (Cidade(s), Regi√£o):** {client_details['location']}",
            f"**Verba Aproximada para A√ß√£o/Campanha (se aplic√°vel):** {client_details['budget']}",
            f"**Faixa Et√°ria e G√™nero Predominante (se souber):** {client_details['age_gender']}",
            f"**Principais Interesses, Hobbies, Dores, Necessidades do P√∫blico Desejado:** {client_details['interests']}",
            f"**Canais de Marketing que j√° utiliza ou considera:** {client_details['current_channels']}",
            f"**N√≠vel de Pesquisa:** {'Deep Research Ativado (an√°lise mais aprofundada)' if client_details['deep_research'] else 'Pesquisa Padr√£o'}"
        ]
        if uploaded_files_info: prompt_parts.append(f"**Informa√ß√µes de Arquivos de Suporte (considere o conte√∫do relevante se aplic√°vel):** {', '.join([f['name'] for f in uploaded_files_info])}.")
        final_prompt = "\n\n".join(prompt_parts)
        ai_response = llm.invoke(HumanMessage(content=final_prompt)); generated_content = ai_response.content
        st.session_state.generated_client_analysis_new = generated_content

def _marketing_handle_conheca_concorrencia(uploaded_files_info, competitor_details, llm):
    if not competitor_details["your_business"] or not competitor_details["competitors_list"]: st.warning("Descreva seu neg√≥cio e liste concorrentes."); return
    with st.spinner("üî¨ A IA est√° analisando a concorr√™ncia..."):
        prompt_parts = [
            "**Instru√ß√£o para IA:** Voc√™ √© um 'Agente de Intelig√™ncia Competitiva', especialista em an√°lise de mercado para PMEs no Brasil. Com base nas informa√ß√µes do neg√≥cio do usu√°rio e da lista de concorrentes, elabore um relat√≥rio breve e √∫til. Para cada concorrente listado (ou os principais, se a lista for longa), analise os 'Aspectos para An√°lise' selecionados. Destaque os pontos fortes e fracos de cada um em rela√ß√£o a esses aspectos e, ao final, sugira 2-3 oportunidades ou diferenciais que o neg√≥cio do usu√°rio pode explorar. Considere as informa√ß√µes de suporte, se fornecidas.",
            f"**Neg√≥cio do Usu√°rio (para compara√ß√£o):** {competitor_details['your_business']}",
            f"**Concorrentes (nomes, sites, redes sociais, se poss√≠vel):** {competitor_details['competitors_list']}",
            f"**Aspectos para An√°lise:** {', '.join(competitor_details['aspects_to_analyze'])}"
        ]
        if uploaded_files_info: prompt_parts.append(f"**Informa√ß√µes de Arquivos de Suporte (considere o conte√∫do relevante se aplic√°vel):** {', '.join([f['name'] for f in uploaded_files_info])}.")
        final_prompt = "\n\n".join(prompt_parts)
        ai_response = llm.invoke(HumanMessage(content=final_prompt)); generated_content = ai_response.content
        st.session_state.generated_competitor_analysis_new = generated_content


# --- Classe do Agente (AssistentePMEPro) ---
class AssistentePMEPro:
    def __init__(self, llm_passed_model):
        if llm_passed_model is None:
            st.error("‚ùå Erro cr√≠tico: Agente PME Pro tentou ser inicializado sem um modelo LLM.")
            st.stop()
        self.llm = llm_passed_model
        # Inicializa mem√≥rias para cada chat
        if 'memoria_plano_negocios' not in st.session_state:
            st.session_state.memoria_plano_negocios = ConversationBufferMemory(memory_key="historico_chat_plano", return_messages=True)
        if 'memoria_calculo_precos' not in st.session_state:
            st.session_state.memoria_calculo_precos = ConversationBufferMemory(memory_key="historico_chat_precos", return_messages=True)
        if 'memoria_gerador_ideias' not in st.session_state:
            st.session_state.memoria_gerador_ideias = ConversationBufferMemory(memory_key="historico_chat_ideias", return_messages=True)
        
        self.memoria_plano_negocios = st.session_state.memoria_plano_negocios
        self.memoria_calculo_precos = st.session_state.memoria_calculo_precos
        self.memoria_gerador_ideias = st.session_state.memoria_gerador_ideias


    def _criar_cadeia_conversacional(self, system_message_content, memoria_especifica, memory_key_placeholder="historico_chat"):
        prompt_template = ChatPromptTemplate.from_messages([
            SystemMessagePromptTemplate.from_template(system_message_content),
            MessagesPlaceholder(variable_name=memory_key_placeholder),
            HumanMessagePromptTemplate.from_template("{input_usuario}")
        ])
        return LLMChain(llm=self.llm, prompt=prompt_template, memory=memoria_especifica, verbose=False)

    def marketing_digital_guiado(self):
        st.header("üöÄ Marketing Digital Interativo com IA")
        st.caption("Seu copiloto para criar estrat√©gias, posts, campanhas e mais!")
        st.markdown("---")

        marketing_files_info_for_prompt = [] # Este deve ser local para a fun√ß√£o
        with st.sidebar: 
            st.subheader("üìé Suporte para Marketing")
            uploaded_marketing_files = st.file_uploader(
                "Upload para Marketing (opcional):",
                accept_multiple_files=True,
                type=['png', 'jpg', 'jpeg', 'txt', 'md', 'pdf', 'csv', 'xlsx', 'docx', 'pptx', 'mp4', 'mov'],
                key="marketing_files_uploader_v15_final" 
            )
            if uploaded_marketing_files:
                temp_marketing_files_info = []
                for up_file in uploaded_marketing_files:
                    temp_marketing_files_info.append({"name": up_file.name, "type": up_file.type, "size": up_file.size})
                if temp_marketing_files_info:
                    marketing_files_info_for_prompt = temp_marketing_files_info # Atribui aqui
                    st.success(f"{len(uploaded_marketing_files)} arquivo(s) de marketing carregado(s)!")
                    with st.expander("Ver arquivos de marketing"):
                        for finfo in marketing_files_info_for_prompt:
                            st.write(f"- {finfo['name']} ({finfo['type']})")
            st.markdown("---")

        main_action_key = "main_marketing_action_choice_v15_final"
        main_action = st.radio(
            "Ol√°! O que voc√™ quer fazer agora em marketing digital?",
            ("Selecione uma op√ß√£o...", "1 - Criar post para redes sociais ou e-mail",
             "2 - Criar campanha de marketing completa", "3 - Criar estrutura e conte√∫do para landing page",
             "4 - Criar estrutura e conte√∫do para site com IA", "5 - Encontrar meu cliente ideal (An√°lise de P√∫blico-Alvo)",
             "6 - Conhecer a concorr√™ncia (An√°lise Competitiva)"),
            index=0, key=main_action_key
        )
        st.markdown("---")
        
        platforms_config_options = { 
            "Instagram": "insta", "Facebook": "fb", "X (Twitter)": "x", "WhatsApp": "wpp", 
            "TikTok": "tt", "Kwai": "kwai", "YouTube (descri√ß√£o/roteiro)": "yt",
            "E-mail Marketing (lista pr√≥pria)": "email_own", 
            "E-mail Marketing (Campanha Google Ads)": "email_google"
        }
        platform_names_available_list = list(platforms_config_options.keys())


        if main_action == "1 - Criar post para redes sociais ou e-mail":
            st.subheader("‚ú® Criador de Posts com IA")
            with st.form("post_creator_form_v15_final"):
                st.subheader(" Plataformas Desejadas:")
                
                key_select_all_post = f"post_v15_select_all" # Definido aqui
                select_all_post_checked = st.checkbox("Selecionar Todas as Plataformas Acima", key=key_select_all_post)
                
                cols_post = st.columns(2)
                keys_for_platforms_post = {} 
                has_email_option_post = False
                for i, (platform_name, platform_suffix) in enumerate(platforms_config_options.items()):
                    col_index = i % 2
                    platform_key = f"post_v15_platform_{platform_suffix}" 
                    keys_for_platforms_post[platform_name] = platform_key
                    with cols_post[col_index]:
                        st.checkbox(platform_name, key=platform_key, value=select_all_post_checked) # Propaga o valor do "select all"
                    if "E-mail Marketing" in platform_name: has_email_option_post = True
                if has_email_option_post: st.caption("üí° Para e-mail marketing, considere segmentar sua lista e personalizar a sauda√ß√£o.")

                post_details = _marketing_get_objective_details("post_v15", "post")
                submit_button_pressed_post = st.form_submit_button("üí° Gerar Post!")

            if submit_button_pressed_post:
                actual_selected_platforms = []
                if select_all_post_checked: # Usa o valor do checkbox diretamente
                    actual_selected_platforms = platform_names_available_list
                else:
                    for p_name, p_key in keys_for_platforms_post.items():
                        if st.session_state.get(p_key, False):
                            actual_selected_platforms.append(p_name)
                _marketing_handle_criar_post(marketing_files_info_for_prompt, post_details, actual_selected_platforms, self.llm)

            if 'generated_post_content_new' in st.session_state:
                _marketing_display_output_options(st.session_state.generated_post_content_new, "post_v15", "post_ia")

        elif main_action == "2 - Criar campanha de marketing completa":
            st.subheader("üåç Planejador de Campanhas de Marketing com IA")
            with st.form("campaign_creator_form_v15_final"):
                campaign_name = st.text_input("Nome da Campanha:", key="campaign_name_new_v15")
                st.subheader(" Plataformas Desejadas:")

                key_select_all_camp = f"campaign_v15_select_all" # Definido aqui
                select_all_camp_checked = st.checkbox("Selecionar Todas as Plataformas Acima", key=key_select_all_camp)

                cols_camp = st.columns(2)
                keys_for_platforms_camp = {}
                has_email_option_camp = False
                for i, (platform_name, platform_suffix) in enumerate(platforms_config_options.items()):
                    col_index = i % 2
                    platform_key = f"campaign_v15_platform_{platform_suffix}"
                    keys_for_platforms_camp[platform_name] = platform_key
                    with cols_camp[col_index]:
                        st.checkbox(platform_name, key=platform_key, value=select_all_camp_checked) # Propaga o valor
                    if "E-mail Marketing" in platform_name: has_email_option_camp = True
                if has_email_option_camp: st.caption("üí° Para e-mail marketing, defina bem seus segmentos e personalize as mensagens.")
                
                campaign_details_obj = _marketing_get_objective_details("campaign_v15", "campanha")
                campaign_duration = st.text_input("Dura√ß√£o Estimada:", key="campaign_duration_new_v15")
                campaign_budget_approx = st.text_input("Or√ßamento Aproximado (opcional):", key="campaign_budget_new_v15")
                specific_kpis = st.text_area("KPIs mais importantes:", key="campaign_kpis_new_v15")
                submit_button_pressed_camp = st.form_submit_button("üöÄ Gerar Plano de Campanha!")

            if submit_button_pressed_camp:
                actual_selected_platforms_camp = []
                if select_all_camp_checked: # Usa o valor do checkbox diretamente
                    actual_selected_platforms_camp = platform_names_available_list
                else:
                    for p_name, p_key in keys_for_platforms_camp.items():
                        if st.session_state.get(p_key, False):
                            actual_selected_platforms_camp.append(p_name)
                
                campaign_specifics_dict = {"name": campaign_name, "duration": campaign_duration,
                                           "budget": campaign_budget_approx, "kpis": specific_kpis}
                _marketing_handle_criar_campanha(marketing_files_info_for_prompt, campaign_details_obj, campaign_specifics_dict, actual_selected_platforms_camp, self.llm)

            if 'generated_campaign_content_new' in st.session_state:
                _marketing_display_output_options(st.session_state.generated_campaign_content_new, "campaign_v15", "campanha_ia")
        
        elif main_action == "3 - Criar estrutura e conte√∫do para landing page":
            st.subheader("üìÑ Gerador de Estrutura para Landing Pages com IA")
            with st.form("landing_page_form_new_v15"):
                lp_purpose = st.text_input("Principal objetivo da landing page:", key="lp_purpose_new_v15")
                lp_target_audience = st.text_input("Para quem √© esta landing page? (Persona)", key="lp_audience_new_v15")
                lp_main_offer = st.text_area("Oferta principal e irresist√≠vel:", key="lp_offer_new_v15")
                lp_key_benefits = st.text_area("3-5 principais benef√≠cios/transforma√ß√µes:", key="lp_benefits_new_v15")
                lp_cta = st.text_input("Chamada para a√ß√£o (CTA) principal:", key="lp_cta_new_v15")
                lp_visual_prefs = st.text_input("Prefer√™ncia de cores, estilo visual ou sites de refer√™ncia? (Opcional)", key="lp_visual_new_v15")
                submitted_lp = st.form_submit_button("üõ†Ô∏è Gerar Estrutura da LP!")
            if submitted_lp:
                lp_details_dict = {"purpose": lp_purpose, "target_audience": lp_target_audience, "main_offer": lp_main_offer, "key_benefits": lp_key_benefits, "cta": lp_cta, "visual_prefs": lp_visual_prefs}
                _marketing_handle_criar_landing_page(marketing_files_info_for_prompt, lp_details_dict, self.llm)
            if 'generated_lp_content_new' in st.session_state:
                st.subheader("üí° Estrutura e Conte√∫do Sugeridos para Landing Page:")
                st.markdown(st.session_state.generated_lp_content_new)
                st.download_button(label="üì• Baixar Sugest√µes da LP",data=st.session_state.generated_lp_content_new.encode('utf-8'), file_name="landing_page_sugestoes_ia_new.txt", mime="text/plain", key="download_lp_new_v15") 

        elif main_action == "4 - Criar estrutura e conte√∫do para site com IA":
            st.subheader("üèóÔ∏è Arquiteto de Sites com IA")
            with st.form("site_creator_form_new_v15"): 
                site_business_type = st.text_input("Tipo do seu neg√≥cio/empresa:", key="site_biz_type_new_v15")
                site_main_purpose = st.text_area("Principal objetivo do seu site:", key="site_purpose_new_v15")
                site_target_audience = st.text_input("P√∫blico principal do site:", key="site_audience_new_v15")
                site_essential_pages = st.text_area("P√°ginas essenciais (Ex: Home, Sobre, Servi√ßos):", key="site_pages_new_v15")
                site_key_features = st.text_area("Principais produtos/servi√ßos/diferenciais:", key="site_features_new_v15")
                site_brand_personality = st.text_input("Personalidade da sua marca:", key="site_brand_new_v15")
                site_visual_references = st.text_input("Prefer√™ncias de cores, estilo ou sites de refer√™ncia? (Opcional)", key="site_visual_ref_new_v15")
                submitted_site = st.form_submit_button("üèõÔ∏è Gerar Estrutura do Site!")
            if submitted_site:
                site_details_dict = {"business_type": site_business_type, "main_purpose": site_main_purpose, "target_audience": site_target_audience, "essential_pages": site_essential_pages, "key_features": site_key_features, "brand_personality": site_brand_personality, "visual_references": site_visual_references}
                _marketing_handle_criar_site(marketing_files_info_for_prompt, site_details_dict, self.llm)
            if 'generated_site_content_new' in st.session_state:
                st.subheader("üèõÔ∏è Estrutura e Conte√∫do Sugeridos para o Site:")
                st.markdown(st.session_state.generated_site_content_new)
                st.download_button(label="üì• Baixar Sugest√µes do Site",data=st.session_state.generated_site_content_new.encode('utf-8'), file_name="site_sugestoes_ia_new.txt", mime="text/plain",key="download_site_new_v15")

        elif main_action == "5 - Encontrar meu cliente ideal (An√°lise de P√∫blico-Alvo)":
            st.subheader("üéØ Decodificador de Clientes com IA")
            with st.form("find_client_form_new_v15"):
                fc_product_campaign = st.text_area("Produto/servi√ßo ou campanha para an√°lise:", key="fc_campaign_new_v15")
                fc_location = st.text_input("Cidade(s) ou regi√£o de alcance:", key="fc_location_new_v15")
                fc_budget = st.text_input("Verba aproximada para a√ß√£o/campanha? (Opcional)", key="fc_budget_new_v15")
                fc_age_gender = st.text_input("Faixa et√°ria e g√™nero predominante:", key="fc_age_gender_new_v15")
                fc_interests = st.text_area("Principais interesses, hobbies, dores, necessidades:", key="fc_interests_new_v15")
                fc_current_channels = st.text_area("Canais de marketing que j√° utiliza ou considera:", key="fc_channels_new_v15")
                fc_deep_research = st.checkbox("Habilitar 'Deep Research' (an√°lise mais aprofundada pela IA)", key="fc_deep_new_v15")
                submitted_fc = st.form_submit_button("üîç Encontrar Meu Cliente!")
            if submitted_fc:
                client_details_dict = {"product_campaign": fc_product_campaign, "location": fc_location, "budget": fc_budget, "age_gender": fc_age_gender, "interests": fc_interests, "current_channels": fc_current_channels, "deep_research": fc_deep_research}
                _marketing_handle_encontre_cliente(marketing_files_info_for_prompt, client_details_dict, self.llm)
            if 'generated_client_analysis_new' in st.session_state:
                st.subheader("üïµÔ∏è‚Äç‚ôÇÔ∏è An√°lise de P√∫blico-Alvo e Recomenda√ß√µes:")
                st.markdown(st.session_state.generated_client_analysis_new)
                st.download_button(label="üì• Baixar An√°lise de P√∫blico",data=st.session_state.generated_client_analysis_new.encode('utf-8'), file_name="analise_publico_alvo_ia_new.txt", mime="text/plain",key="download_client_analysis_new_v15")
        
        elif main_action == "6 - Conhecer a concorr√™ncia (An√°lise Competitiva)":
            st.subheader("üßê Radar da Concorr√™ncia com IA")
            with st.form("competitor_analysis_form_new_v15"):
                ca_your_business = st.text_area("Descreva seu pr√≥prio neg√≥cio/produto para compara√ß√£o:", key="ca_your_biz_new_v15")
                ca_competitors_list = st.text_area("Liste seus principais concorrentes (nomes, sites, redes sociais):", key="ca_competitors_new_v15")
                ca_aspects_to_analyze = st.multiselect( "Quais aspectos da concorr√™ncia analisar?", ["Presen√ßa Online", "Tipos de Conte√∫do", "Comunica√ß√£o", "Pontos Fortes", "Pontos Fracos", "Pre√ßos (se observ√°vel)", "Engajamento"], default=["Presen√ßa Online", "Pontos Fortes", "Pontos Fracos"], key="ca_aspects_new_v15")
                submitted_ca = st.form_submit_button("üì° Analisar Concorrentes!")
            if submitted_ca:
                competitor_details_dict = {"your_business": ca_your_business, "competitors_list": ca_competitors_list, "aspects_to_analyze": ca_aspects_to_analyze}
                _marketing_handle_conheca_concorrencia(marketing_files_info_for_prompt, competitor_details_dict, self.llm)
            if 'generated_competitor_analysis_new' in st.session_state:
                st.subheader("üìä An√°lise da Concorr√™ncia e Insights:")
                st.markdown(st.session_state.generated_competitor_analysis_new)
                st.download_button(label="üì• Baixar An√°lise da Concorr√™ncia", data=st.session_state.generated_competitor_analysis_new.encode('utf-8'), file_name="analise_concorrencia_ia_new.txt",mime="text/plain",key="download_competitor_analysis_new_v15")

        elif main_action == "Selecione uma op√ß√£o...":
            st.info("üëã Bem-vindo √† se√ß√£o interativa de Marketing Digital com IA! Escolha uma das op√ß√µes acima para come√ßar.")
            logo_url_marketing_welcome = "https://i.imgur.com/7IIYxq1.png" # Manteve o link da imagem anterior
            st.image(logo_url_marketing_welcome, caption="Assistente PME Pro", width=200)

    def conversar_plano_de_negocios(self, input_usuario):
        system_message_plano = "Voc√™ √© o \"Assistente PME Pro\", um consultor de neg√≥cios experiente..." # Exemplo, prompt completo omitido
        cadeia = self._criar_cadeia_conversacional(system_message_plano, self.memoria_plano_negocios, memory_key_placeholder="historico_chat_plano")
        resposta_ai_obj = cadeia.invoke({"input_usuario": input_usuario})
        return resposta_ai_obj['text'] if isinstance(resposta_ai_obj, dict) and 'text' in resposta_ai_obj else str(resposta_ai_obj)

    def calcular_precos_interativo(self, input_usuario, descricao_imagem_contexto=None):
        prompt_content = f"O usu√°rio pergunta sobre c√°lculo de pre√ßos: '{input_usuario}'."
        if descricao_imagem_contexto:
            prompt_content = f"{descricao_imagem_contexto}\n\n{prompt_content}"
        
        system_message_precos = f"""Voc√™ √© o "Assistente PME Pro", especialista em precifica√ß√£o com IA... {prompt_content}""" # Exemplo, prompt completo omitido
        cadeia = self._criar_cadeia_conversacional(system_message_precos, self.memoria_calculo_precos, memory_key_placeholder="historico_chat_precos")
        # Para o c√°lculo de pre√ßos, a "entrada do usu√°rio" j√° est√° no system_message_precos
        # Podemos passar um input_usuario mais gen√©rico ou uma confirma√ß√£o.
        # Ou ajustar _criar_cadeia_conversacional para n√£o exigir {input_usuario} se o prompt for constru√≠do dinamicamente.
        # Por simplicidade agora, vamos assumir que o prompt_usuario complementa.
        resposta_ai_obj = cadeia.invoke({"input_usuario": "Com base nisso, quais s√£o suas recomenda√ß√µes de pre√ßo?"}) 
        return resposta_ai_obj['text'] if isinstance(resposta_ai_obj, dict) and 'text' in resposta_ai_obj else str(resposta_ai_obj)

    def gerar_ideias_para_negocios(self, input_usuario, contexto_arquivos=None):
        prompt_content = f"O usu√°rio busca ideias de neg√≥cios e diz: '{input_usuario}'."
        if contexto_arquivos:
            prompt_content = f"Considerando os seguintes arquivos e contextos fornecidos pelo usu√°rio:\n{contexto_arquivos}\n\n{prompt_content}"

        system_message_ideias = f"""Voc√™ √© o "Assistente PME Pro", um consultor de neg√≥cios especialista em IA... {prompt_content}""" # Exemplo
        cadeia = self._criar_cadeia_conversacional(system_message_ideias, self.memoria_gerador_ideias, memory_key_placeholder="historico_chat_ideias")
        resposta_ai_obj = cadeia.invoke({"input_usuario": "Quais ideias voc√™ sugere com base nisso?"})
        return resposta_ai_obj['text'] if isinstance(resposta_ai_obj, dict) and 'text' in resposta_ai_obj else str(resposta_ai_obj)

# --- Fun√ß√µes Utilit√°rias de Chat ---
def inicializar_ou_resetar_chat(area_chave, mensagem_inicial_ia, memoria_agente_instancia):
    chat_display_key = f"chat_display_{area_chave}"
    st.session_state[chat_display_key] = [{"role": "assistant", "content": mensagem_inicial_ia}]
    if memoria_agente_instancia:
        memoria_agente_instancia.clear()
        # Adiciona a mensagem inicial √† mem√≥ria para que a IA tenha o contexto de in√≠cio
        if hasattr(memoria_agente_instancia.chat_memory, 'add_ai_message'):
            memoria_agente_instancia.chat_memory.add_ai_message(mensagem_inicial_ia)
        elif hasattr(memoria_agente_instancia.chat_memory, 'messages') and isinstance(memoria_agente_instancia.chat_memory.messages, list):
             memoria_agente_instancia.chat_memory.messages.append(AIMessage(content=mensagem_inicial_ia))

    # Resetar estados espec√≠ficos da se√ß√£o ao reiniciar o chat
    if area_chave == "calculo_precos": 
        st.session_state.last_uploaded_image_info_pricing = None
        st.session_state.processed_image_id_pricing = None
        st.session_state.user_input_processed_pricing = False # Garante que n√£o tentar√° limpar na pr√≥xima renderiza√ß√£o sem novo input
    elif area_chave == "gerador_ideias": 
        st.session_state.uploaded_file_info_ideias_for_prompt = None
        st.session_state.processed_file_id_ideias = None
        st.session_state.user_input_processed_ideias = False


def exibir_chat_e_obter_input(area_chave, prompt_placeholder, funcao_conversa_agente, **kwargs_funcao_agente):
    chat_display_key = f"chat_display_{area_chave}"
    if chat_display_key not in st.session_state: 
        # Se o chat n√£o foi inicializado por alguma raz√£o (ex: navega√ß√£o direta sem passar pela inicializa√ß√£o),
        # pode ser necess√°rio adicionar uma mensagem padr√£o ou for√ßar a inicializa√ß√£o.
        # Por ora, vamos assumir que inicializar_ou_resetar_chat foi chamado.
        st.session_state[chat_display_key] = [] 

    for msg_info in st.session_state[chat_display_key]:
        with st.chat_message(msg_info["role"]): 
            st.markdown(msg_info["content"])
    
    prompt_usuario = st.chat_input(prompt_placeholder, key=f"chat_input_{area_chave}_v15_final")
    
    if prompt_usuario:
        st.session_state[chat_display_key].append({"role": "user", "content": prompt_usuario})
        with st.chat_message("user"): 
            st.markdown(prompt_usuario)
        
        # Marcar que o input do usu√°rio foi processado para se√ß√µes espec√≠ficas
        if area_chave == "calculo_precos": st.session_state.user_input_processed_pricing = True
        elif area_chave == "gerador_ideias": st.session_state.user_input_processed_ideias = True
            
        with st.spinner("Assistente PME Pro est√° processando... ü§î"):
            resposta_ai = funcao_conversa_agente(prompt_usuario, **kwargs_funcao_agente)
        st.session_state[chat_display_key].append({"role": "assistant", "content": resposta_ai})
        st.rerun()

# --- Interface Principal Streamlit (AP√ìS LOGIN BEM-SUCEDIDO) ---
# Esta parte s√≥ ser√° executada se llm_model_instance for definido E o usu√°rio estiver autenticado
if llm_model_instance: # Garante que o LLM foi carregado antes de tentar usar o agente
    if 'agente_pme' not in st.session_state:
        st.session_state.agente_pme = AssistentePMEPro(llm_passed_model=llm_model_instance)
    agente = st.session_state.agente_pme

    # LOGO E T√çTULO DA SIDEBAR (S√≥ aparecem ap√≥s login, dentro da √°rea protegida)
    URL_DO_SEU_LOGO = "https://i.imgur.com/7IIYxq1.png" # Considere usar a logo local: "images/logo-pme-ia.png"
    st.sidebar.image(URL_DO_SEU_LOGO, width=150) # Ajuste o tamanho se necess√°rio
    st.sidebar.title("Assistente PME Pro")
    st.sidebar.markdown("IA para seu Neg√≥cio Decolar!")
    st.sidebar.markdown("---")

    opcoes_menu = {
        "P√°gina Inicial": "pagina_inicial", 
        "Marketing Digital com IA (Guia)": "marketing_guiado",
        "Elaborar Plano de Neg√≥cios com IA": "plano_negocios", 
        "C√°lculo de Pre√ßos Inteligente": "calculo_precos",
        "Gerador de Ideias para Neg√≥cios": "gerador_ideias"
    }

    if 'area_selecionada' not in st.session_state: 
        st.session_state.area_selecionada = "P√°gina Inicial"
    
    # Assegura que as chaves de chat display existem antes do radio button
    for nome_menu_init, chave_secao_init in opcoes_menu.items():
        if f"chat_display_{chave_secao_init}" not in st.session_state:
            st.session_state[f"chat_display_{chave_secao_init}"] = []
    
    if 'previous_area_selecionada_for_chat_init_processed_v15' not in st.session_state:
        st.session_state['previous_area_selecionada_for_chat_init_processed_v15'] = None

    # Atualiza o √≠ndice do radio button para refletir a sele√ß√£o atual em st.session_state
    current_selection_index = 0 # Padr√£o para "P√°gina Inicial"
    if st.session_state.area_selecionada in opcoes_menu:
        current_selection_index = list(opcoes_menu.keys()).index(st.session_state.area_selecionada)

    area_selecionada_label = st.sidebar.radio(
        "Como posso te ajudar hoje?", 
        options=list(opcoes_menu.keys()), 
        key='sidebar_selection_v25_final', 
        index=current_selection_index
    )

    if area_selecionada_label != st.session_state.area_selecionada:
        st.session_state.area_selecionada = area_selecionada_label
        # L√≥gica para limpar o estado de marketing ao sair dessa se√ß√£o
        if area_selecionada_label != "Marketing Digital com IA (Guia)":
            for key_to_clear in list(st.session_state.keys()):
                if key_to_clear.startswith("generated_") and key_to_clear.endswith("_new"):
                    del st.session_state[key_to_clear]
                # Limpa estado dos checkboxes de plataforma tamb√©m
                if key_to_clear.startswith("post_v15_platform_") or \
                   key_to_clear.startswith("campaign_v15_platform_") or \
                   key_to_clear == "post_v15_select_all" or \
                   key_to_clear == "campaign_v15_select_all":
                    if st.session_state.get(key_to_clear) is not None:
                        del st.session_state[key_to_clear]
        st.rerun()

    current_section_key = opcoes_menu.get(st.session_state.area_selecionada)

    # L√≥gica de inicializa√ß√£o de chat para se√ß√µes conversacionais
    if current_section_key not in ["pagina_inicial", "marketing_guiado"]:
        # Se a √°rea mudou E n√£o √© uma das que n√£o precisa de reset de chat na navega√ß√£o
        if st.session_state.area_selecionada != st.session_state.get('previous_area_selecionada_for_chat_init_processed_v15'):
            chat_display_key_nav = f"chat_display_{current_section_key}"
            # Inicializa ou reseta o chat se ele n√£o existir ou estiver vazio
            if chat_display_key_nav not in st.session_state or not st.session_state[chat_display_key_nav]:
                msg_inicial_nav = ""
                memoria_agente_nav = None
                if current_section_key == "plano_negocios": 
                    msg_inicial_nav = "Ol√°! Sou seu Assistente PME Pro. Vamos elaborar um rascunho robusto do seu plano de neg√≥cios? Para come√ßar, me conte sobre sua ideia de neg√≥cio, seus principais produtos/servi√ßos, e quem voc√™ imagina como seus clientes."
                    memoria_agente_nav = agente.memoria_plano_negocios
                elif current_section_key == "calculo_precos": 
                    msg_inicial_nav = "Ol√°! Bem-vindo ao assistente de C√°lculo de Pre√ßos. Para come√ßarmos, por favor, descreva o produto ou servi√ßo para o qual voc√™ gostaria de ajuda para precificar. Se tiver uma imagem, pode envi√°-la tamb√©m."
                    memoria_agente_nav = agente.memoria_calculo_precos
                elif current_section_key == "gerador_ideias": 
                    msg_inicial_nav = "Ol√°! Sou o Assistente PME Pro. Estou aqui para te ajudar a ter novas ideias para o seu neg√≥cio. Voc√™ pode me descrever um desafio, uma √°rea que quer inovar, ou simplesmente pedir sugest√µes. Se tiver algum arquivo de contexto (texto ou imagem), pode enviar tamb√©m."
                    memoria_agente_nav = agente.memoria_gerador_ideias
                
                if msg_inicial_nav and memoria_agente_nav is not None: # Verifica se memoria_agente_nav n√£o √© None
                    inicializar_ou_resetar_chat(current_section_key, msg_inicial_nav, memoria_agente_nav)
            # Atualiza a √°rea processada para evitar re-inicializa√ß√µes desnecess√°rias no mesmo rerun
            st.session_state['previous_area_selecionada_for_chat_init_processed_v15'] = st.session_state.area_selecionada


    if current_section_key == "pagina_inicial":
        st.markdown("<div style='text-align: center;'><h1>üöÄ Bem-vindo ao seu Assistente PME Pro!</h1></div>", unsafe_allow_html=True)
        st.markdown("<div style='text-align: center;'><p style='font-size: 1.1em;'>Sou seu parceiro de IA dedicado a impulsionar o sucesso de Pequenas e M√©dias Empresas.</p></div>", unsafe_allow_html=True)
        st.markdown("<div style='text-align: center;'><p style='font-size: 1.1em;'>Use o menu √† esquerda para navegar pelas ferramentas e come√ßar a transformar seu neg√≥cio.</p></div>", unsafe_allow_html=True)
        st.markdown("---")
        # Usando a mesma logo da landing page, mas idealmente uma vers√£o local
        # Se a logo da landing page est√° em 'images/logo-pme-ia.png' no repo da LANDING PAGE,
        # para o app Streamlit, voc√™ precisaria ter essa imagem no repo do APP STREAMLIT
        # ou usar uma URL p√∫blica. Vou manter o Imgur por enquanto, mas o ideal √© padronizar.
        st.markdown(f"<div style='text-align: center;'><img src='{URL_DO_SEU_LOGO}' alt='Logo Assistente PME Pro' width='150'></div>", unsafe_allow_html=True)
        st.markdown("---")
        
        num_botoes_funcionais = len(opcoes_menu) -1 # Exclui "P√°gina Inicial"
        if num_botoes_funcionais > 0 :
            # Organiza os bot√µes em colunas, tentando n√£o exceder 3 ou 4 colunas
            num_cols_render = min(num_botoes_funcionais, 3) 
            cols_botoes_pg_inicial = st.columns(num_cols_render)
            btn_idx_pg_inicial = 0
            for nome_menu_btn_pg, chave_secao_btn_pg in opcoes_menu.items():
                if chave_secao_btn_pg != "pagina_inicial":
                    col_para_botao_pg = cols_botoes_pg_inicial[btn_idx_pg_inicial % num_cols_render]
                    # Simplifica o label do bot√£o
                    button_label_pg = nome_menu_btn_pg.split(" com IA")[0].split(" (Guia)")[0].replace("Elaborar ", "").replace(" Inteligente","").replace(" para Neg√≥cios","")
                    if col_para_botao_pg.button(button_label_pg, key=f"btn_goto_{chave_secao_btn_pg}_v15_final", use_container_width=True, help=f"Ir para {nome_menu_btn_pg}"):
                        st.session_state.area_selecionada = nome_menu_btn_pg
                        st.rerun()
                    btn_idx_pg_inicial +=1
            st.balloons()

    elif current_section_key == "marketing_guiado": 
        agente.marketing_digital_guiado()
    elif current_section_key == "plano_negocios":
        st.header("üìù Elaborando seu Plano de Neg√≥cios com IA")
        st.caption("Converse com o assistente para desenvolver se√ß√µes do seu plano de neg√≥cios, obter insights e refinar suas estrat√©gias. Forne√ßa o m√°ximo de detalhes poss√≠vel.")
        exibir_chat_e_obter_input(current_section_key, "Sua resposta ou pr√≥xima se√ß√£o do plano...", agente.conversar_plano_de_negocios)
        if st.sidebar.button("üóëÔ∏è Limpar Hist√≥rico do Plano", key="btn_reset_plano_v15_final"):
            inicializar_ou_resetar_chat(current_section_key, "Ok, vamos recome√ßar o seu Plano de Neg√≥cios. Sobre qual aspecto voc√™ gostaria de falar primeiro?", agente.memoria_plano_negocios)
            st.rerun()
    elif current_section_key == "calculo_precos":
        st.header("üí≤ C√°lculo de Pre√ßos Inteligente com IA")
        st.caption("Descreva seu produto/servi√ßo, custos, mercado e objetivos. Envie uma imagem se ajudar. O assistente te guiar√° na defini√ß√£o de pre√ßos.")
        uploaded_image = st.file_uploader("Envie uma imagem do produto (opcional):", type=["png", "jpg", "jpeg"], key="preco_img_uploader_v15_final")
        
        descricao_imagem_para_ia = None 
        if uploaded_image is not None:
            if st.session_state.get('processed_image_id_pricing') != uploaded_image.id:
                try:
                    img_pil = Image.open(uploaded_image) 
                    st.image(img_pil, caption=f"Imagem: {uploaded_image.name}", width=150)
                    descricao_imagem_para_ia = f"O usu√°rio carregou uma imagem chamada '{uploaded_image.name}'. Considere esta informa√ß√£o visualmente e contextualmente."
                    st.session_state.last_uploaded_image_info_pricing = descricao_imagem_para_ia
                    st.session_state.processed_image_id_pricing = uploaded_image.id
                    st.info(f"Imagem '{uploaded_image.name}' pronta para ser considerada no pr√≥ximo di√°logo.")
                except Exception as e:
                    st.error(f"Erro ao processar a imagem: {e}")
                    st.session_state.last_uploaded_image_info_pricing = None
                    st.session_state.processed_image_id_pricing = None
            else: 
                 descricao_imagem_para_ia = st.session_state.get('last_uploaded_image_info_pricing')

        kwargs_preco_chat = {}
        # Usa a descri√ß√£o da imagem que foi definida nesta renderiza√ß√£o OU da sess√£o se o input do usu√°rio ainda n√£o foi processado para ela
        # A ideia √© que a descri√ß√£o da imagem seja enviada JUNTO com o input do usu√°rio que se refere a ela.
        contexto_imagem_para_proximo_dialogo = st.session_state.get('last_uploaded_image_info_pricing')
        if contexto_imagem_para_proximo_dialogo and not st.session_state.get('user_input_processed_pricing', False):
            kwargs_preco_chat['descricao_imagem_contexto'] = contexto_imagem_para_proximo_dialogo
        
        exibir_chat_e_obter_input(current_section_key, "Descreva o produto/servi√ßo, custos, etc.", agente.calcular_precos_interativo, **kwargs_preco_chat)
        
        if 'user_input_processed_pricing' in st.session_state and st.session_state.user_input_processed_pricing:
            if st.session_state.get('last_uploaded_image_info_pricing'): 
                st.session_state.last_uploaded_image_info_pricing = None # Limpa para que n√£o seja enviado novamente sem uma nova imagem ou novo contexto de input
            st.session_state.user_input_processed_pricing = False

        if st.sidebar.button("üóëÔ∏è Limpar Hist√≥rico de Pre√ßos", key="btn_reset_precos_v15_final"):
            inicializar_ou_resetar_chat(current_section_key, "Ok, vamos come√ßar um novo c√°lculo de pre√ßos! Descreva seu produto ou servi√ßo.", agente.memoria_calculo_precos)
            st.rerun()

    elif current_section_key == "gerador_ideias":
        st.header("üí° Gerador de Ideias para seu Neg√≥cio com IA")
        st.caption("Descreva um desafio, uma √°rea que quer inovar, ou pe√ßa sugest√µes. Envie arquivos de texto ou imagem para dar mais contexto.")
        uploaded_files_ideias_ui = st.file_uploader("Envie arquivos de contexto (opcional - .txt, .png, .jpg):", type=["txt", "png", "jpg", "jpeg"], accept_multiple_files=True, key="ideias_file_uploader_v15_final")
        
        contexto_para_ia_ideias_local = None
        if uploaded_files_ideias_ui:
            current_file_signature = "-".join(sorted([f"{f.name}-{f.size}" for f in uploaded_files_ideias_ui]))
            if st.session_state.get('processed_file_id_ideias') != current_file_signature or not st.session_state.get('uploaded_file_info_ideias_for_prompt'):
                text_contents_ui = []
                image_info_ui = []
                image_objects_for_prompt = [] # Para o futuro, se o modelo puder aceitar objetos de imagem diretamente com Langchain

                for uploaded_file_item in uploaded_files_ideias_ui:
                    try:
                        if uploaded_file_item.type == "text/plain": 
                            text_contents_ui.append(f"Conte√∫do do arquivo de texto '{uploaded_file_item.name}':\n{uploaded_file_item.read().decode('utf-8')[:3000]}...") # Limita para n√£o sobrecarregar
                        elif uploaded_file_item.type in ["image/png", "image/jpeg"]: 
                            st.image(Image.open(uploaded_file_item), caption=f"Contexto Visual: {uploaded_file_item.name}", width=100)
                            image_info_ui.append(f"Uma imagem chamada '{uploaded_file_item.name}' foi fornecida como contexto visual.")
                            # Se o modelo e Langchain suportarem, poder√≠amos tentar passar a imagem:
                            # image_objects_for_prompt.append(Image.open(uploaded_file_item))
                    except Exception as e: st.error(f"Erro ao processar o arquivo '{uploaded_file_item.name}': {e}")
                
                full_context_ui_str = ""
                if text_contents_ui: full_context_ui_str += "\n\n--- CONTE√öDO TEXTUAL DOS ARQUIVOS ---\n" + "\n\n".join(text_contents_ui)
                if image_info_ui: full_context_ui_str += "\n\n--- DESCRI√á√ÉO DAS IMAGENS FORNECIDAS ---\n" + "\n".join(image_info_ui)
                
                if full_context_ui_str: 
                    st.session_state.uploaded_file_info_ideias_for_prompt = full_context_ui_str.strip()
                    contexto_para_ia_ideias_local = st.session_state.uploaded_file_info_ideias_for_prompt
                    st.info("Arquivo(s) de contexto pronto(s) para o pr√≥ximo di√°logo.")
                else: 
                    st.session_state.uploaded_file_info_ideias_for_prompt = None
                st.session_state.processed_file_id_ideias = current_file_signature
            else: 
                contexto_para_ia_ideias_local = st.session_state.get('uploaded_file_info_ideias_for_prompt')
        
        kwargs_ideias_chat_ui = {}
        if contexto_para_ia_ideias_local and not st.session_state.get('user_input_processed_ideias', False) : 
            kwargs_ideias_chat_ui['contexto_arquivos'] = contexto_para_ia_ideias_local
        
        exibir_chat_e_obter_input(current_section_key, "Descreva seu desafio ou pe√ßa ideias:", agente.gerar_ideias_para_negocios, **kwargs_ideias_chat_ui)
        
        if 'user_input_processed_ideias' in st.session_state and st.session_state.user_input_processed_ideias:
            if st.session_state.get('uploaded_file_info_ideias_for_prompt'):
                 st.session_state.uploaded_file_info_ideias_for_prompt = None # Limpa para n√£o reenviar sem novo upload/contexto
            st.session_state.user_input_processed_ideias = False

        if st.sidebar.button("üóëÔ∏è Limpar Hist√≥rico de Ideias", key="btn_reset_ideias_v15_final"):
            inicializar_ou_resetar_chat(current_section_key, "Ok, vamos come√ßar uma nova sess√£o de gera√ß√£o de ideias! Qual o seu ponto de partida?", agente.memoria_gerador_ideias)
            st.rerun()

else: # Se llm_model_instance n√£o foi definido (ex: falha na API key)
    st.error("üö® O Assistente PME Pro n√£o p√¥de ser iniciado. Verifique a API Key e o modelo LLM nas configura√ß√µes.")

st.sidebar.markdown("---")
st.sidebar.info("Desenvolvido por Yaakov Israel com IA Gemini 2.5 pro")
