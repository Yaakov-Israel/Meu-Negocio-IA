import streamlit as st
import os
from langchain_google_genai import ChatGoogleGenerativeAI
from langchain.prompts import ChatPromptTemplate, SystemMessagePromptTemplate, HumanMessagePromptTemplate, MessagesPlaceholder
from langchain.chains import LLMChain
from langchain.memory import ConversationBufferMemory
from langchain.schema import HumanMessage, AIMessage
import google.generativeai as genai
from PIL import Image 

# --- Configura√ß√£o da P√°gina Streamlit ---
st.set_page_config(page_title="Assistente PME Pro", layout="wide", initial_sidebar_state="expanded")

# --- Carregar API Key e Configurar Modelo ---
# (Esta se√ß√£o parece estar funcionando bem, vou mant√™-la como estava na √∫ltima vers√£o funcional)
GOOGLE_API_KEY = None
llm = None # Renomeado de llm_langchain para llm para consist√™ncia

try:
    GOOGLE_API_KEY = st.secrets["GOOGLE_API_KEY"]
except KeyError:
    st.error("üö® ERRO: Chave API 'GOOGLE_API_KEY' n√£o encontrada nos Segredos (Secrets) do Streamlit.")
    st.info("Adicione sua GOOGLE_API_KEY aos Segredos do seu app no painel do Streamlit Community Cloud.")
    st.stop()
except FileNotFoundError: 
    GOOGLE_API_KEY = os.environ.get("GOOGLE_API_KEY") 
    if not GOOGLE_API_KEY:
        st.error("üö® ERRO: Chave API n√£o encontrada nos Segredos do Streamlit nem como vari√°vel de ambiente.")
        st.info("Configure GOOGLE_API_KEY nos Segredos do Streamlit Cloud ou defina como vari√°vel de ambiente local.")
        st.stop()

if not GOOGLE_API_KEY or not GOOGLE_API_KEY.strip():
    st.error("üö® ERRO: GOOGLE_API_KEY n√£o foi carregada ou est√° vazia.")
    st.stop()
else:
    try:
        genai.configure(api_key=GOOGLE_API_KEY)
        llm = ChatGoogleGenerativeAI(model="gemini-1.5-flash",
                                     temperature=0.7,
                                     google_api_key=GOOGLE_API_KEY,
                                     convert_system_message_to_human=True)
        st.sidebar.success("‚úÖ Modelo LLM (Gemini) inicializado!")
    except Exception as e:
        st.error(f"üò• ERRO AO INICIALIZAR O MODELO LLM DO GOOGLE: {e}")
        st.info("Verifique sua chave API, se a 'Generative Language API' est√° ativa no Google Cloud e suas cotas.")
        st.stop()

# --- Classe do Agente (AssistentePMEPro) ---
class AssistentePMEPro:
    def __init__(self, llm_model): # llm_model √© o nosso llm inicializado com LangChain
        if llm_model is None:
            st.error("‚ùå Erro cr√≠tico: Agente PME Pro tentou ser inicializado sem um modelo LLM.")
            st.stop()
        self.llm = llm_model # Usando self.llm consistentemente
        
        # Inicializa as mem√≥rias como atributos diretos da inst√¢ncia do agente
        # Cada funcionalidade ter√° sua pr√≥pria mem√≥ria para n√£o misturar as conversas
        self.memoria_plano_negocios = ConversationBufferMemory(memory_key="historico_chat_plano", return_messages=True)
        self.memoria_controle_financeiro = ConversationBufferMemory(memory_key="historico_chat_financeiro", return_messages=True)
        self.memoria_calculo_precos = ConversationBufferMemory(memory_key="historico_chat_precos", return_messages=True)

    def _criar_cadeia_simples(self, system_message_content, human_message_content_template="{solicitacao_usuario}"):
        prompt_template = ChatPromptTemplate.from_messages([
            SystemMessagePromptTemplate.from_template(system_message_content),
            HumanMessagePromptTemplate.from_template(human_message_content_template)
        ])
        return LLMChain(llm=self.llm, prompt=prompt_template, verbose=False)

    def _criar_cadeia_conversacional(self, system_message_content, memoria_especifica, memory_key_placeholder="historico_chat"):
        prompt_template = ChatPromptTemplate.from_messages([
            SystemMessagePromptTemplate.from_template(system_message_content),
            MessagesPlaceholder(variable_name=memory_key_placeholder), 
            HumanMessagePromptTemplate.from_template("{input_usuario}")
        ])
        # A mem√≥ria espec√≠fica (ex: self.memoria_plano_negocios) √© passada aqui
        return LLMChain(llm=self.llm, prompt=prompt_template, memory=memoria_especifica, verbose=False)

    def marketing_digital_guiado(self):
        # ... (c√≥digo da fun√ß√£o marketing_digital_guiado como na vers√£o anterior)
        st.header("üöÄ Marketing Digital Inteligente para sua Empresa")
        st.markdown("Bem-vindo! Preencha os campos abaixo para criarmos juntos uma estrat√©gia de marketing digital eficaz usando IA.")
        with st.form(key='marketing_form_guiado_v6'): # Mantendo keys √∫nicas
            st.markdown("##### üìã Conte-nos sobre seu Neg√≥cio e Objetivos")
            publico_alvo = st.text_input("1. Quem voc√™ quer alcan√ßar?", key="mdg_publico_v6")
            produto_servico = st.text_input("2. Qual produto ou servi√ßo principal voc√™ oferece?", key="mdg_produto_v6")
            objetivo_campanha = st.selectbox("3. Qual o principal objetivo com esta a√ß√£o de marketing?", ["", "Aumentar vendas online", "Gerar mais contatos (leads)", "Fortalecer o reconhecimento da marca", "Aumentar o engajamento"], key="mdg_objetivo_v6")
            st.markdown("---")
            mensagem_principal = st.text_area("4. Qual mensagem chave voc√™ quer comunicar?", key="mdg_mensagem_v6")
            diferencial = st.text_input("5. O que torna seu produto/servi√ßo especial?", key="mdg_diferencial_v6")
            st.markdown("---")
            descricao_imagem = st.text_input("6. Ideia para imagem (opcional):", key="mdg_img_v6")
            descricao_video = st.text_input("7. Ideia para v√≠deo (opcional):", key="mdg_video_v6")
            orcamento_ideia = st.text_input("8. Ideia de or√ßamento para esta a√ß√£o (opcional):", key="mdg_orcamento_v6")
            redes_opcoes = { "N√£o tenho certeza, preciso de sugest√£o": "Sugest√£o da IA", "Instagram": "Instagram", "Facebook": "Facebook", "TikTok": "TikTok", "LinkedIn": "LinkedIn", "WhatsApp Business": "WhatsApp", "E-mail Marketing": "E-mail Marketing", "Google Ads/Meu Neg√≥cio": "Google", "Integrada": "Integrada"}
            rede_social_alvo_label = st.selectbox("9. Canal digital principal ou pedir sugest√£o?", options=list(redes_opcoes.keys()), key="mdg_canal_v6")
            rede_social_alvo = redes_opcoes[rede_social_alvo_label]
            submit_button = st.form_submit_button(label='Gerar Meu Guia de Marketing com IA üöÄ')

        if submit_button:
            if not all([publico_alvo, produto_servico, objetivo_campanha, mensagem_principal, diferencial]):
                st.warning("Por favor, preencha os campos sobre P√∫blico, Produto/Servi√ßo, Objetivo, Mensagem e Diferencial.")
            else:
                system_message_marketing = "Voc√™ √© o \"Assistente PME Pro\", um consultor especialista em Marketing Digital com IA para pequenas empresas. Seu objetivo √© guiar o usu√°rio a criar uma estrat√©gia de marketing digital eficaz, baseado nos melhores princ√≠pios de marketing (como os de Kotler) e nas capacidades da IA."
                prompt_llm_marketing = f"Um dono de pequena empresa preencheu o seguinte formul√°rio para obter um guia pr√°tico para Marketing Digital com IA:\n- P√∫blico-Alvo: {publico_alvo}\n- Produto/Servi√ßo Principal: {produto_servico}\n- Principal Diferencial: {diferencial}\n- Objetivo Principal com Marketing Digital: {objetivo_campanha}\n- Mensagem Chave: {mensagem_principal}\n- Ideia para Imagem (se houver): {descricao_imagem or 'N√£o especificado'}\n- Ideia para V√≠deo (se houver): {descricao_video or 'N√£o especificado'}\n- Or√ßamento Estimado (se houver): {orcamento_ideia or 'N√£o especificado'}\n- Canal Digital em Mente ou Pedido de Sugest√£o: {rede_social_alvo}\n\nCom base nisso, forne√ßa um GUIA ESTRAT√âGICO E PR√ÅTICO, incluindo:\n1. Diagn√≥stico R√°pido e Oportunidade com IA.\n2. Canal(is) Priorit√°rio(s) (com justificativa se pedi sugest√£o, ou como otimizar o escolhido com IA).\n3. Estrat√©gias de Conte√∫do Inteligente: Tipos de conte√∫do, como IA pode ajudar (ideias, rascunhos), 2 exemplos de T√çTULOS/POSTS para meu neg√≥cio.\n4. Ferramenta de IA Recomendada (Gratuita/Baixo Custo): UMA ferramenta e como ajudaria.\n5. Primeiros 3 Passos Acion√°veis para usar IA no marketing.\n6. M√©trica Chave de Sucesso Inicial.\nTom: Mentor experiente, pr√°tico, encorajador. Linguagem clara. Foco em plano inicial acion√°vel."
                with st.spinner("O Assistente PME Pro est√° elaborando seu guia de marketing... üí°"):
                    cadeia_mkt = self._criar_cadeia_simples(system_message_marketing) # Cadeia simples, sem mem√≥ria de chat para o formul√°rio
                    resposta_llm = cadeia_mkt.run(solicitacao_usuario=prompt_llm_marketing)
                st.markdown("### üí° Seu Guia Personalizado de Marketing Digital com IA:")
                st.markdown(resposta_llm)


    def conversar_plano_de_negocios(self, input_usuario):
        system_message_plano = "Voc√™ √© o \"Assistente PME Pro\", um consultor de neg√≥cios especialista em IA. Sua tarefa √© ajudar um empreendedor a ESBO√áAR e depois DETALHAR um PLANO DE NEG√ìCIOS. Voc√™ faz perguntas UMA DE CADA VEZ para coletar informa√ß√µes. Use linguagem clara e seja encorajador.\n\n**FLUXO DA CONVERSA:**\n\n**IN√çCIO DA CONVERSA / PEDIDO INICIAL:**\nSe o usu√°rio indicar que quer criar um plano de neg√≥cios (ex: \"Crie meu plano de neg√≥cios\", \"Quero ajuda com meu plano\", \"sim\" para um bot√£o de iniciar plano), SUA PRIMEIRA PERGUNTA DEVE SER: \"Perfeito! Para come√ßarmos a esbo√ßar seu plano de neg√≥cios, qual √© o seu ramo de atua√ß√£o principal?\"\n\n**COLETA PARA O ESBO√áO:**\nAp√≥s saber o ramo, continue fazendo UMA PERGUNTA POR VEZ para obter informa√ß√µes para as seguintes se√ß√µes (n√£o precisa ser exatamente nesta ordem, mas cubra-as):\n1.  Nome da Empresa\n2.  Miss√£o da Empresa\n3.  Vis√£o da Empresa\n4.  Principais Objetivos\n5.  Produtos/Servi√ßos Principais\n6.  P√∫blico-Alvo Principal\n7.  Principal Diferencial\n8.  Ideias Iniciais de Marketing e Vendas\n9.  Ideias Iniciais de Opera√ß√µes\n10. Estimativas Financeiras Muito B√°sicas\n\n**GERA√á√ÉO DO ESBO√áO:**\nQuando voc√™ sentir que coletou informa√ß√µes suficientes para estas 10 √°reas, VOC√ä DEVE PERGUNTAR:\n\"Com as informa√ß√µes que reunimos at√© agora, voc√™ gostaria que eu montasse um primeiro ESBO√áO do seu plano de neg√≥cios? Ele ter√° as se√ß√µes principais que discutimos.\"\n\nSe o usu√°rio disser \"sim\":\n    - Gere um ESBO√áO do plano de neg√≥cios com as se√ß√µes: Sum√°rio Executivo, Descri√ß√£o da Empresa, Produtos e Servi√ßos, P√∫blico-Alvo e Diferenciais, Estrat√©gias Iniciais de Marketing e Vendas, Opera√ß√µes Iniciais, Panorama Financeiro Inicial.\n    - No final do esbo√ßo, ADICIONE: \"Este √© um esbo√ßo inicial para organizar suas ideias. Ele pode ser muito mais detalhado e aprofundado.\"\n    - ENT√ÉO, PERGUNTE: \"Este esbo√ßo inicial te ajuda a visualizar melhor? Gostaria de DETALHAR este plano de neg√≥cios agora? Podemos aprofundar cada se√ß√£o, e voc√™ poder√° me fornecer mais informa√ß√µes (e no futuro, at√© mesmo subir documentos).\"\n\n**DETALHAMENTO DO PLANO (SE O USU√ÅRIO ACEITAR):**\nSe o usu√°rio disser \"sim\" para detalhar:\n    - Responda com entusiasmo: \"√ìtimo! Para detalharmos, vamos focar em cada se√ß√£o do plano. Aplicaremos princ√≠pios de administra√ß√£o e marketing (como os de Chiavenato e Kotler) para enriquecer a an√°lise.\"\n    - ENT√ÉO, PERGUNTE: \"Em qual se√ß√£o do plano de neg√≥cios voc√™ gostaria de come√ßar a aprofundar ou fornecer mais detalhes? Por exemplo, 'An√°lise de Mercado', 'Estrat√©gias de Marketing Detalhadas', ou 'Proje√ß√µes Financeiras'?\"\n    - A partir da escolha, fa√ßa perguntas espec√≠ficas para aquela se√ß√£o."
        # A mem√≥ria self.memoria_plano_negocios √© usada aqui
        cadeia = self._criar_cadeia_conversacional(system_message_plano, self.memoria_plano_negocios, memory_key_placeholder="historico_chat_plano")
        resposta_ai = cadeia.predict(input_usuario=input_usuario)
        return resposta_ai

    def conversar_controle_financeiro(self, input_usuario):
        system_message_financeiro = "Voc√™ √© o \"Assistente PME Pro\", um consultor financeiro especialista em IA para pequenas empresas. Sua tarefa √© ajudar o empreendedor a entender e iniciar um CONTROLE FINANCEIRO b√°sico. Voc√™ faz perguntas UMA DE CADA VEZ.\n\n- Se a conversa est√° come√ßando ou o usu√°rio diz algo como \"Quero ajuda com controle financeiro\" ou \"sim\" para uma pergunta inicial sobre o tema, sua PRIMEIRA pergunta DEVE SER: \"Entendido! Para come√ßarmos a organizar suas finan√ßas, qual √© o principal tipo de receita da sua empresa atualmente?\"\n- Continue com perguntas para entender: Outras fontes de receita, despesas fixas, despesas vari√°veis, se j√° utiliza alguma ferramenta de controle.\n- Ap√≥s coletar informa√ß√µes b√°sicas, PERGUNTE: \"Com base no que conversamos, gostaria que eu gerasse um resumo da sua situa√ß√£o financeira atual e sugest√µes de como estruturar uma planilha de controle de fluxo de caixa simples e uma de despesas?\"\n- Se o usu√°rio disser \"sim\", forne√ßa: a) Resumo textual. b) Estrutura para planilha de Fluxo de Caixa (colunas: Data, Descri√ß√£o, Entrada, Sa√≠da, Saldo). c) Estrutura para Planilha de Despesas (Categorias, Valor Mensal Estimado). d) Dica sobre separar finan√ßas pessoais das empresariais.\n- AP√ìS apresentar as sugest√µes, pergunte: \"Isso te d√° um ponto de partida? Podemos detalhar alguma dessas planilhas ou discutir como analisar esses n√∫meros e gerar alguns gr√°ficos simples com base nos dados que voc√™ me fornecer?\""
        # A mem√≥ria self.memoria_controle_financeiro √© usada aqui
        cadeia = self._criar_cadeia_conversacional(system_message_financeiro, self.memoria_controle_financeiro, memory_key_placeholder="historico_chat_financeiro")
        resposta_ai = cadeia.predict(input_usuario=input_usuario)
        return resposta_ai

    def calcular_precos_interativo(self, input_usuario, descricao_imagem_contexto=None): # Adicionado descricao_imagem_contexto
        system_message_precos = f"""
        Voc√™ √© o "Assistente PME Pro", especialista em precifica√ß√£o com IA.
        Sua tarefa √© ajudar o usu√°rio a definir o pre√ßo de venda de um produto ou servi√ßo.
        Voc√™ faz perguntas UMA DE CADA VEZ.
        {(f"Contexto adicional: O usu√°rio carregou uma imagem descrita como: '{descricao_imagem_contexto}'. Use isso se relevante para suas perguntas sobre o produto.") if descricao_imagem_contexto else ""}

        **IN√çCIO DA CONVERSA:**
        - Se o usu√°rio acabou de entrar nesta se√ß√£o ou diz algo como "quero calcular pre√ßos",
          SUA PRIMEIRA PERGUNTA DEVE SER: "Ol√°! Para te ajudar a calcular o pre√ßo, me diga primeiro:
          Voc√™ quer precificar um produto que voc√™ COMPRA E REVENDE, ou um produto/servi√ßo que voc√™ MESMO PRODUZ/CRIA?"
        
        **CEN√ÅRIO 1: PRODUTO DE REVENDA**
        - Se o usu√°rio indicar REVENDA:
            - Pergunte: "Qual o nome ou tipo do produto que voc√™ revende?"
            - Pergunte: "Em qual cidade/estado voc√™ atua principalmente?"
            - Pergunte: "Voc√™ tem o custo de aquisi√ß√£o deste produto por unidade?"
            - Explique: "Para produtos de revenda, √© importante pesquisar o pre√ßo de mercado. Eu n√£o consigo pesquisar na web em tempo real, mas posso te dar dicas de como voc√™ pode fazer essa pesquisa (ex: pesquisar em grandes varejistas online, marketplaces, ou concorrentes locais). Com base no seu custo e na pesquisa de mercado, definiremos uma margem de lucro."
            - Pergunte: "Qual margem de lucro voc√™ gostaria de aplicar sobre o custo (ex: 30%, 50%, 100%) ou qual pre√ßo de venda voc√™ tem em mente?"
            - Com base no custo e margem (ou pre√ßo alvo), calcule e sugira o pre√ßo.

        **CEN√ÅRIO 2: PRODUTO/SERVI√áO DE PRODU√á√ÉO PR√ìPRIA**
        - Se o usu√°rio indicar PRODU√á√ÉO PR√ìPRIA:
            - Pergunte: "Entendido! Para precificar seu produto/servi√ßo pr√≥prio, vamos detalhar os custos. Qual o nome do produto ou tipo de servi√ßo?"
            - Pergunte sobre CUSTOS DIRETOS: "Quais s√£o os custos diretos de material ou insumos por unidade produzida/servi√ßo prestado?" (Pe√ßa exemplos)
            - Pergunte sobre M√ÉO DE OBRA DIRETA: "Quanto tempo de trabalho √© gasto para produzir uma unidade ou prestar o servi√ßo, e qual o custo dessa m√£o de obra?"
            - Pergunte sobre CUSTOS INDIRETOS/FIXOS: "Voc√™ tem uma estimativa dos seus custos fixos mensais (aluguel, luz, etc.) que precisam ser cobertos? E quantas unidades voc√™ espera vender por m√™s (para ajudar a ratear esses custos)?"
            - Explique brevemente m√©todos de precifica√ß√£o (Markup, Margem de Contribui√ß√£o).
            - Pergunte: "Qual margem de lucro voc√™ gostaria de adicionar sobre o custo total de produ√ß√£o?"
            - Com base nos custos e margem, calcule e sugira o pre√ßo.
        
        GERAL: Pe√ßa informa√ß√µes de forma clara. Ap√≥s apresentar um c√°lculo, pergunte se faz sentido ou se quer simular com outros valores. Lembre de considerar valor percebido e concorr√™ncia.
        """
        # A mem√≥ria self.memoria_calculo_precos √© usada aqui
        cadeia = self._criar_cadeia_conversacional(system_message_precos, self.memoria_calculo_precos, memory_key_placeholder="historico_chat_precos")
        resposta_ai = cadeia.predict(input_usuario=input_usuario)
        return resposta_ai

# --- Interface Principal Streamlit ---
if llm: # Verifica se o llm (para LangChain) foi inicializado
    if 'agente_pme' not in st.session_state:
        st.session_state.agente_pme = AssistentePMEPro(llm_model=llm) # Passando o llm do LangChain
    agente = st.session_state.agente_pme

    st.sidebar.image("https://i.imgur.com/rGkzKxN.png", width=100)
    st.sidebar.title("Assistente PME Pro")
    st.sidebar.markdown("IA para seu Neg√≥cio Decolar!")
    st.sidebar.markdown("---")

    opcoes_menu = {
        "P√°gina Inicial": "pagina_inicial",
        "Marketing Digital com IA (Guia)": "marketing_guiado",
        "Elaborar Plano de Neg√≥cios com IA": "plano_negocios",
        "C√°lculo de Pre√ßos Inteligente": "calculo_precos"
    }

    if 'area_selecionada' not in st.session_state:
        st.session_state.area_selecionada = "P√°gina Inicial"
    
    # Inicializar todos os hist√≥ricos de display no session_state
    for key_area in opcoes_menu.values():
        if key_area and f"chat_display_{key_area}" not in st.session_state:
            st.session_state[f"chat_display_{key_area}"] = []
    
    # Caso especial para marketing que n√£o usa o chat_display da mesma forma
    if 'start_marketing_form' not in st.session_state:
        st.session_state.start_marketing_form = False


    area_selecionada_label = st.sidebar.radio(
        "Como posso te ajudar hoje?",
        options=list(opcoes_menu.keys()),
        key='sidebar_selection_v12',
        index=list(opcoes_menu.keys()).index(st.session_state.area_selecionada) if st.session_state.area_selecionada in opcoes_menu else 0
    )

    if area_selecionada_label != st.session_state.area_selecionada:
        st.session_state.area_selecionada = area_selecionada_label
        # L√≥gica para mensagem inicial ao mudar para uma aba de CHAT
        if st.session_state.area_selecionada == "Elaborar Plano de Neg√≥cios com IA" and not st.session_state.get(f"chat_display_{opcoes_menu[st.session_state.area_selecionada]}", []):
            initial_ai_message = "Ol√°! Sou seu Assistente PME Pro. Se voc√™ gostaria de criar um plano de neg√≥cios, pode me dizer 'sim' ou 'vamos come√ßar'!"
            st.session_state[f"chat_display_{opcoes_menu[st.session_state.area_selecionada]}"] = [{"role": "assistant", "content": initial_ai_message}]
            agente.memoria_plano_negocios.clear()
            agente.memoria_plano_negocios.chat_memory.add_ai_message(initial_ai_message)
        elif st.session_state.area_selecionada == "C√°lculo de Pre√ßos Inteligente" and not st.session_state.get(f"chat_display_{opcoes_menu[st.session_state.area_selecionada]}", []):
            initial_ai_message = "Ol√°! Bem-vindo ao assistente de C√°lculo de Pre√ßos. Para come√ßar, voc√™ quer precificar um produto que voc√™ COMPRA E REVENDE, ou um produto/servi√ßo que voc√™ MESMO PRODUZ/CRIA?"
            st.session_state[f"chat_display_{opcoes_menu[st.session_state.area_selecionada]}"] = [{"role": "assistant", "content": initial_ai_message}]
            agente.memoria_calculo_precos.clear()
            agente.memoria_calculo_precos.chat_memory.add_ai_message(initial_ai_message)
        elif st.session_state.area_selecionada == "Marketing Digital com IA (Guia)":
            st.session_state.start_marketing_form = False
        st.rerun()

    # --- √Årea de Conte√∫do Principal ---
    current_section_key = opcoes_menu.get(st.session_state.area_selecionada)

    if current_section_key == "pagina_inicial":
        st.title("üåü Bem-vindo ao Assistente PME Pro! üåü")
        st.markdown("Sou seu parceiro de IA pronto para ajudar sua pequena ou m√©dia empresa a crescer e se organizar melhor.")
        st.markdown("---")
        cols = st.columns(len(opcoes_menu)-1) # Menos 1 para n√£o incluir "P√°gina Inicial" nos bot√µes
        
        # Bot√µes din√¢micos para cada funcionalidade (exceto P√°gina Inicial)
        button_idx = 0
        for nome_menu, chave_secao in opcoes_menu.items():
            if chave_secao != "pagina_inicial":
                if cols[button_idx].button(nome_menu.split(" com IA")[0], key=f"btn_goto_{chave_secao}"): # Nome mais curto para o bot√£o
                    st.session_state.area_selecionada = nome_menu
                    # L√≥gica de inicializa√ß√£o de chat/estado para a se√ß√£o espec√≠fica
                    if nome_menu == "Elaborar Plano de Neg√≥cios com IA" and not st.session_state.get(f"chat_display_{chave_secao}",[]):
                        initial_msg = "Ol√°! Sou seu Assistente PME Pro. Se voc√™ gostaria de criar um plano de neg√≥cios, pode me dizer 'sim' ou 'vamos come√ßar'!"
                        st.session_state[f"chat_display_{chave_secao}"] = [{"role": "assistant", "content": initial_msg}]
                        agente.memoria_plano_negocios.clear()
                        agente.memoria_plano_negocios.chat_memory.add_ai_message(initial_msg)
                    elif nome_menu == "C√°lculo de Pre√ßos Inteligente" and not st.session_state.get(f"chat_display_{chave_secao}",[]):
                        initial_msg = "Ol√°! Bem-vindo ao assistente de C√°lculo de Pre√ßos. Para come√ßar, voc√™ quer precificar um produto que voc√™ COMPRA E REVENDE, ou um produto/servi√ßo que voc√™ MESMO PRODUZ/CRIA?"
                        st.session_state[f"chat_display_{chave_secao}"] = [{"role": "assistant", "content": initial_msg}]
                        agente.memoria_calculo_precos.clear()
                        agente.memoria_calculo_precos.chat_memory.add_ai_message(initial_msg)
                    elif nome_menu == "Marketing Digital com IA (Guia)":
                        st.session_state.start_marketing_form = False
                    st.rerun()
                button_idx +=1
        st.balloons()

    elif current_section_key == "marketing_guiado":
        agente.marketing_digital_guiado()

    elif current_section_key == "plano_negocios":
        st.header("üìù Elaborando seu Plano de Neg√≥cios com IA")
        st.caption("Converse comigo para construirmos seu plano passo a passo.")
        chat_display_key = f"chat_display_{current_section_key}"
        
        if not st.session_state.get(chat_display_key, []):
            initial_ai_message = "Ol√°! Sou seu Assistente PME Pro. Se voc√™ gostaria de criar um plano de neg√≥cios, pode me dizer 'sim' ou 'vamos come√ßar'!"
            st.session_state[chat_display_key] = [{"role": "assistant", "content": initial_ai_message}]
            if not agente.memoria_plano_negocios.chat_memory.messages:
                agente.memoria_plano_negocios.chat_memory.add_ai_message(initial_ai_message)
        
        for msg_info in st.session_state[chat_display_key]:
            with st.chat_message(msg_info["role"]):
                st.markdown(msg_info["content"])
        prompt_usuario = st.chat_input("Sua resposta ou diga 'Crie meu plano de neg√≥cios'")
        if prompt_usuario:
            st.session_state[chat_display_key].append({"role": "user", "content": prompt_usuario})
            with st.chat_message("user"): st.markdown(prompt_usuario)
            with st.spinner("Assistente PME Pro est√° processando... ü§î"):
                resposta_ai = agente.conversar_plano_de_negocios(prompt_usuario)
            st.session_state[chat_display_key].append({"role": "assistant", "content": resposta_ai})
            with st.chat_message("assistant"): st.markdown(resposta_ai)
        
        if st.sidebar.button("Reiniciar Plano de Neg√≥cios", key="btn_reset_plano_v5"):
            initial_ai_message = "Ok, vamos recome√ßar seu plano de neg√≥cios! Se voc√™ gostaria de criar um plano de neg√≥cios, pode me dizer 'sim' ou 'vamos come√ßar'!"
            st.session_state[chat_display_key] = [{"role": "assistant", "content": initial_ai_message}]
            agente.memoria_plano_negocios.clear()
            agente.memoria_plano_negocios.chat_memory.add_ai_message(initial_ai_message)
            st.rerun()

    elif current_section_key == "calculo_precos":
        st.header("üí≤ C√°lculo de Pre√ßos Inteligente com IA")
        st.caption("Vamos definir os melhores pre√ßos para seus produtos ou servi√ßos!")
        chat_display_key = f"chat_display_{current_section_key}"
        
        uploaded_image_pricing = st.file_uploader("Envie uma imagem do produto (opcional):", type=["png", "jpg", "jpeg"], key="preco_img_uploader_v2")
        descricao_imagem_para_ia = None
        if uploaded_image_pricing is not None:
            try:
                # Para modelos Gemini que aceitam bytes de imagem diretamente com texto:
                # imagem_pil = Image.open(uploaded_image_pricing)
                # st.image(imagem_pil, caption="Imagem Carregada", width=150)
                # TODO: No futuro, se a LLMChain ou o modelo suportar input multimodal direto, passar os bytes da imagem.
                # Por agora, vamos apenas pegar o nome do arquivo como contexto textual.
                descricao_imagem_para_ia = f"O usu√°rio carregou uma imagem chamada '{uploaded_image_pricing.name}'. Pe√ßa detalhes sobre ela se for relevante para a precifica√ß√£o."
                st.info(f"Imagem '{uploaded_image_pricing.name}' carregada. A IA ser√° informada sobre ela.")
            except Exception as e:
                st.error(f"Erro ao processar a imagem: {e}")

        if not st.session_state.get(chat_display_key, []):
            initial_ai_message = "Ol√°! Bem-vindo ao assistente de C√°lculo de Pre√ßos. Para come√ßar, voc√™ quer precificar um produto que voc√™ COMPRA E REVENDE, ou um produto/servi√ßo que voc√™ MESMO PRODUZ/CRIA?"
            st.session_state[chat_display_key] = [{"role": "assistant", "content": initial_ai_message}]
            if not agente.memoria_calculo_precos.chat_memory.messages:
                agente.memoria_calculo_precos.chat_memory.add_ai_message(initial_ai_message)
        
        for msg_info in st.session_state[chat_display_key]:
            with st.chat_message(msg_info["role"]):
                st.markdown(msg_info["content"])
        
        prompt_usuario_preco = st.chat_input("Sua resposta ou descreva o produto/servi√ßo para precificar:")
        if prompt_usuario_preco:
            st.session_state[chat_display_key].append({"role": "user", "content": prompt_usuario_preco})
            with st.chat_message("user"): st.markdown(prompt_usuario_preco)
            
            input_completo_para_ia = prompt_usuario_preco
            if descricao_imagem_para_ia: # Adiciona o contexto da imagem se ela foi carregada nesta intera√ß√£o
                input_completo_para_ia = f"{prompt_usuario_preco}\n(Contexto da imagem: {descricao_imagem_para_ia})"

            with st.spinner("Assistente PME Pro est√° calculando... üìà"):
                resposta_ai_preco = agente.calcular_precos_interativo(input_completo_para_ia)
            
            st.session_state[chat_display_key].append({"role": "assistant", "content": resposta_ai_preco})
            with st.chat_message("assistant"): st.markdown(resposta_ai_preco)

        if st.sidebar.button("Reiniciar C√°lculo de Pre√ßos", key="btn_reset_precos_v2"):
            initial_ai_message = "Ok, vamos come√ßar um novo c√°lculo de pre√ßos! Voc√™ quer precificar um produto que voc√™ COMPRA E REVENDE, ou um produto/servi√ßo que voc√™ MESMO PRODUZ/CRIA?"
            st.session_state[chat_display_key] = [{"role": "assistant", "content": initial_ai_message}]
            agente.memoria_calculo_precos.clear()
            agente.memoria_calculo_precos.chat_memory.add_ai_message(initial_ai_message)
            st.rerun()
else:
    st.error("üö® O Assistente PME Pro n√£o p√¥de ser iniciado. Verifique a API Key e o modelo LLM.")

st.sidebar.markdown("---")
st.sidebar.info("Desenvolvido por Yaakov com seu Assistente PME Pro")
