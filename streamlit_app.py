import streamlit as st
import os 
import json 
import pyrebase 
from langchain_google_genai import ChatGoogleGenerativeAI
from langchain.prompts import ChatPromptTemplate, SystemMessagePromptTemplate, HumanMessagePromptTemplate, MessagesPlaceholder
from langchain.chains import LLMChain
from langchain.memory import ConversationBufferMemory
from langchain.schema import HumanMessage, AIMessage
import google.generativeai as genai
from PIL import Image # Para o logo na sidebar

# --- Configura√ß√£o da P√°gina Streamlit ---
st.set_page_config(
    page_title="Assistente PME Pro",
    layout="wide",
    initial_sidebar_state="expanded",
    page_icon="üöÄ" 
)
# O st.title() ser√° definido dentro das se√ß√µes para ser din√¢mico.
# --- Inicializa√ß√£o do Firebase ---
# (Esta se√ß√£o √© id√™ntica √† da nossa vers√£o funcional de autentica√ß√£o)
firebase_app = None
pb_auth_client = None
error_message_firebase_init = None
firebase_initialized_successfully = False

try:
    firebase_config_from_secrets = st.secrets.get("firebase_config")
    if not firebase_config_from_secrets:
        error_message_firebase_init = "ERRO CR√çTICO: A se√ß√£o '[firebase_config]' n√£o foi encontrada ou est√° vazia nos Segredos."
    else:
        plain_firebase_config_dict = {k: v for k, v in firebase_config_from_secrets.items()}
        required_keys = ["apiKey", "authDomain", "projectId", "storageBucket", "messagingSenderId", "appId"]
        missing_keys = [key for key in required_keys if key not in plain_firebase_config_dict]

        if missing_keys:
            error_message_firebase_init = f"ERRO CR√çTICO: Chaves faltando em [firebase_config] nos segredos: {', '.join(missing_keys)}"
        else:
            if 'firebase_app_instance' not in st.session_state: 
                st.session_state.firebase_app_instance = pyrebase.initialize_app(plain_firebase_config_dict)
            
            firebase_app = st.session_state.firebase_app_instance
            pb_auth_client = firebase_app.auth()
            firebase_initialized_successfully = True
            if 'firebase_init_success_message_shown' not in st.session_state and not st.session_state.get('user_session_pyrebase'):
                 st.sidebar.success("‚úÖ Firebase SDK (Pyrebase4) inicializado!")
                 st.session_state.firebase_init_success_message_shown = True

except KeyError:
    error_message_firebase_init = "ERRO CR√çTICO: A se√ß√£o '[firebase_config]' n√£o foi encontrada nos Segredos do Streamlit."
except AttributeError as e_attr: 
    error_message_firebase_init = f"ERRO CR√çTICO ao acessar st.secrets['firebase_config']: {e_attr}"
except Exception as e_general: 
    error_message_firebase_init = f"ERRO GERAL ao inicializar Pyrebase4: {e_general}"

if error_message_firebase_init:
    st.error(error_message_firebase_init)
    # Tenta mostrar o traceback se 'e_general' ou 'e_attr' estiverem definidos
    current_exception = locals().get('e_general', locals().get('e_attr', Exception(error_message_firebase_init)))
    st.exception(current_exception)
    st.stop()

if not firebase_initialized_successfully or not pb_auth_client:
    st.error("Falha cr√≠tica na inicializa√ß√£o do Firebase. O app n√£o pode continuar.")
    st.stop()

# --- L√≥gica de Autentica√ß√£o e Estado da Sess√£o ---
if 'user_session_pyrebase' not in st.session_state:
    st.session_state.user_session_pyrebase = None

user_is_authenticated = False
if st.session_state.user_session_pyrebase and 'idToken' in st.session_state.user_session_pyrebase:
    try:
        # Verifica se o token ainda √© v√°lido e atualiza infos do usu√°rio se necess√°rio
        refreshed_user_info = pb_auth_client.get_account_info(st.session_state.user_session_pyrebase['idToken'])
        st.session_state.user_session_pyrebase['email'] = refreshed_user_info['users'][0].get('email', "Email n√£o dispon√≠vel")
        user_is_authenticated = True
        st.session_state.pop('auth_error_shown', None) # Limpa flag de erro ao autenticar
    except Exception as e_session: 
        error_message_session_check = "Sess√£o inv√°lida ou expirada."
        try:
            error_details_str = e_session.args[0] if len(e_session.args) > 0 else "{}"
            error_data = json.loads(error_details_str.replace("'", "\"")) # Tenta normalizar para JSON
            api_error_message = error_data.get('error', {}).get('message', "ERRO_DESCONHECIDO_SESSAO")
            if "TOKEN_EXPIRED" in api_error_message or "INVALID_ID_TOKEN" in api_error_message:
                error_message_session_check = "Sua sess√£o expirou. Por favor, fa√ßa login novamente."
            else: 
                error_message_session_check = f"Erro ao verificar sess√£o ({api_error_message}). Fa√ßa login."
        except (json.JSONDecodeError, IndexError, TypeError, AttributeError): # AttributeError adicionado
            error_message_session_check = f"Erro ao verificar sess√£o (parsing). Fa√ßa login. Detalhe: {str(e_session)}"
        
        st.session_state.user_session_pyrebase = None 
        user_is_authenticated = False
        if 'auth_error_shown' not in st.session_state: 
            st.sidebar.warning(error_message_session_check)
            st.session_state.auth_error_shown = True
        
        if not st.session_state.get('running_rerun_after_auth_fail_main_v2', False): # Nova chave de controle de rerun
            st.session_state.running_rerun_after_auth_fail_main_v2 = True
            st.rerun()
        else:
            st.session_state.pop('running_rerun_after_auth_fail_main_v2', None)

if 'running_rerun_after_auth_fail_main_v2' in st.session_state and st.session_state.running_rerun_after_auth_fail_main_v2:
    st.session_state.pop('running_rerun_after_auth_fail_main_v2', None)
    # Evita renderizar o resto se estivermos em um rerun for√ßado por falha de autentica√ß√£o
# --- Interface do Usu√°rio Condicional e L√≥gica Principal do App ---
KEY_SUFFIX_APP_GLOBAL = "_v22_final_app" # Novo sufixo global para esta vers√£o

if user_is_authenticated:
    st.session_state.pop('auth_error_shown', None) 
    display_email = st.session_state.user_session_pyrebase.get('email', "Usu√°rio Logado")
    
    # Inicializa√ß√£o do LLM (S√ì SE AUTENTICADO)
    GOOGLE_API_KEY = st.secrets.get("GOOGLE_API_KEY")
    llm_model_instance = None

    if not GOOGLE_API_KEY or not GOOGLE_API_KEY.strip():
        st.error("üö® ERRO: Chave API 'GOOGLE_API_KEY' n√£o encontrada ou vazia nos Segredos do Streamlit.")
        st.stop()
    else:
        try:
            genai.configure(api_key=GOOGLE_API_KEY)
            llm_model_instance = ChatGoogleGenerativeAI(model="gemini-1.5-flash",
                                                       temperature=0.75,
                                                       google_api_key=GOOGLE_API_KEY,
                                                       convert_system_message_to_human=True)
            if 'llm_init_success_sidebar_shown' not in st.session_state:
                st.sidebar.success("‚úÖ Modelo LLM (Gemini) inicializado!")
                st.session_state.llm_init_success_sidebar_shown = True
        except Exception as e_llm_init:
            st.error(f"üò• ERRO AO INICIALIZAR O MODELO LLM DO GOOGLE: {e_llm_init}")
            st.stop()

    if llm_model_instance:
        # --- FUN√á√ïES AUXILIARES PARA MARKETING DIGITAL (Objetivos e Output) ---
        def _marketing_get_objective_details(section_key_local, type_of_creation="post/campanha"):
            st.subheader(f"Detalhes para Orientar a Cria√ß√£o do(a) {type_of_creation.capitalize()}:")
            details = {}
            details["objective"] = st.text_area(f"Qual o principal objetivo com est(e/a) {type_of_creation}?", key=f"{section_key_local}_obj{KEY_SUFFIX_APP_GLOBAL}")
            details["target_audience"] = st.text_input("Quem voc√™ quer alcan√ßar?", key=f"{section_key_local}_audience{KEY_SUFFIX_APP_GLOBAL}")
            details["product_service"] = st.text_area("Qual produto ou servi√ßo principal voc√™ est√° promovendo?", key=f"{section_key_local}_product{KEY_SUFFIX_APP_GLOBAL}")
            details["key_message"] = st.text_area("Qual mensagem chave voc√™ quer comunicar?", key=f"{section_key_local}_message{KEY_SUFFIX_APP_GLOBAL}")
            details["usp"] = st.text_area("O que torna seu produto/servi√ßo especial (USP)?", key=f"{section_key_local}_usp{KEY_SUFFIX_APP_GLOBAL}")
            details["style_tone"] = st.selectbox("Qual o tom/estilo da comunica√ß√£o?", ("Profissional e direto", "Amig√°vel e informal", "Criativo e inspirador", "Urgente e promocional", "Engra√ßado e leve", "Educacional e informativo"), key=f"{section_key_local}_tone{KEY_SUFFIX_APP_GLOBAL}")
            details["extra_info"] = st.text_area("Alguma informa√ß√£o adicional/CTA?", key=f"{section_key_local}_extra{KEY_SUFFIX_APP_GLOBAL}")
            return details

        def _marketing_display_output_options(generated_content, section_key_local, file_name_prefix="conteudo_gerado"):
            st.subheader("üéâ Resultado da IA e Pr√≥ximos Passos:")
            st.markdown(generated_content)
            st.download_button(label="üì• Baixar Conte√∫do Gerado", data=generated_content.encode('utf-8'), file_name=f"{file_name_prefix}_{section_key_local}{KEY_SUFFIX_APP_GLOBAL}.txt", mime="text/plain", key=f"download_{section_key_local}{KEY_SUFFIX_APP_GLOBAL}")
            cols_actions = st.columns(2)
            with cols_actions[0]:
                if st.button("üîó Copiar para Compartilhar (Simulado)", key=f"{section_key_local}_share_btn{KEY_SUFFIX_APP_GLOBAL}"):
                    st.success("Conte√∫do pronto para ser copiado e compartilhado!")
            with cols_actions[1]:
                if st.button("üóìÔ∏è Simular Agendamento", key=f"{section_key_local}_schedule_btn{KEY_SUFFIX_APP_GLOBAL}"):
                    st.info("Agendamento simulado.")

        def _marketing_handle_criar_post(uploaded_files_info, details_dict, selected_platforms_list, llm):
            # (L√≥gica da fun√ß√£o como antes, usando KEY_SUFFIX_APP_GLOBAL para session_state e widget keys)
            if not selected_platforms_list: st.warning("Por favor, selecione pelo menos uma plataforma."); return
            if not details_dict["objective"]: st.warning("Por favor, descreva o objetivo do post."); return
            with st.spinner("ü§ñ A IA est√° criando seu post..."):
                prompt_parts = [
                    "**Instru√ß√£o para IA:** Voc√™ √© um especialista em copywriting para PMEs no Brasil...",
                    f"**Plataformas Alvo:** {', '.join(selected_platforms_list)}.",
                    f"**Produto/Servi√ßo Principal:** {details_dict['product_service']}",
                    f"**P√∫blico-Alvo:** {details_dict['target_audience']}",
                    f"**Objetivo do Post:** {details_dict['objective']}",
                    f"**Mensagem Chave:** {details_dict['key_message']}",
                    f"**Proposta √önica de Valor (USP):** {details_dict['usp']}",
                    f"**Tom/Estilo:** {details_dict['style_tone']}",
                    f"**Informa√ß√µes Adicionais/CTA:** {details_dict['extra_info']}"
                ] 
                if uploaded_files_info: prompt_parts.append(f"**Informa√ß√µes de Arquivos de Suporte:** {', '.join([f['name'] for f in uploaded_files_info])}.")
                final_prompt = "\n\n".join(prompt_parts)
                ai_response = llm.invoke(HumanMessage(content=final_prompt))
                st.session_state[f'generated_post_content{KEY_SUFFIX_APP_GLOBAL}'] = ai_response.content

        def _marketing_handle_criar_campanha(uploaded_files_info, details_dict, campaign_specifics, selected_platforms_list, llm):
            if not selected_platforms_list: st.warning("Selecione plataforma(s)."); return
            if not details_dict["objective"]: st.warning("Descreva o objetivo."); return
            with st.spinner("üß† Plano de campanha em elabora√ß√£o..."):
                prompt_parts = [
                    "**Instru√ß√£o para IA:** Estrategista de marketing digital para PMEs no Brasil. Plano de campanha conciso...",
                    f"**Nome da Campanha:** {campaign_specifics['name']}",
                    f"**Plataformas Alvo:** {', '.join(selected_platforms_list)}.",
                     # ... (completar com todas as chaves de details_dict e campaign_specifics)
                    f"**Produto/Servi√ßo Principal:** {details_dict['product_service']}",
                    f"**P√∫blico-Alvo:** {details_dict['target_audience']}",
                    f"**Objetivo:** {details_dict['objective']}",
                    f"**Mensagem Chave:** {details_dict['key_message']}",
                    f"**USP:** {details_dict['usp']}",
                    f"**Tom/Estilo:** {details_dict['style_tone']}",
                    f"**Dura√ß√£o:** {campaign_specifics['duration']}",
                    f"**Or√ßamento:** {campaign_specifics['budget']}",
                    f"**KPIs:** {campaign_specifics['kpis']}",
                    f"**Informa√ß√µes Adicionais/CTA:** {details_dict['extra_info']}"
                ]
                if uploaded_files_info: prompt_parts.append(f"**Arquivos de Suporte:** {', '.join([f['name'] for f in uploaded_files_info])}.")
                final_prompt = "\n\n".join(prompt_parts)
                ai_response = llm.invoke(HumanMessage(content=final_prompt))
                st.session_state[f'generated_campaign_content{KEY_SUFFIX_APP_GLOBAL}'] = ai_response.content
        
        def _marketing_handle_criar_landing_page(uploaded_files_info, lp_details, llm):
            if not lp_details["purpose"] or not lp_details["main_offer"] or not lp_details["cta"]: st.warning("Preencha objetivo, oferta e CTA."); return
            with st.spinner("üé® Estrutura da landing page..."):
                prompt_parts = [
                    "**Instru√ß√£o para IA:** Especialista UX/UI e copy para LPs de alta convers√£o (PMEs Brasil)...",
                    f"**Objetivo LP:** {lp_details['purpose']}",
                    f"**P√∫blico-Alvo:** {lp_details['target_audience']}",
                    f"**Oferta Principal:** {lp_details['main_offer']}",
                    f"**Benef√≠cios Chave:** {lp_details['key_benefits']}",
                    f"**CTA Principal:** {lp_details['cta']}",
                    f"**Prefer√™ncias Visuais:** {lp_details['visual_prefs']}"
                ]
                if uploaded_files_info: prompt_parts.append(f"**Arquivos de Suporte:** {', '.join([f['name'] for f in uploaded_files_info])}.")
                final_prompt = "\n\n".join(prompt_parts)
                ai_response = llm.invoke(HumanMessage(content=final_prompt))
                st.session_state[f'generated_lp_content{KEY_SUFFIX_APP_GLOBAL}'] = ai_response.content

        def _marketing_handle_criar_site(uploaded_files_info, site_details, llm):
            if not site_details["business_type"] or not site_details["main_purpose"]: st.warning("Informe tipo de neg√≥cio e objetivo."); return
            with st.spinner("üõ†Ô∏è Arquitetura do site..."):
                prompt_parts = [
                    "**Instru√ß√£o para IA:** Arquiteto de informa√ß√£o e web designer (PMEs Brasil). Estrutura de site e conte√∫do chave...",
                    f"**Tipo de Neg√≥cio:** {site_details['business_type']}",
                    f"**Objetivo do Site:** {site_details['main_purpose']}",
                    f"**P√∫blico-Alvo:** {site_details['target_audience']}",
                    f"**P√°ginas Essenciais:** {site_details['essential_pages']}",
                    f"**Diferenciais:** {site_details['key_features']}",
                    f"**Personalidade da Marca:** {site_details['brand_personality']}",
                    f"**Refer√™ncias Visuais:** {site_details['visual_references']}"
                ]
                if uploaded_files_info: prompt_parts.append(f"**Arquivos de Suporte:** {', '.join([f['name'] for f in uploaded_files_info])}.")
                final_prompt = "\n\n".join(prompt_parts)
                ai_response = llm.invoke(HumanMessage(content=final_prompt))
                st.session_state[f'generated_site_content{KEY_SUFFIX_APP_GLOBAL}'] = ai_response.content

        def _marketing_handle_encontre_cliente(uploaded_files_info, client_details, llm):
            if not client_details["product_campaign"]: st.warning("Descreva produto/campanha."); return
            with st.spinner("üïµÔ∏è An√°lise de p√∫blico-alvo..."):
                prompt_parts = [
                    "**Instru√ß√£o para IA:** 'Agente Detetive de Clientes' (PMEs Brasil). Persona detalhada, canais, mensagens...",
                    f"**Produto/Campanha:** {client_details['product_campaign']}",
                    f"**Localiza√ß√£o:** {client_details['location']}",
                    f"**Verba:** {client_details['budget']}",
                    f"**Idade/G√™nero:** {client_details['age_gender']}",
                    f"**Interesses/Dores:** {client_details['interests']}",
                    f"**Canais Atuais:** {client_details['current_channels']}",
                    f"**N√≠vel Pesquisa:** {'Deep Research' if client_details['deep_research'] else 'Padr√£o'}"
                ]
                if uploaded_files_info: prompt_parts.append(f"**Arquivos de Suporte:** {', '.join([f['name'] for f in uploaded_files_info])}.")
                final_prompt = "\n\n".join(prompt_parts)
                ai_response = llm.invoke(HumanMessage(content=final_prompt))
                st.session_state[f'generated_client_analysis{KEY_SUFFIX_APP_GLOBAL}'] = ai_response.content

        def _marketing_handle_conheca_concorrencia(uploaded_files_info, competitor_details, llm):
            if not competitor_details["your_business"] or not competitor_details["competitors_list"]: st.warning("Descreva seu neg√≥cio e concorrentes."); return
            with st.spinner("üî¨ An√°lise de concorr√™ncia..."):
                prompt_parts = [
                    "**Instru√ß√£o para IA:** 'Agente de Intelig√™ncia Competitiva' (PMEs Brasil). An√°lise de concorrentes, pontos fortes/fracos, oportunidades...",
                    f"**Seu Neg√≥cio:** {competitor_details['your_business']}",
                    f"**Concorrentes:** {competitor_details['competitors_list']}",
                    f"**Aspectos para An√°lise:** {', '.join(competitor_details['aspects_to_analyze'])}"
                ]
                if uploaded_files_info: prompt_parts.append(f"**Arquivos de Suporte:** {', '.join([f['name'] for f in uploaded_files_info])}.")
                final_prompt = "\n\n".join(prompt_parts)
                ai_response = llm.invoke(HumanMessage(content=final_prompt))
                st.session_state[f'generated_competitor_analysis{KEY_SUFFIX_APP_GLOBAL}'] = ai_response.content

        # --- Classe do Agente (AssistentePMEPro) ---
        class AssistentePMEPro:
            def __init__(self, llm_passed_model):
                if llm_passed_model is None: st.error("Erro: LLM n√£o fornecido ao AssistentePMEPro."); st.stop()
                self.llm = llm_passed_model
                # Inicializa mem√≥rias com sufixo global para unicidade
                for mem_key in ["plano_negocios", "calculo_precos", "gerador_ideias"]:
                    session_key = f'memoria_{mem_key}{KEY_SUFFIX_APP_GLOBAL}'
                    if session_key not in st.session_state:
                        st.session_state[session_key] = ConversationBufferMemory(memory_key=f"historico_chat_{mem_key}{KEY_SUFFIX_APP_GLOBAL}", return_messages=True)
                self.memoria_plano_negocios = st.session_state[f'memoria_plano_negocios{KEY_SUFFIX_APP_GLOBAL}']
                self.memoria_calculo_precos = st.session_state[f'memoria_calculo_precos{KEY_SUFFIX_APP_GLOBAL}']
                self.memoria_gerador_ideias = st.session_state[f'memoria_gerador_ideias{KEY_SUFFIX_APP_GLOBAL}']

            def _criar_cadeia_conversacional(self, system_message_content, memoria_especifica, memory_key_placeholder_base="historico_chat"):
                # O placeholder real usado na mem√≥ria √© definido na inicializa√ß√£o da mem√≥ria
                actual_memory_key = memoria_especifica.memory_key
                prompt_template = ChatPromptTemplate.from_messages([
                    SystemMessagePromptTemplate.from_template(system_message_content),
                    MessagesPlaceholder(variable_name=actual_memory_key), 
                    HumanMessagePromptTemplate.from_template("{input_usuario}")
                ])
                return LLMChain(llm=self.llm, prompt=prompt_template, memory=memoria_especifica, verbose=False)

            def marketing_digital_guiado(self):
                st.header("üöÄ Marketing Digital Interativo com IA")
                # (Restante da sua l√≥gica de marketing_digital_guiado, usando KEY_SUFFIX_APP_GLOBAL para todas as chaves de widget e session_state)
                # ... (c√≥digo omitido por brevidade, mas voc√™ deve colar o seu aqui, adaptando as chaves) ...
                # Exemplo de adapta√ß√£o de chave:
                # main_action_key = f"main_marketing_action_choice{KEY_SUFFIX_APP_GLOBAL}"
                # ...
                # if 'generated_post_content' + KEY_SUFFIX_APP_GLOBAL in st.session_state:
                #    _marketing_display_output_options(st.session_state['generated_post_content' + KEY_SUFFIX_APP_GLOBAL], "post_output" + KEY_SUFFIX_APP_GLOBAL, "post_ia")
                st.info("Se√ß√£o de Marketing Digital Guiado em constru√ß√£o aqui.")


            def conversar_plano_de_negocios(self, input_usuario):
                system_message_plano = "Voc√™ √© o \"Assistente PME Pro\", um consultor de neg√≥cios experiente especializado em auxiliar Pequenas e M√©dias Empresas (PMEs) no Brasil a desenvolverem planos de neg√≥cios robustos e estrat√©gicos. Seu objetivo √© guiar o usu√°rio atrav√©s das se√ß√µes de um plano de neg√≥cios, fazendo perguntas pertinentes, oferecendo insights e ajudando a estruturar as ideias. Mantenha um tom profissional, encorajador e pr√°tico."
                cadeia = self._criar_cadeia_conversacional(system_message_plano, self.memoria_plano_negocios, memory_key_placeholder_base=f"historico_chat_plano{KEY_SUFFIX_APP_GLOBAL}")
                resposta_ai_obj = cadeia.invoke({"input_usuario": input_usuario})
                return resposta_ai_obj['text'] if isinstance(resposta_ai_obj, dict) and 'text' in resposta_ai_obj else str(resposta_ai_obj)

            def calcular_precos_interativo(self, input_usuario, descricao_imagem_contexto=None):
                prompt_content_calc = f"O usu√°rio est√° buscando ajuda para precificar um produto/servi√ßo e forneceu a seguinte informa√ß√£o inicial: '{input_usuario}'."
                if descricao_imagem_contexto: prompt_content_calc = f"{descricao_imagem_contexto}\n\n{prompt_content_calc}"
                system_message_precos = f"""Voc√™ √© o "Assistente PME Pro", um especialista em estrat√©gias de precifica√ß√£o para PMEs no Brasil. {prompt_content_calc} Comece fazendo perguntas claras e objetivas para entender os custos (fixos e vari√°veis), o valor percebido pelo cliente, os pre√ßos da concorr√™ncia e os objetivos de margem de lucro do usu√°rio. Guie-o passo a passo no processo de c√°lculo, sugerindo m√©todos como markup, margem de contribui√ß√£o ou precifica√ß√£o baseada em valor, conforme apropriado."""
                cadeia = self._criar_cadeia_conversacional(system_message_precos, self.memoria_calculo_precos, memory_key_placeholder_base=f"historico_chat_precos{KEY_SUFFIX_APP_GLOBAL}")
                resposta_ai_obj = cadeia.invoke({"input_usuario": "Com base nas informa√ß√µes que forneci (incluindo a descri√ß√£o e a imagem, se houver), quais seriam os pr√≥ximos passos ou perguntas para definirmos o pre√ßo?"}) 
                return resposta_ai_obj['text'] if isinstance(resposta_ai_obj, dict) and 'text' in resposta_ai_obj else str(resposta_ai_obj)

            def gerar_ideias_para_negocios(self, input_usuario, contexto_arquivos=None):
                prompt_content_ideias = f"O usu√°rio busca ideias criativas e vi√°veis para seu neg√≥cio (ou um novo neg√≥cio) e descreve seu desafio ou ponto de partida como: '{input_usuario}'."
                if contexto_arquivos: prompt_content_ideias = f"Adicionalmente, o usu√°rio forneceu o seguinte contexto a partir de arquivos:\n{contexto_arquivos}\n\n{prompt_content_ideias}"
                system_message_ideias = f"""Voc√™ √© o "Assistente PME Pro", um consultor de neg√≥cios altamente criativo e com vis√£o de mercado, focado em PMEs no Brasil. {prompt_content_ideias} Fa√ßa perguntas explorat√≥rias para entender melhor as paix√µes, habilidades, recursos dispon√≠veis e o mercado de interesse do usu√°rio. Com base nisso, gere 3-5 ideias de neg√≥cios ou inova√ß√µes distintas e acion√°veis, cada uma com uma breve justificativa e potenciais primeiros passos. Priorize ideias com potencial de crescimento e alinhadas com tend√™ncias atuais."""
                cadeia = self._criar_cadeia_conversacional(system_message_ideias, self.memoria_gerador_ideias, memory_key_placeholder_base=f"historico_chat_ideias{KEY_SUFFIX_APP_GLOBAL}")
                resposta_ai_obj = cadeia.invoke({"input_usuario": "Com base no que descrevi e nos arquivos (se houver), quais ideias inovadoras voc√™ sugere?"})
                return resposta_ai_obj['text'] if isinstance(resposta_ai_obj, dict) and 'text' in resposta_ai_obj else str(resposta_ai_obj)

        # --- Fun√ß√µes Utilit√°rias de Chat (adaptadas para usar KEY_SUFFIX_APP_GLOBAL) ---
        def inicializar_ou_resetar_chat(area_chave, mensagem_inicial_ia, memoria_agente_instancia):
            chat_display_key = f"chat_display_{area_chave}{KEY_SUFFIX_APP_GLOBAL}"
            st.session_state[chat_display_key] = [{"role": "assistant", "content": mensagem_inicial_ia}]
            if memoria_agente_instancia:
                memoria_agente_instancia.clear()
                memoria_agente_instancia.chat_memory.add_ai_message(mensagem_inicial_ia)
            
            if area_chave == "calculo_precos": 
                st.session_state.pop(f'last_uploaded_image_info_{area_chave}{KEY_SUFFIX_APP_GLOBAL}', None)
                st.session_state.pop(f'processed_image_id_{area_chave}{KEY_SUFFIX_APP_GLOBAL}', None)
                st.session_state.pop(f'user_input_processed_{area_chave}{KEY_SUFFIX_APP_GLOBAL}', None)
            elif area_chave == "gerador_ideias": 
                st.session_state.pop(f'uploaded_file_info_{area_chave}_for_prompt{KEY_SUFFIX_APP_GLOBAL}', None)
                st.session_state.pop(f'processed_file_id_{area_chave}{KEY_SUFFIX_APP_GLOBAL}', None)
                st.session_state.pop(f'user_input_processed_{area_chave}{KEY_SUFFIX_APP_GLOBAL}', None)

        def exibir_chat_e_obter_input(area_chave, prompt_placeholder, funcao_conversa_agente, **kwargs_funcao_agente):
            chat_display_key = f"chat_display_{area_chave}{KEY_SUFFIX_APP_GLOBAL}"
            if chat_display_key not in st.session_state: st.session_state[chat_display_key] = [] 
            for msg_info in st.session_state[chat_display_key]:
                with st.chat_message(msg_info["role"]): st.markdown(msg_info["content"])
            prompt_usuario = st.chat_input(prompt_placeholder, key=f"chat_input_{area_chave}{KEY_SUFFIX_APP_GLOBAL}")
            if prompt_usuario:
                st.session_state[chat_display_key].append({"role": "user", "content": prompt_usuario})
                with st.chat_message("user"): st.markdown(prompt_usuario)
                if area_chave in ["calculo_precos", "gerador_ideias"]: st.session_state[f'user_input_processed_{area_chave}{KEY_SUFFIX_APP_GLOBAL}'] = True
                with st.spinner("Assistente PME Pro processando..."):
                    resposta_ai = funcao_conversa_agente(prompt_usuario, **kwargs_funcao_agente)
                st.session_state[chat_display_key].append({"role": "assistant", "content": resposta_ai})
                st.rerun()
        
        def _sidebar_clear_button(label, memoria, section_key): 
            if st.sidebar.button(f"üóëÔ∏è Limpar Hist√≥rico de {label}", key=f"btn_reset_{section_key}{KEY_SUFFIX_APP_GLOBAL}_clear"):
                msg_inicial = f"Ok, vamos recome√ßar {label.lower()}! Qual o seu ponto de partida?"
                if section_key == "calculo_precos": msg_inicial = "Ok, vamos recome√ßar o c√°lculo de pre√ßos! Descreva seu produto ou servi√ßo."
                elif section_key == "gerador_ideias": msg_inicial = "Ok, vamos recome√ßar a gera√ß√£o de ideias! Qual o seu ponto de partida?"
                inicializar_ou_resetar_chat(section_key, msg_inicial, memoria) 
                st.rerun()

        def _handle_chat_with_image(area_chave, prompt_placeholder, funcao_conversa_agente, uploaded_image_obj): 
            descricao_imagem_para_ia = None
            processed_image_id_key = f'processed_image_id_{area_chave}{KEY_SUFFIX_APP_GLOBAL}'
            last_uploaded_info_key = f'last_uploaded_image_info_{area_chave}{KEY_SUFFIX_APP_GLOBAL}'
            user_input_processed_key = f'user_input_processed_{area_chave}{KEY_SUFFIX_APP_GLOBAL}'

            if uploaded_image_obj is not None:
                if st.session_state.get(processed_image_id_key) != uploaded_image_obj.file_id: # Usar file_id para unicidade
                    try:
                        img_pil = Image.open(uploaded_image_obj); st.image(img_pil, caption=f"Imagem: {uploaded_image_obj.name}", width=150)
                        descricao_imagem_para_ia = f"Usu√°rio carregou imagem '{uploaded_image_obj.name}'."
                        st.session_state[last_uploaded_info_key] = descricao_imagem_para_ia
                        st.session_state[processed_image_id_key] = uploaded_image_obj.file_id
                        st.info(f"Imagem '{uploaded_image_obj.name}' pronta.")
                    except Exception as e: st.error(f"Erro ao processar imagem: {e}"); st.session_state[last_uploaded_info_key] = None; st.session_state[processed_image_id_key] = None
                else: descricao_imagem_para_ia = st.session_state.get(last_uploaded_info_key)
            kwargs_chat = {}
            ctx_img_prox_dialogo = st.session_state.get(last_uploaded_info_key)
            if ctx_img_prox_dialogo and not st.session_state.get(user_input_processed_key, False): kwargs_chat['descricao_imagem_contexto'] = ctx_img_prox_dialogo
            exibir_chat_e_obter_input(area_chave, prompt_placeholder, funcao_conversa_agente, **kwargs_chat)
            if user_input_processed_key in st.session_state and st.session_state[user_input_processed_key]:
                if st.session_state.get(last_uploaded_info_key): st.session_state[last_uploaded_info_key] = None
                st.session_state[user_input_processed_key] = False

        def _handle_chat_with_files(area_chave, prompt_placeholder, funcao_conversa_agente, uploaded_files_objs):
            contexto_para_ia_local = None
            processed_file_id_key = f'processed_file_id_{area_chave}{KEY_SUFFIX_APP_GLOBAL}'
            uploaded_info_key = f'uploaded_file_info_{area_chave}_for_prompt{KEY_SUFFIX_APP_GLOBAL}'
            user_input_processed_key = f'user_input_processed_{area_chave}{KEY_SUFFIX_APP_GLOBAL}'

            if uploaded_files_objs:
                current_file_signature = "-".join(sorted([f"{f.name}-{f.size}-{f.file_id}" for f in uploaded_files_objs])) # Adicionar file_id
                if st.session_state.get(processed_file_id_key) != current_file_signature or not st.session_state.get(uploaded_info_key):
                    text_contents, image_info = [], []
                    for f_item in uploaded_files_objs:
                        try:
                            if f_item.type == "text/plain": text_contents.append(f"Arquivo '{f_item.name}':\n{f_item.read().decode('utf-8')[:3000]}...")
                            elif f_item.type in ["image/png","image/jpeg"]: st.image(Image.open(f_item),caption=f"Contexto: {f_item.name}",width=100); image_info.append(f"Imagem '{f_item.name}'.")
                        except Exception as e: st.error(f"Erro ao processar '{f_item.name}': {e}")
                    full_ctx_str = ("\n\n--- TEXTO DOS ARQUIVOS ---\n" + "\n\n".join(text_contents) if text_contents else "") + \
                                   ("\n\n--- IMAGENS FORNECIDAS ---\n" + "\n".join(image_info) if image_info else "")
                    if full_ctx_str.strip(): st.session_state[uploaded_info_key] = full_ctx_str.strip(); contexto_para_ia_local = st.session_state[uploaded_info_key]; st.info("Arquivo(s) de contexto pronto(s).")
                    else: st.session_state[uploaded_info_key] = None
                    st.session_state[processed_file_id_key] = current_file_signature
                else: contexto_para_ia_local = st.session_state.get(uploaded_info_key)
            kwargs_chat = {}
            if contexto_para_ia_local and not st.session_state.get(user_input_processed_key, False): kwargs_chat['contexto_arquivos'] = contexto_para_ia_local
            exibir_chat_e_obter_input(area_chave, prompt_placeholder, funcao_conversa_agente, **kwargs_chat)
            if user_input_processed_key in st.session_state and st.session_state[user_input_processed_key]:
                if st.session_state.get(uploaded_info_key): st.session_state[uploaded_info_key] = None
                st.session_state[user_input_processed_key] = False

        # --- Instancia√ß√£o do Agente ---
        if 'agente_pme' not in st.session_state or not isinstance(st.session_state.agente_pme, AssistentePMEPro):
            st.session_state.agente_pme = AssistentePMEPro(llm_passed_model=llm_model_instance)
        agente = st.session_state.agente_pme
        
        # --- L√≥gica de Navega√ß√£o Principal (Sidebar) ---
        opcoes_menu = { 
            "P√°gina Inicial": "pagina_inicial", 
            "Marketing Digital com IA (Guia)": "marketing_guiado",
            "Elaborar Plano de Neg√≥cios com IA": "plano_negocios", 
            "C√°lculo de Pre√ßos Inteligente": "calculo_precos",
            "Gerador de Ideias para Neg√≥cios": "gerador_ideias"
        }
        radio_key_sidebar_main = f'sidebar_selection{KEY_SUFFIX_APP_GLOBAL}_main'
        
        if 'area_selecionada' not in st.session_state or st.session_state.area_selecionada not in opcoes_menu:
            st.session_state.area_selecionada = "P√°gina Inicial" # Define o padr√£o
        
        # Determina o √≠ndice do radio button
        try:
            current_radio_index = list(opcoes_menu.keys()).index(st.session_state.area_selecionada)
        except ValueError:
            current_radio_index = 0 # Default para "P√°gina Inicial" se a chave n√£o for encontrada
            st.session_state.area_selecionada = list(opcoes_menu.keys())[0]

        area_selecionada_label = st.sidebar.radio(
            "Como posso te ajudar hoje?", 
            options=list(opcoes_menu.keys()), 
            key=radio_key_sidebar_main, 
            index=current_radio_index
        )

        if area_selecionada_label != st.session_state.area_selecionada:
            st.session_state.area_selecionada = area_selecionada_label
            # Limpar estados espec√≠ficos de se√ß√µes ao mudar de se√ß√£o, se necess√°rio
            if area_selecionada_label != "Marketing Digital com IA (Guia)":
                # Adapte esta l√≥gica de limpeza conforme necess√°rio
                keys_to_clear_on_nav = [k for k in st.session_state if k.startswith('generated_') or k.startswith('post_platform_') or k.startswith('campaign_platform_')]
                for key_clear_nav in keys_to_clear_on_nav:
                    st.session_state.pop(key_clear_nav, None)
            st.rerun() 

        current_section_key = opcoes_menu.get(st.session_state.area_selecionada)
        
        # Inicializar chats quando a se√ß√£o √© selecionada pela primeira vez ou mudada
        if current_section_key not in ["pagina_inicial", "marketing_guiado"]:
            chat_init_flag_key = f'previous_area_selecionada_for_chat_init{KEY_SUFFIX_APP_GLOBAL}'
            chat_display_key_specific = f"chat_display_{current_section_key}{KEY_SUFFIX_APP_GLOBAL}"
            if st.session_state.area_selecionada != st.session_state.get(chat_init_flag_key) or \
               chat_display_key_specific not in st.session_state or \
               not st.session_state[chat_display_key_specific]:
                
                msg_inicial_nav, memoria_agente_nav = "", None
                if current_section_key == "plano_negocios": msg_inicial_nav, memoria_agente_nav = "Ol√°! Sou seu Assistente PME Pro. Vamos elaborar um rascunho do seu plano de neg√≥cios? Comece me contando sobre sua ideia.", agente.memoria_plano_negocios
                elif current_section_key == "calculo_precos": msg_inicial_nav, memoria_agente_nav = "Ol√°! Para calcular pre√ßos, descreva seu produto/servi√ßo. Pode enviar uma imagem.", agente.memoria_calculo_precos
                elif current_section_key == "gerador_ideias": msg_inicial_nav, memoria_agente_nav = "Ol√°! Buscando ideias? Descreva seu desafio ou envie arquivos de contexto.", agente.memoria_gerador_ideias
                
                if msg_inicial_nav and memoria_agente_nav is not None:
                    inicializar_ou_resetar_chat(current_section_key, msg_inicial_nav, memoria_agente_nav)
                st.session_state[chat_init_flag_key] = st.session_state.area_selecionada

        # --- SELE√á√ÉO E EXIBI√á√ÉO DA SE√á√ÉO ATUAL ---
        if current_section_key == "pagina_inicial":
            st.markdown("<div style='text-align: center;'><h1>üöÄ Bem-vindo ao seu Assistente PME Pro!</h1></div>", unsafe_allow_html=True)
            st.markdown("<div style='text-align: center;'><p>Sou seu parceiro de IA dedicado a impulsionar o sucesso de Pequenas e M√©dias Empresas.</p></div>", unsafe_allow_html=True)
            st.markdown("<div style='text-align: center;'><p>Use o menu √† esquerda para navegar pelas ferramentas.</p></div>", unsafe_allow_html=True)
            st.markdown("---")
            # Logo foi removido daqui conforme seu feedback, pois j√° existe na sidebar.
            # Se quiser adicionar algo visual aqui, pode ser um st.image gen√©rico ou √≠cones.
            st.markdown("---")
            
            num_botoes_funcionais = len(opcoes_menu) -1 
            if num_botoes_funcionais > 0 :
                num_cols_render = min(num_botoes_funcionais, 3) 
                cols_botoes_pg_inicial = st.columns(num_cols_render)
                btn_idx_pg_inicial = 0
                for nome_menu_btn_pg, chave_secao_btn_pg in opcoes_menu.items():
                    if chave_secao_btn_pg != "pagina_inicial":
                        col_para_botao_pg = cols_botoes_pg_inicial[btn_idx_pg_inicial % num_cols_render]
                        button_label_pg = nome_menu_btn_pg.split(" com IA")[0].split(" (Guia)")[0].replace("Elaborar ", "").replace(" Inteligente","").replace(" para Neg√≥cios","")
                        if col_para_botao_pg.button(button_label_pg, key=f"btn_goto_{chave_secao_btn_pg}{KEY_SUFFIX_APP_GLOBAL}", use_container_width=True, help=f"Ir para {nome_menu_btn_pg}"):
                            st.session_state.area_selecionada = nome_menu_btn_pg
                            # Atualiza o √≠ndice do radio button da sidebar ao clicar no bot√£o da p√°gina inicial
                            try: st.session_state[f'{radio_key_sidebar_main}_index'] = list(opcoes_menu.keys()).index(nome_menu_btn_pg)
                            except ValueError: pass # Se o nome n√£o for encontrado, n√£o faz nada (deve ser encontrado)
                            st.rerun()
                        btn_idx_pg_inicial +=1
        
        elif current_section_key == "marketing_guiado": 
            agente.marketing_digital_guiado()
        elif current_section_key == "plano_negocios": 
            st.header("üìù Elaborando seu Plano de Neg√≥cios com IA")
            exibir_chat_e_obter_input(current_section_key, "Sua resposta ou pr√≥xima se√ß√£o do plano...", agente.conversar_plano_de_negocios)
            _sidebar_clear_button("Plano", agente.memoria_plano_negocios, current_section_key)
        elif current_section_key == "calculo_precos": 
            st.header("üí≤ C√°lculo de Pre√ßos Inteligente com IA")
            uploaded_image_preco = st.file_uploader("Imagem do produto (opcional):", type=["png","jpg","jpeg"],key=f"preco_img{KEY_SUFFIX_APP_GLOBAL}")
            _handle_chat_with_image("calculo_precos", "Descreva produto/custos...", agente.calcular_precos_interativo, uploaded_image_preco)
            _sidebar_clear_button("Pre√ßos", agente.memoria_calculo_precos, current_section_key)
        elif current_section_key == "gerador_ideias": 
            st.header("üí° Gerador de Ideias para seu Neg√≥cio com IA")
            uploaded_files_ideias = st.file_uploader("Arquivos de contexto (opcional):",type=["txt","png","jpg","jpeg"],accept_multiple_files=True,key=f"ideias_files{KEY_SUFFIX_APP_GLOBAL}")
            _handle_chat_with_files("gerador_ideias", "Descreva seu desafio...", agente.gerar_ideias_para_negocios, uploaded_files_ideias)
            _sidebar_clear_button("Ideias", agente.memoria_gerador_ideias, current_section_key)

    else: 
        st.error("üö® O Assistente PME Pro n√£o p√¥de ser iniciado devido a um problema com o modelo LLM.")
        st.info("Verifique a API Key do Google e a configura√ß√£o do modelo nos segredos.")

# --- Se√ß√£o de Login/Registro (executada se user_is_authenticated for False) ---
else: 
    st.session_state.pop('auth_error_shown', None) 
    st.title("üîë Bem-vindo ao Assistente PME Pro") 
    st.sidebar.subheader("Login / Registro")
    auth_action_choice = st.sidebar.radio("A√ß√£o:", ("Login", "Registrar Novo Usu√°rio"), key=f"app_auth_action_choice{KEY_SUFFIX_APP_GLOBAL}_else")

    if auth_action_choice == "Login":
        with st.sidebar.form(f"app_login_form{KEY_SUFFIX_APP_GLOBAL}_else"):
            login_email = st.text_input("Email")
            login_password = st.text_input("Senha", type="password")
            login_button_clicked = st.form_submit_button("Login")
            if login_button_clicked:
                if login_email and login_password and pb_auth_client:
                    try:
                        user_session = pb_auth_client.sign_in_with_email_and_password(login_email, login_password)
                        st.session_state.user_session_pyrebase = dict(user_session)
                        st.session_state.pop('firebase_init_success_message_shown', None)
                        st.rerun()
                    except Exception as e:
                        error_message_login = "Erro no login. Verifique suas credenciais."
                        try: 
                            error_details_str = e.args[0] if len(e.args) > 0 else "{}"
                            error_data = json.loads(error_details_str.replace("'", "\""))
                            api_error_message = error_data.get('error', {}).get('message', '')
                            if "INVALID_LOGIN_CREDENTIALS" in api_error_message or "EMAIL_NOT_FOUND" in api_error_message or "INVALID_PASSWORD" in api_error_message or "USER_DISABLED" in api_error_message or "INVALID_EMAIL" in api_error_message:
                                error_message_login = "Email ou senha inv√°lidos, ou usu√°rio desabilitado."
                            elif api_error_message: error_message_login = f"Erro no login: {api_error_message}"
                        except: pass
                        st.sidebar.error(error_message_login)
                elif not pb_auth_client: st.sidebar.error("Cliente Firebase Auth n√£o inicializado.")
                else: st.sidebar.warning("Por favor, preencha email e senha.")
    
    elif auth_action_choice == "Registrar Novo Usu√°rio":
        with st.sidebar.form(f"app_register_form{KEY_SUFFIX_APP_GLOBAL}_else"):
            reg_email = st.text_input("Email para registro")
            reg_password = st.text_input("Senha para registro (m√≠nimo 6 caracteres)", type="password")
            submit_register = st.form_submit_button("Registrar")
            if submit_register:
                if reg_email and reg_password and pb_auth_client:
                    try:
                        user = pb_auth_client.create_user_with_email_and_password(reg_email, reg_password)
                        st.sidebar.success(f"Usu√°rio {reg_email} registrado! Por favor, fa√ßa o login.")
                        try: pb_auth_client.send_email_verification(user['idToken']); st.sidebar.info("Email de verifica√ß√£o enviado.")
                        except Exception as verify_email_error: st.sidebar.caption(f"Nota: Envio de email de verifica√ß√£o falhou: {verify_email_error}")
                    except Exception as e:
                        error_message_register = "Erro no registro."
                        try:
                            error_details_str = e.args[0] if len(e.args) > 0 else "{}"
                            error_data = json.loads(error_details_str.replace("'", "\""))
                            api_error_message = error_data.get('error', {}).get('message', '')
                            if "EMAIL_EXISTS" in api_error_message: error_message_register = "Este email j√° est√° registrado. Tente fazer login."
                            elif api_error_message: error_message_register = f"Erro no registro: {api_error_message}"
                        except: error_message_register = f"Erro no registro: {str(e)}"
                        st.sidebar.error(error_message_register)
                elif not pb_auth_client: st.sidebar.error("Cliente Firebase Auth n√£o inicializado.")
                else: st.sidebar.warning("Por favor, preencha email e senha para registro.")
    
    if not error_message_firebase_init: 
        st.info("Fa√ßa login ou registre-se na barra lateral para usar o Assistente PME Pro.")
        # Logo da tela de login (se a pasta 'images' estiver correta)
        LOGO_PATH_UNAUTH = "images/logo-pme-ia.png" 
        FALLBACK_LOGO_URL_UNAUTH = "https://i.imgur.com/7IIYxq1.png"
        try:
            st.image(LOGO_PATH_UNAUTH, width=200)
        except Exception:
            st.image(FALLBACK_LOGO_URL_UNAUTH, width=200, caption="Logo (Fallback)")

# Rodap√© da Sidebar (sempre vis√≠vel)
st.sidebar.markdown("---")
st.sidebar.info("Desenvolvido por Yaakov Israel com Gemini Pro")
